PK
     H>[���      
   .gitignorenode_modules/
PK
     H>[���@B  B  	   README.md# Project Setup
    
    To run this project, follow these steps:
    
    1. Extract the zip file.
    2. Run `npm install` to install dependencies.
    3. Run `npm run dev` to start the development server.
    
    This project was generated through Alpha. For more information, visit [dualite.dev](https://dualite.dev).PK
     H>[�e���  �     eslint.config.jsimport js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);
PK
     H>[��v
  
  
   index.html<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Westnaord - پلتفرم رشد فردی و خودشناسی</title>
    
    <meta name="description" content="پلتفرم جامع رشد فردی با 33 ابزار مدرن برای طراحی و پیگیری مسیر زندگی" />
    <meta name="author" content="Westnaord Team" />

    <meta property="og:title" content="Westnaord - پلتفرم رشد فردی و خودشناسی" />
    <meta property="og:description" content="پلتفرم جامع رشد فردی با 33 ابزار مدرن برای طراحی و پیگیری مسیر زندگی" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://westnaord.com" />
    <meta property="og:image" content="https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/1200x630/FFD700/000000?text=Westnaord" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />	
    <meta property="og:image:alt" content="پلتفرم رشد فردی Westnaord" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Westnaord - پلتفرم رشد فردی و خودشناسی" />
    <meta name="twitter:description" content="پلتفرم جامع رشد فردی با 33 ابزار مدرن برای طراحی و پیگیری مسیر زندگی" />
    <meta name="twitter:image" content="https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/1200x630/FFD700/000000?text=Westnaord" />

    <link rel="canonical" href="https://westnaord.com" />

    <!-- Persian Fonts -->
    <link href="https://cdn.jsdelivr.net/npm/vazirmatn@33.0.3/Vazirmatn-font-face.css" rel="stylesheet">

    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebSite",
      "name": "Westnaord",
      "url": "https://westnaord.com",
      "description": "پلتفرم جامع رشد فردی با 33 ابزار مدرن برای طراحی و پیگیری مسیر زندگی",
      "publisher": {
        "@type": "Organization",
        "name": "Westnaord Team"
      }
    }
    </script>

  </head>
  <body class="font-vazir">
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
PK
     H>[k�~׽  �     package.json{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@faker-js/faker": "^8.4.1",
    "axios": "^1.7.2",
    "clsx": "^2.1.1",
    "dayjs": "^1.11.11",
    "dayjs-hijri-plugin": "^1.2.2",
    "dayjs-jalali-plugin": "^1.0.2",
    "framer-motion": "^11.2.12",
    "i18next": "^25.5.2",
    "i18next-browser-languagedetector": "^8.2.0",
    "lucide-react": "^0.395.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-i18next": "^15.7.3",
    "react-router-dom": "^6.23.1",
    "reactflow": "^11.11.4",
    "recharts": "^2.12.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.5.0",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.19",
    "eslint": "^9.5.0",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "globals": "^15.6.0",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.4.5",
    "typescript-eslint": "^7.13.1",
    "vite": "^5.3.1"
  }
}
PK
     H>[��6�b   b      postcss.config.jsexport default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
};
PK
     H>[               src/PK
     H>[���Ƴ  �     src/App.tsximport React, { useState, useEffect } from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslation } from 'react-i18next';

import { ThemeProvider } from './contexts/ThemeContext';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import Header from './components/Layout/Header';
import Sidebar from './components/Layout/Sidebar';
import RoleSwitcher from './components/Layout/RoleSwitcher';
import LanguageSwitcher from './components/Layout/LanguageSwitcher';
import Login from './components/Login';
import Dashboard from './components/Dashboard/Dashboard';
import ComingSoon from './components/ComingSoon';

// Panels
import MentorPanel from './components/Panels/MentorPanel';
import AdminPanel from './components/Panels/AdminPanel';
import SettingsPanel from './components/Panels/SettingsPanel';
import UserProfilePanel from './components/Panels/UserProfilePanel';
import SubscriptionPanel from './components/Panels/SubscriptionPanel';

// Tools
import EightPlan from './components/Tools/EightPlan';
import VisionBoard from './components/Tools/VisionBoard';
import HabitTracker from './components/Tools/HabitTracker';
import GratitudeJournal from './components/Tools/GratitudeJournal';
import CommunityForum from './components/Tools/CommunityForum';
import MindMapBuilder from './components/Tools/MindMapBuilder';
import SwotAnalysis from './components/Tools/SwotAnalysis';
import MoneyPlanner from './components/Tools/MoneyPlanner';
import BeliefsTool from './components/Tools/BeliefsTool';
import IkigaiFinder from './components/Tools/IkigaiFinder';
import GoalPyramid from './components/Tools/GoalPyramid';

export type UserRole = 'user' | 'mentor' | 'admin';
export type Language = 'en' | 'fa' | 'ar';

function AppContent() {
  // --- All hooks must be at the top level ---
  const { currentUser, simulatedRole, setSimulatedRole, updateUserLanguage } = useAuth();
  const { i18n } = useTranslation();
  
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [roleSwitcherOpen, setRoleSwitcherOpen] = useState(false);
  const [languageSwitcherOpen, setLanguageSwitcherOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('dashboard');
  const [isDesktop, setIsDesktop] = useState(window.innerWidth >= 768);

  const currentRole = currentUser ? (simulatedRole || currentUser.role) : undefined;

  useEffect(() => {
    const handleResize = () => {
      const desktop = window.innerWidth >= 768;
      setIsDesktop(desktop);
      setSidebarOpen(desktop);
    };
    window.addEventListener('resize', handleResize);
    handleResize();
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    // Guard against running when logged out
    if (!currentUser || !currentRole) return;

    if (currentRole === 'user' && (activeSection === 'admin-panel' || activeSection === 'mentor-panel' || activeSection === 'settings')) {
      setActiveSection('dashboard');
    }
    if (currentRole === 'mentor' && activeSection === 'admin-panel') {
      setActiveSection('dashboard');
    }
  }, [currentRole, activeSection, currentUser]);

  useEffect(() => {
    const currentLang = i18n.language as Language;
    document.documentElement.lang = currentLang;
    document.documentElement.dir = i18n.dir(currentLang);
    
    // Guard against running when logged out
    if (currentUser && currentUser.language !== currentLang) {
      updateUserLanguage(currentUser.id, currentLang);
    }
  }, [i18n.language, currentUser, updateUserLanguage]);

  // --- Component logic can follow hooks ---
  const handleMenuToggle = () => setSidebarOpen(!sidebarOpen);
  const handleRoleSwitchToggle = () => currentUser?.role === 'admin' && setRoleSwitcherOpen(!roleSwitcherOpen);
  const handleLanguageSwitchToggle = () => setLanguageSwitcherOpen(!languageSwitcherOpen);

  const handleSectionChange = (section: string) => {
    setActiveSection(section);
    if (!isDesktop) {
      setSidebarOpen(false);
    }
  };

  const renderContent = () => {
    // This function is only called when logged in, so currentRole is guaranteed to be defined.
    switch (activeSection) {
      case 'dashboard': return <Dashboard onActionClick={handleSectionChange} />;
      case 'user-profile': return <UserProfilePanel />;
      case 'subscription': return <SubscriptionPanel />;
      
      // Tools
      case '8plan': return <EightPlan />;
      case 'vision-board': return <VisionBoard />;
      case 'habit-tracker': return <HabitTracker />;
      case 'gratitude-journal': return <GratitudeJournal />;
      case 'community-forum': return <CommunityForum />;
      case 'mind-map-builder': return <MindMapBuilder />;
      case 'swot-analysis': return <SwotAnalysis />;
      case 'money-planner': return <MoneyPlanner />;
      case 'beliefs': return <BeliefsTool />;
      case 'ikigai-finder': return <IkigaiFinder />;
      case 'goal-pyramid': return <GoalPyramid />;

      // Panels
      case 'mentor-panel': return currentRole === 'mentor' || currentRole === 'admin' ? <MentorPanel /> : <ComingSoon title="Access Denied" />;
      case 'admin-panel': return currentRole === 'admin' ? <AdminPanel /> : <ComingSoon title="Access Denied" />;
      case 'settings': return currentRole === 'admin' ? <SettingsPanel /> : <ComingSoon title="Access Denied" />;
      
      default: return <ComingSoon title={activeSection} />;
    }
  };

  // --- Conditional return should be the last thing before the main return ---
  if (!currentUser || !currentRole) {
    return <Login />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <div className="fixed inset-0 opacity-20">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_1px_1px,rgba(255,215,0,0.15)_1px,transparent_0)] bg-[length:20px_20px]"></div>
      </div>

      <div className="relative flex h-screen overflow-hidden">
        <Sidebar
          isOpen={sidebarOpen}
          onClose={() => setSidebarOpen(false)}
          activeSection={activeSection}
          onSectionChange={handleSectionChange}
          userRole={currentRole}
          isDesktop={isDesktop}
        />

        <div 
          className="flex-1 flex flex-col overflow-hidden transition-all duration-300 ease-in-out" 
          style={i18n.dir() === 'rtl' ? { marginRight: isDesktop && sidebarOpen ? '18rem' : '0' } : { marginLeft: isDesktop && sidebarOpen ? '18rem' : '0' }}
        >
          <Header 
            onMenuToggle={handleMenuToggle} 
            onRoleSwitchToggle={handleRoleSwitchToggle}
            onLanguageSwitchToggle={handleLanguageSwitchToggle}
            showRoleSwitchIcon={currentUser.role === 'admin'}
          />
          
          <RoleSwitcher 
            isOpen={roleSwitcherOpen}
            currentRole={currentRole}
            onRoleChange={(role) => {
              setSimulatedRole(role);
              setActiveSection('dashboard');
            }}
          />

          <LanguageSwitcher
            isOpen={languageSwitcherOpen}
            onClose={() => setLanguageSwitcherOpen(false)}
          />
          
          <main className="flex-1 overflow-y-auto">
            <AnimatePresence mode="wait">
              <motion.div
                key={`${activeSection}-${currentRole}-${i18n.language}`}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
                className="container mx-auto px-4 py-8"
              >
                {renderContent()}
              </motion.div>
            </AnimatePresence>
          </main>
        </div>
      </div>
    </div>
  );
}

function App() {
  return (
    <ThemeProvider>
      <AuthProvider>
        <Router>
          <AppContent />
        </Router>
      </AuthProvider>
    </ThemeProvider>
  );
}

export default App;
PK
     H>[               src/components/PK
     H>[����  �     src/components/ComingSoon.tsximport React from 'react';
import { motion } from 'framer-motion';
import { Construction } from 'lucide-react';
import { useTranslation } from 'react-i18next';

interface ComingSoonProps {
  title: string;
}

const ComingSoon: React.FC<ComingSoonProps> = ({ title }) => {
  const { t } = useTranslation();
  
  const formattedTitle = title
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');

  return (
    <div className="flex flex-col items-center justify-center h-full min-h-[60vh] text-center p-8">
      <motion.div
        initial={{ scale: 0.5, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ type: 'spring', damping: 15 }}
        className="p-8 bg-gold-100 dark:bg-gold-900/30 rounded-full mb-8"
      >
        <Construction className="w-16 h-16 text-gold-500" />
      </motion.div>
      <motion.h1 
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.2 }}
        className="text-3xl font-bold text-gray-900 dark:text-white mb-4"
      >
        {t('comingSoon.title', { tool: formattedTitle })}
      </motion.h1>
      <motion.p 
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.3 }}
        className="text-gray-600 dark:text-gray-400 max-w-md"
      >
        {t('comingSoon.description')}
      </motion.p>
    </div>
  );
};

export default ComingSoon;
PK
     H>[               src/components/Dashboard/PK
     H>[	��>  >  &   src/components/Dashboard/Dashboard.tsximport React from 'react';
import DashboardStats from './DashboardStats';
import QuickActions from './QuickActions';
import RecentActivity from './RecentActivity';
import ProgressCharts from './ProgressCharts';

interface DashboardProps {
    onActionClick: (actionId: string) => void;
}

const Dashboard: React.FC<DashboardProps> = ({ onActionClick }) => {
    const handleQuickAction = (actionId: string) => {
        const actionMap: Record<string, string> = {
          '8plan': '8plan',
          'habit': 'habit-tracker',
          'task': 'checklist',
          'westcom': 'westcom',
          'money': 'money-planner',
          'belief': 'beliefs',
          'calendar': 'calendar',
          'report': 'reports',
        };
        
        const section = actionMap[actionId] || actionId;
        onActionClick(section);
    };

    return (
        <div className="space-y-8">
            <DashboardStats />
            <QuickActions onActionClick={handleQuickAction} />
            <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">
                <div className="xl:col-span-2">
                    <RecentActivity />
                </div>
                <div className="xl:col-span-1">
                    <ProgressCharts />
                </div>
            </div>
        </div>
    );
};

export default Dashboard;
PK
     H>[Ba�E�  �  +   src/components/Dashboard/DashboardStats.tsximport React from 'react';
import { motion } from 'framer-motion';
import { TrendingUp, Target, CheckCircle, Star } from 'lucide-react';

const stats = [
  { 
    id: 1, 
    title: 'اهداف تکمیل شده', 
    value: '12', 
    total: '20',
    icon: Target, 
    color: 'from-green-400 to-green-600',
    bgColor: 'bg-green-100 dark:bg-green-900/30'
  },
  { 
    id: 2, 
    title: 'عادت‌های فعال', 
    value: '8', 
    total: '10',
    icon: TrendingUp, 
    color: 'from-blue-400 to-blue-600',
    bgColor: 'bg-blue-100 dark:bg-blue-900/30'
  },
  { 
    id: 3, 
    title: 'تکالیف انجام شده', 
    value: '15', 
    total: '18',
    icon: CheckCircle, 
    color: 'from-purple-400 to-purple-600',
    bgColor: 'bg-purple-100 dark:bg-purple-900/30'
  },
  { 
    id: 4, 
    title: 'امتیاز کل', 
    value: '2,847', 
    total: '',
    icon: Star, 
    color: 'from-gold-400 to-gold-600',
    bgColor: 'bg-gold-100 dark:bg-gold-900/30'
  },
];

const DashboardStats: React.FC = () => {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      {stats.map((stat, index) => (
        <motion.div
          key={stat.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1 }}
          whileHover={{ y: -2, scale: 1.02 }}
          className="relative overflow-hidden rounded-2xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 p-6 shadow-lg hover:shadow-xl transition-all duration-300"
        >
          {/* Background Gradient */}
          <div className={`absolute inset-0 bg-gradient-to-br ${stat.color} opacity-5`}></div>
          
          {/* Content */}
          <div className="relative">
            <div className="flex items-center justify-between mb-4">
              <div className={`p-3 rounded-xl ${stat.bgColor}`}>
                <stat.icon className={`w-6 h-6 bg-gradient-to-r ${stat.color} bg-clip-text text-transparent`} />
              </div>
              {stat.total && (
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {stat.value}/{stat.total}
                </span>
              )}
            </div>
            
            <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-1">
              {stat.value}
            </h3>
            <p className="text-sm text-gray-600 dark:text-gray-300">
              {stat.title}
            </p>

            {/* Progress Bar */}
            {stat.total && (
              <div className="mt-3">
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <motion.div
                    initial={{ width: 0 }}
                    animate={{ width: `${(parseInt(stat.value) / parseInt(stat.total)) * 100}%` }}
                    transition={{ delay: 0.5 + index * 0.1, duration: 1 }}
                    className={`h-2 rounded-full bg-gradient-to-r ${stat.color}`}
                  ></motion.div>
                </div>
              </div>
            )}
          </div>
        </motion.div>
      ))}
    </div>
  );
};

export default DashboardStats;
PK
     H>[`�"�  �  +   src/components/Dashboard/ProgressCharts.tsximport React from 'react';
import { motion } from 'framer-motion';
import { TrendingUp, Target, CheckCircle } from 'lucide-react';

const ProgressCharts: React.FC = () => {
  // Sample data for progress visualization
  const weeklyProgress = [
    { day: 'شنبه', completed: 85 },
    { day: 'یکشنبه', completed: 92 },
    { day: 'دوشنبه', completed: 78 },
    { day: 'سه‌شنبه', completed: 95 },
    { day: 'چهارشنبه', completed: 88 },
    { day: 'پنج‌شنبه', completed: 76 },
    { day: 'جمعه', completed: 90 },
  ];

  const monthlyGoals = [
    { category: 'سلامت', progress: 85, color: 'bg-green-500' },
    { category: 'مالی', progress: 70, color: 'bg-blue-500' },
    { category: 'روابط', progress: 92, color: 'bg-purple-500' },
    { category: 'شغلی', progress: 78, color: 'bg-orange-500' },
    { category: 'معنوی', progress: 88, color: 'bg-pink-500' },
  ];

  return (
    <div className="space-y-6">
      {/* Weekly Progress Chart */}
      <div className="rounded-2xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 p-6 shadow-lg">
        <div className="flex items-center space-x-2 space-x-reverse mb-6">
          <TrendingUp className="w-5 h-5 text-gold-500" />
          <h3 className="text-lg font-bold text-gray-900 dark:text-white">پیشرفت هفتگی</h3>
        </div>

        <div className="flex items-end justify-between space-x-2 space-x-reverse h-48">
          {weeklyProgress.map((day, index) => (
            <motion.div
              key={day.day}
              initial={{ height: 0 }}
              animate={{ height: `${day.completed}%` }}
              transition={{ delay: index * 0.1, duration: 0.5 }}
              className="flex-1 flex flex-col items-center"
            >
              <div className="w-full max-w-8 bg-gradient-to-t from-gold-400 to-gold-600 rounded-t-lg relative">
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.5 + index * 0.1 }}
                  className="absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-medium text-gray-700 dark:text-gray-300"
                >
                  {day.completed}%
                </motion.div>
              </div>
              <span className="text-xs text-gray-600 dark:text-gray-400 mt-2 text-center">
                {day.day}
              </span>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Monthly Goals Progress */}
      <div className="rounded-2xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 p-6 shadow-lg">
        <div className="flex items-center space-x-2 space-x-reverse mb-6">
          <Target className="w-5 h-5 text-gold-500" />
          <h3 className="text-lg font-bold text-gray-900 dark:text-white">اهداف ماهانه</h3>
        </div>

        <div className="space-y-4">
          {monthlyGoals.map((goal, index) => (
            <motion.div
              key={goal.category}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className="space-y-2"
            >
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  {goal.category}
                </span>
                <span className="text-sm font-bold text-gray-900 dark:text-white">
                  {goal.progress}%
                </span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${goal.progress}%` }}
                  transition={{ delay: 0.5 + index * 0.1, duration: 0.8 }}
                  className={`h-2 rounded-full ${goal.color}`}
                />
              </div>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Today's Tasks */}
      <div className="rounded-2xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 p-6 shadow-lg">
        <div className="flex items-center space-x-2 space-x-reverse mb-6">
          <CheckCircle className="w-5 h-5 text-gold-500" />
          <h3 className="text-lg font-bold text-gray-900 dark:text-white">وظایف امروز</h3>
        </div>

        <div className="flex items-center justify-center py-8">
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ type: 'spring', damping: 15 }}
            className="relative w-32 h-32"
          >
            {/* Background Circle */}
            <svg className="w-32 h-32 transform -rotate-90" viewBox="0 0 36 36">
              <path
                className="text-gray-200 dark:text-gray-700"
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
              />
              <motion.path
                initial={{ strokeDasharray: '0 100' }}
                animate={{ strokeDasharray: '75 100' }}
                transition={{ delay: 0.5, duration: 1 }}
                className="text-gold-500"
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
              />
            </svg>
            
            {/* Center Text */}
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="text-center">
                <div className="text-2xl font-bold text-gray-900 dark:text-white">12/16</div>
                <div className="text-xs text-gray-600 dark:text-gray-400">تکمیل شده</div>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default ProgressCharts;
PK
     H>[ ��\  \  )   src/components/Dashboard/QuickActions.tsximport React from 'react';
import { motion } from 'framer-motion';
import { 
  Target, Calendar, CheckSquare, TrendingUp, 
  MessageSquare, DollarSign, Brain, BarChart3 
} from 'lucide-react';

const quickActions = [
  { id: '8plan', title: '8Plan جدید', icon: Target, description: 'شروع پلن ۸ ماهه', color: 'from-red-400 to-red-600' },
  { id: 'habit', title: 'عادت جدید', icon: TrendingUp, description: 'ایجاد عادت مثبت', color: 'from-green-400 to-green-600' },
  { id: 'task', title: 'تکلیف جدید', icon: CheckSquare, description: 'افزودن کار امروز', color: 'from-blue-400 to-blue-600' },
  { id: 'westcom', title: 'پیام روزانه', icon: MessageSquare, description: 'دریافت انگیزه', color: 'from-purple-400 to-purple-600' },
  { id: 'money', title: 'ثبت مالی', icon: DollarSign, description: 'درآمد/هزینه امروز', color: 'from-yellow-400 to-yellow-600' },
  { id: 'belief', title: 'تمرین باور', icon: Brain, description: 'تقویت ذهن مثبت', color: 'from-pink-400 to-pink-600' },
  { id: 'calendar', title: 'رویداد جدید', icon: Calendar, description: 'برنامه‌ریزی آینده', color: 'from-indigo-400 to-indigo-600' },
  { id: 'report', title: 'گزارش پیشرفت', icon: BarChart3, description: 'بررسی وضعیت', color: 'from-teal-400 to-teal-600' },
];

interface QuickActionsProps {
  onActionClick: (actionId: string) => void;
}

const QuickActions: React.FC<QuickActionsProps> = ({ onActionClick }) => {
  return (
    <div className="mb-8">
      <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">اقدامات سریع</h2>
      
      <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
        {quickActions.map((action, index) => (
          <motion.button
            key={action.id}
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: index * 0.05 }}
            whileHover={{ scale: 1.05, y: -2 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => onActionClick(action.id)}
            className="group relative overflow-hidden rounded-2xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 p-6 text-center shadow-lg hover:shadow-xl transition-all duration-300"
          >
            {/* Background Gradient */}
            <div className={`absolute inset-0 bg-gradient-to-br ${action.color} opacity-0 group-hover:opacity-10 transition-opacity duration-300`}></div>
            
            {/* Icon */}
            <div className={`inline-flex p-3 rounded-xl bg-gradient-to-r ${action.color} mb-4 group-hover:scale-110 transition-transform duration-300`}>
              <action.icon className="w-6 h-6 text-white" />
            </div>
            
            {/* Content */}
            <h3 className="font-bold text-gray-900 dark:text-white mb-2 group-hover:text-gray-700 dark:group-hover:text-gray-200 transition-colors">
              {action.title}
            </h3>
            <p className="text-sm text-gray-600 dark:text-gray-400 group-hover:text-gray-500 dark:group-hover:text-gray-300 transition-colors">
              {action.description}
            </p>
          </motion.button>
        ))}
      </div>
    </div>
  );
};

export default QuickActions;
PK
     H>[�L���  �  +   src/components/Dashboard/RecentActivity.tsximport React from 'react';
import { motion } from 'framer-motion';
import { Clock, CheckCircle, Target, TrendingUp, Calendar } from 'lucide-react';
import { faker } from '@faker-js/faker';
import dayjs, { formatRelativeTime } from '../../lib/date';
import { useTranslation } from 'react-i18next';
import { Language } from '../../App';

// Generate fake recent activities
const generateActivities = () => {
  const activities = [];
  const types = [
    { type: 'goal', icon: Target, color: 'text-green-500', bg: 'bg-green-100 dark:bg-green-900/30' },
    { type: 'habit', icon: TrendingUp, color: 'text-blue-500', bg: 'bg-blue-100 dark:bg-blue-900/30' },
    { type: 'task', icon: CheckCircle, color: 'text-purple-500', bg: 'bg-purple-100 dark:bg-purple-900/30' },
    { type: 'event', icon: Calendar, color: 'text-orange-500', bg: 'bg-orange-100 dark:bg-orange-900/30' },
  ];

  const persianTitles = [
    'تکمیل تمرین صبحگاهی',
    'خواندن کتاب رشد فردی',
    'تنظیم هدف جدید برای ماه آینده',
    'ثبت گزارش پیشرفت هفتگی',
    'شرکت در جلسه مشاوره',
    'تکمیل تمرین مدیتیشن',
    'بروزرسانی برنامه مالی',
    'نوشتن در دفتر شکرگزاری'
  ];

  for (let i = 0; i < 8; i++) {
    const typeData = types[Math.floor(Math.random() * types.length)];
    activities.push({
      id: i + 1,
      title: persianTitles[i],
      time: dayjs().subtract(faker.number.int({ min: 1, max: 7 * 24 }), 'hour').toDate(),
      ...typeData
    });
  }

  return activities.sort((a, b) => b.time.getTime() - a.time.getTime());
};

const RecentActivity: React.FC = () => {
  const activities = generateActivities();
  const { i18n } = useTranslation();

  // Defensive check for the language to prevent crashes
  const getValidLang = (): Language => {
    const supportedLangs: Language[] = ['en', 'fa', 'ar'];
    const currentLang = i18n.language;
    if (supportedLangs.includes(currentLang as Language)) {
      return currentLang as Language;
    }
    return 'en'; // Default to 'en' if the language is invalid
  };
  const validLang = getValidLang();

  return (
    <div className="rounded-2xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 p-6 shadow-lg">
      <div className="flex items-center space-x-2 space-x-reverse mb-6">
        <Clock className="w-5 h-5 text-gold-500" />
        <h2 className="text-xl font-bold text-gray-900 dark:text-white">فعالیت‌های اخیر</h2>
      </div>

      <div className="space-y-4 max-h-96 overflow-y-auto">
        {activities.map((activity, index) => (
          <motion.div
            key={activity.id}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.1 }}
            className="flex items-center space-x-3 space-x-reverse p-3 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors"
          >
            <div className={`p-2 rounded-lg ${activity.bg}`}>
              <activity.icon className={`w-4 h-4 ${activity.color}`} />
            </div>
            
            <div className="flex-1 min-w-0">
              <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                {activity.title}
              </p>
              <p className="text-xs text-gray-500 dark:text-gray-400">
                {formatRelativeTime(activity.time, validLang)}
              </p>
            </div>
          </motion.div>
        ))}
      </div>

      <motion.button
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
        className="w-full mt-4 py-2 text-sm text-gold-600 dark:text-gold-400 hover:text-gold-700 dark:hover:text-gold-300 font-medium transition-colors"
      >
        مشاهده همه فعالیت‌ها
      </motion.button>
    </div>
  );
};

export default RecentActivity;
PK
     H>[               src/components/Layout/PK
     H>[-5v  v      src/components/Layout/Header.tsximport React from 'react';
import { motion } from 'framer-motion';
import { Sun, Moon, Menu, Star, UserCog, LogOut, Globe } from 'lucide-react';
import { useTheme } from '../../contexts/ThemeContext';
import { useAuth } from '../../contexts/AuthContext';
import { useTranslation } from 'react-i18next';

interface HeaderProps {
  onMenuToggle: () => void;
  onRoleSwitchToggle: () => void;
  onLanguageSwitchToggle: () => void;
  showRoleSwitchIcon: boolean;
}

const Header: React.FC<HeaderProps> = ({ onMenuToggle, onRoleSwitchToggle, onLanguageSwitchToggle, showRoleSwitchIcon }) => {
  const { theme, toggleTheme } = useTheme();
  const { logout, currentUser } = useAuth();
  const { t } = useTranslation();

  return (
    <motion.header
      initial={{ y: -100, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      className="sticky top-0 z-30 backdrop-blur-lg bg-white/80 dark:bg-gray-900/80 border-b border-gold-200/20 dark:border-gold-500/20"
    >
      <div className="container mx-auto px-4 h-16 flex items-center justify-between">
        <div className="flex items-center gap-4">
            <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
                onClick={onMenuToggle}
                className="p-2 rounded-full bg-gold-100 dark:bg-gold-900/30 text-gold-600 dark:text-gold-400 hover:bg-gold-200 dark:hover:bg-gold-800/50 transition-colors"
                aria-label={t('header.menu')}
            >
                <Menu className="w-5 h-5" />
            </motion.button>
            
            <motion.div
                whileHover={{ scale: 1.05 }}
                className="flex items-center gap-2"
            >
                <Star className="w-8 h-8 text-gold-500 fill-current" />
                <span className="text-xl font-bold bg-gradient-to-r from-gold-500 to-gold-600 bg-clip-text text-transparent hidden sm:inline">
                    Westnaord
                </span>
            </motion.div>
        </div>

        <div className="flex items-center gap-2 sm:gap-4">
          <span className="text-sm text-gray-700 dark:text-gray-300 hidden md:block">
            {t('header.welcome', { username: currentUser?.username })}
          </span>
          
          {showRoleSwitchIcon && (
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              onClick={onRoleSwitchToggle}
              className="p-2 rounded-full bg-gold-100 dark:bg-gold-900/30 text-gold-600 dark:text-gold-400 hover:bg-gold-200 dark:hover:bg-gold-800/50 transition-colors"
              aria-label={t('header.switchRole')}
            >
              <UserCog className="w-5 h-5" />
            </motion.button>
          )}

          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.95 }}
            onClick={onLanguageSwitchToggle}
            className="p-2 rounded-full bg-gold-100 dark:bg-gold-900/30 text-gold-600 dark:text-gold-400 hover:bg-gold-200 dark:hover:bg-gold-800/50 transition-colors"
            aria-label={t('header.switchLanguage')}
          >
            <Globe className="w-5 h-5" />
          </motion.button>

          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.95 }}
            onClick={toggleTheme}
            className="p-2 rounded-full bg-gold-100 dark:bg-gold-900/30 text-gold-600 dark:text-gold-400 hover:bg-gold-200 dark:hover:bg-gold-800/50 transition-colors"
            aria-label={t('header.switchTheme')}
          >
            {theme === 'light' ? <Moon className="w-5 h-5" /> : <Sun className="w-5 h-5" />}
          </motion.button>

          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.95 }}
            onClick={logout}
            className="p-2 rounded-full bg-red-100 dark:bg-red-900/30 text-red-600 dark:text-red-400 hover:bg-red-200 dark:hover:bg-red-800/50 transition-colors"
            aria-label={t('header.logout')}
          >
            <LogOut className="w-5 h-5" />
          </motion.button>
        </div>
      </div>
    </motion.header>
  );
};

export default Header;
PK
     H>[���
  
  *   src/components/Layout/LanguageSwitcher.tsximport React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslation } from 'react-i18next';
import { Language } from '../../App';

interface LanguageSwitcherProps {
  isOpen: boolean;
  onClose: () => void;
}

const languages: { id: Language; label: string }[] = [
  { id: 'fa', label: 'فارسی' },
  { id: 'en', label: 'English' },
  { id: 'ar', label: 'العربية' },
];

const LanguageSwitcher: React.FC<LanguageSwitcherProps> = ({ isOpen, onClose }) => {
  const { i18n, t } = useTranslation();

  const changeLanguage = (lang: Language) => {
    i18n.changeLanguage(lang);
    onClose();
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ y: '-100%', opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          exit={{ y: '-100%', opacity: 0 }}
          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
          className="relative z-20 bg-white/70 dark:bg-gray-800/70 backdrop-blur-md shadow-inner"
        >
          <div className="container mx-auto px-4 py-3">
            <div className="flex items-center justify-center gap-2">
              <span className="text-sm font-semibold text-gray-700 dark:text-gray-300 ms-4">
                {t('languageSwitcher.title')}
              </span>
              <div className="flex items-center p-1 rounded-full bg-gray-200 dark:bg-gray-700">
                {languages.map((lang) => (
                  <button
                    key={lang.id}
                    onClick={() => changeLanguage(lang.id)}
                    className={`relative px-4 py-1.5 text-sm font-medium rounded-full transition-colors ${
                      i18n.language === lang.id
                        ? 'text-gray-900'
                        : 'text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200'
                    }`}
                  >
                    {i18n.language === lang.id && (
                      <motion.div
                        layoutId="language-switcher-active-pill"
                        className="absolute inset-0 bg-white dark:bg-gray-900/50 rounded-full shadow-md"
                        transition={{ type: 'spring', stiffness: 500, damping: 40 }}
                      />
                    )}
                    <span className="relative">{lang.label}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default LanguageSwitcher;
PK
     H>[��ˬ�
  �
  &   src/components/Layout/RoleSwitcher.tsximport React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { User, UserCheck, Shield } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import { UserRole } from '../../App';

interface RoleSwitcherProps {
  isOpen: boolean;
  currentRole: UserRole;
  onRoleChange: (role: UserRole) => void;
}

const RoleSwitcher: React.FC<RoleSwitcherProps> = ({ isOpen, currentRole, onRoleChange }) => {
  const { t } = useTranslation();

  const roles: { id: UserRole; i18nKey: string; icon: React.ElementType }[] = [
    { id: 'user', i18nKey: 'user', icon: User },
    { id: 'mentor', i18nKey: 'mentor', icon: UserCheck },
    { id: 'admin', i18nKey: 'admin', icon: Shield },
  ];

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ y: '-100%', opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          exit={{ y: '-100%', opacity: 0 }}
          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
          className="relative z-20 bg-white/70 dark:bg-gray-800/70 backdrop-blur-md shadow-inner"
        >
          <div className="container mx-auto px-4 py-3">
            <div className="flex items-center justify-center gap-2">
              <span className="text-sm font-semibold text-gray-700 dark:text-gray-300 ms-4">
                {t('roleSwitcher.title')}
              </span>
              <div className="flex items-center p-1 rounded-full bg-gray-200 dark:bg-gray-700">
                {roles.map((role) => (
                  <button
                    key={role.id}
                    onClick={() => onRoleChange(role.id)}
                    className={`relative flex items-center gap-2 px-4 py-1.5 text-sm font-medium rounded-full transition-colors ${
                      currentRole === role.id
                        ? 'text-gray-900'
                        : 'text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200'
                    }`}
                  >
                    {currentRole === role.id && (
                      <motion.div
                        layoutId="role-switcher-active-pill"
                        className="absolute inset-0 bg-white dark:bg-gray-900/50 rounded-full shadow-md"
                        transition={{ type: 'spring', stiffness: 500, damping: 40 }}
                      />
                    )}
                    <role.icon className="relative w-4 h-4" />
                    <span className="relative">{t(`roleSwitcher.${role.i18nKey}`)}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default RoleSwitcher;
PK
     H>[4�ϟ#"  #"  !   src/components/Layout/Sidebar.tsximport React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslation } from 'react-i18next';
import { useAuth } from '../../contexts/AuthContext';
import { 
  Home, Target, Compass, Image as ImageIcon, TrendingUp, Book, Brain, BarChart3,
  DollarSign, Clock, CheckSquare, Star, Users, Shield, Map,
  Calendar, MessageSquare, Briefcase, Award, Heart, Activity,
  Zap, GitBranch, ThumbsUp, Coffee, HelpCircle, UserCheck,
  PieChart, Settings, X, Group, Milestone, Anchor, Smile, User as UserIcon, Gem
} from 'lucide-react';

type UserRole = 'user' | 'mentor' | 'admin';

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
  activeSection: string;
  onSectionChange: (section: string) => void;
  userRole: UserRole;
  isDesktop: boolean;
}

const allTools = [
  { id: 'dashboard', i18nKey: 'dashboard', icon: Home, roles: ['user', 'mentor', 'admin'], access: 'basic' },
  { id: 'user-profile', i18nKey: 'userProfile', icon: UserIcon, roles: ['user', 'mentor', 'admin'], access: 'basic' },
  { id: 'subscription', i18nKey: 'subscription', icon: Gem, roles: ['user', 'mentor', 'admin'], access: 'basic' },
  { id: 'mentor-panel', i18nKey: 'mentorPanel', icon: Users, roles: ['mentor', 'admin'], access: 'basic' },
  { id: 'admin-panel', i18nKey: 'adminPanel', icon: Shield, roles: ['admin'], access: 'basic' },
  { id: '8plan', i18nKey: '8plan', icon: Target, roles: ['user'], access: 'basic' },
  { id: 'community-forum', i18nKey: 'communityForum', icon: Group, roles: ['user', 'mentor', 'admin'], access: 'basic' },
  { id: 'vision-board', i18nKey: 'visionBoard', icon: ImageIcon, roles: ['user'], access: 'basic' },
  { id: 'habit-tracker', i18nKey: 'habitTracker', icon: TrendingUp, roles: ['user'], access: 'basic' },
  { id: 'gratitude-journal', i18nKey: 'gratitudeJournal', icon: ThumbsUp, roles: ['user'], access: 'basic' },
  { id: 'beliefs', i18nKey: 'beliefs', icon: Brain, roles: ['user'], access: 'basic' },
  { id: 'mind-map-builder', i18nKey: 'mindMapBuilder', icon: GitBranch, roles: ['user'], access: 'all' },
  { id: 'swot-analysis', i18nKey: 'swotAnalysis', icon: PieChart, roles: ['user'], access: 'all' },
  { id: 'money-planner', i18nKey: 'moneyPlanner', icon: DollarSign, roles: ['user'], access: 'all' },
  { id: 'ikigai-finder', i18nKey: 'ikigaiFinder', icon: Star, roles: ['user'], access: 'all' },
  { id: 'goal-pyramid', i18nKey: 'goalPyramid', icon: Milestone, roles: ['user'], access: 'all' },
  { id: 'life-compass', i18nKey: 'lifeCompass', icon: Compass, roles: ['user'], access: 'all' },
  { id: 'daily-journal', i18nKey: 'dailyJournal', icon: Book, roles: ['user'], access: 'all' },
  { id: 'time-audit', i18nKey: 'timeAudit', icon: Clock, roles: ['user'], access: 'all' },
  { id: 'energy-tracker', i18nKey: 'energyTracker', icon: Zap, roles: ['user'], access: 'all' },
  { id: 'focus-matrix', i18nKey: 'focusMatrix', icon: CheckSquare, roles: ['user'], access: 'all' },
  { id: 'mood-tracker', i18nKey: 'moodTracker', icon: Smile, roles: ['user'], access: 'all' },
  { id: 'skill-map', i18nKey: 'skillMap', icon: Map, roles: ['user'], access: 'all' },
  { id: 'learning-path', i18nKey: 'learningPath', icon: Calendar, roles: ['user'], access: 'all' },
  { id: 'career-pathway', i18nKey: 'careerPathway', icon: Briefcase, roles: ['user'], access: 'all' },
  { id: 'strengths-test', i18nKey: 'strengthsTest', icon: Award, roles: ['user'], access: 'all' },
  { id: 'personality-test', i18nKey: 'personalityTest', icon: UserCheck, roles: ['user'], access: 'all' },
  { id: 'love-relationship', i18nKey: 'loveRelationship', icon: Heart, roles: ['user'], access: 'all' },
  { id: 'health-tracker', i18nKey: 'healthTracker', icon: Activity, roles: ['user'], access: 'all' },
  { id: 'meditation-guide', i18nKey: 'meditationGuide', icon: Coffee, roles: ['user'], access: 'all' },
  { id: 'law-of-attraction', i18nKey: 'lawOfAttraction', icon: Brain, roles: ['user'], access: 'all' },
  { id: 'challenge-creator', i18nKey: 'challengeCreator', icon: Shield, roles: ['user'], access: 'all' },
  { id: 'achievement-wall', i18nKey: 'achievementWall', icon: Star, roles: ['user'], access: 'all' },
  { id: 'monthly-exam', i18nKey: 'monthlyExam', icon: HelpCircle, roles: ['user'], access: 'all' },
  { id: 'ai-coach', i18nKey: 'aiCoach', icon: MessageSquare, roles: ['user'], access: 'all' },
  { id: 'progress-timeline', i18nKey: 'progressTimeline', icon: BarChart3, roles: ['user'], access: 'all' },
  { id: 'milestone-planner', i18nKey: 'milestonePlanner', icon: Milestone, roles: ['user'], access: 'all' },
  { id: 'resilience-test', i18nKey: 'resilienceTest', icon: Anchor, roles: ['user'], access: 'all' },
  { id: 'happiness-index', i18nKey: 'happinessIndex', icon: Smile, roles: ['user'], access: 'all' },
  { id: 'settings', i18nKey: 'settings', icon: Settings, roles: ['admin'], access: 'basic' },
];

const Sidebar: React.FC<SidebarProps> = ({ isOpen, onClose, activeSection, onSectionChange, userRole, isDesktop }) => {
  const { t, i18n } = useTranslation();
  const { currentUser, subscriptionPlans } = useAuth();
  
  const userPlan = subscriptionPlans.find(p => p.id === currentUser?.subscription?.planId);
  const userAccessLevel = userPlan?.toolAccess || 'basic';

  const menuItems = allTools.filter(item => {
    const hasRole = item.roles.includes(userRole);
    const hasAccess = userAccessLevel === 'all' || item.access === 'basic';
    return hasRole && hasAccess;
  });

  const sidebarVariants = {
    open: { [i18n.dir() === 'rtl' ? 'right' : 'left']: 0 },
    closed: { [i18n.dir() === 'rtl' ? 'right' : 'left']: '-100%' }
  };

  const desktopSidebarVariants = {
    open: { [i18n.dir() === 'rtl' ? 'marginRight' : 'marginLeft']: 0 },
    closed: { [i18n.dir() === 'rtl' ? 'marginRight' : 'marginLeft']: '-18rem' }
  };

  return (
    <>
      <AnimatePresence>
        {isOpen && !isDesktop && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 md:hidden"
          />
        )}
      </AnimatePresence>

      <motion.aside
        initial={false}
        animate={isOpen ? 'open' : 'closed'}
        variants={isDesktop ? desktopSidebarVariants : sidebarVariants}
        transition={{ type: 'spring', stiffness: 300, damping: 30 }}
        className={`fixed top-0 h-full w-72 bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl border-gray-200/20 dark:border-gray-500/20 z-50 ${i18n.dir() === 'rtl' ? 'border-l' : 'border-r'}`}
      >
        <div className={`p-6 border-b border-gold-200/20 dark:border-gold-500/20 flex items-center justify-between`}>
          <div className="flex items-center gap-2">
            <Star className="w-6 h-6 text-gold-500 fill-current" />
            <span className="font-bold text-gold-600 dark:text-gold-400">{t('sidebar.menu')}</span>
          </div>
          <button
            onClick={onClose}
            className="p-1 rounded-full hover:bg-gold-100 dark:hover:bg-gold-900/30 md:hidden"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        <nav className="p-4 h-[calc(100vh-120px)] overflow-y-auto">
          <div className="space-y-2">
            {menuItems.map((item) => (
              <motion.button
                key={item.id}
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => onSectionChange(item.id)}
                className={`w-full flex items-center gap-3 p-3 rounded-xl transition-all duration-200 group ${
                  activeSection === item.id
                    ? 'bg-gradient-to-r from-gold-100 to-gold-50 dark:from-gold-900/50 dark:to-gold-800/30 text-gold-700 dark:text-gold-300 shadow-lg'
                    : 'hover:bg-gold-50 dark:hover:bg-gold-900/20 text-gray-700 dark:text-gray-300'
                }`}
              >
                <item.icon className={`w-5 h-5 transition-colors ${
                  activeSection === item.id ? 'text-gold-600 dark:text-gold-400' : 'text-gray-500 group-hover:text-gold-500'
                }`} />
                <span className="font-medium text-sm">{t(`sidebar.${item.i18nKey}`)}</span>
              </motion.button>
            ))}
          </div>
        </nav>

        <div className={`absolute bottom-0 left-0 right-0 p-4 border-t border-gold-200/20 dark:border-gold-500/20`}>
          <div className="text-center text-xs text-gray-500 dark:text-gray-400">
            {t('sidebar.version')} - Westnaord
          </div>
        </div>
      </motion.aside>
    </>
  );
};

export default Sidebar;
PK
     H>[��a��  �     src/components/Login.tsximport React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Star, LogIn, UserPlus } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { useTranslation } from 'react-i18next';

const Login: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [referralCode, setReferralCode] = useState('');
  const [isSigningUp, setIsSigningUp] = useState(false);
  const { login, error } = useAuth();
  const { t } = useTranslation();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    login(username, password, isSigningUp ? referralCode : undefined);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="w-full max-w-md bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg border border-white/20 dark:border-gray-700/20 rounded-2xl shadow-2xl p-8"
      >
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 mb-4">
            <Star className="w-12 h-12 text-gold-500 fill-current" />
            <h1 className="text-4xl font-bold bg-gradient-to-r from-gold-500 to-gold-600 bg-clip-text text-transparent">
              Westnaord
            </h1>
          </div>
          <p className="text-gray-600 dark:text-gray-400">{isSigningUp ? t('login.signUpWelcome') : t('login.welcome')}</p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 text-start">
              {t('login.username')}
            </label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 focus:ring-2 focus:ring-gold-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 text-start">
              {t('login.password')}
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 focus:ring-2 focus:ring-gold-500 focus:border-transparent"
              required
            />
          </div>
          
          <AnimatePresence>
            {isSigningUp && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
              >
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 text-start">
                  {t('login.referralCode')} (Optional)
                </label>
                <input
                  type="text"
                  value={referralCode}
                  onChange={(e) => setReferralCode(e.target.value)}
                  className="w-full p-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 focus:ring-2 focus:ring-gold-500 focus:border-transparent"
                />
              </motion.div>
            )}
          </AnimatePresence>

          {error && (
            <motion.p
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="text-sm text-red-500 text-center"
            >
              {t(`login.${error}`)}
            </motion.p>
          )}

          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            type="submit"
            className="w-full flex items-center justify-center gap-2 p-3 bg-gradient-to-r from-gold-500 to-gold-600 text-white font-bold rounded-lg hover:shadow-lg hover:shadow-gold-500/20 transition-shadow"
          >
            {isSigningUp ? <UserPlus className="w-5 h-5" /> : <LogIn className="w-5 h-5" />}
            <span>{isSigningUp ? t('login.signUpButton') : t('login.button')}</span>
          </motion.button>
        </form>

        <div className="text-center mt-6">
          <button onClick={() => setIsSigningUp(!isSigningUp)} className="text-sm text-gold-600 hover:underline">
            {isSigningUp ? t('login.backToLogin') : t('login.newHere')}
          </button>
        </div>
      </motion.div>
    </div>
  );
};

export default Login;
PK
     H>[               src/components/Panels/PK
     H>[�����  ��  $   src/components/Panels/AdminPanel.tsximport React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Shield, Users, Wrench, BarChart2, Bell, UserPlus, MessageSquare, Gem, Plus, CreditCard, Send, Filter, Save, AlertOctagon, CheckCircle, XCircle, UserCheck, Gift } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import { useAuth, User, SubscriptionPlan, Report } from '../../contexts/AuthContext';
import Modal from '../common/Modal';
import CommunityForum from '../Tools/CommunityForum';
import { Language } from '../../App';
import { formatLocaleDate } from '../../lib/date';

type AdminTab = 'users' | 'admins' | 'subscriptions' | 'transactions' | 'forum' | 'reports' | 'tools' | 'logs' | 'smsGateway' | 'profanityFilter' | 'referrals';

const AdminPanel: React.FC = () => {
  const { t, i18n } = useTranslation();
  const [activeTab, setActiveTab] = useState<AdminTab>('reports');
  const { users, reports, activityLogs, subscriptionPlans, transactions, smsLogs, referralRewardConfig, updateUser, deleteUser, addAdmin, updateSubscriptionPlan, addSubscriptionPlan, sendTestSms, reviewReport, updateReferralConfig, grantReferralReward } = useAuth();
  const [searchTerm, setSearchTerm] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [modalAction, setModalAction] = useState<'promote' | 'demote' | 'block' | 'unblock' | 'delete' | null>(null);
  const [isAddAdminModalOpen, setAddAdminModalOpen] = useState(false);
  const [newAdmin, setNewAdmin] = useState({ username: '', password: '' });
  
  const [editablePlan, setEditablePlan] = useState<Partial<SubscriptionPlan> & { id: string }>({id: '', price: 0, duration_days: 0, trial_days: 0, enabled: true, toolAccess: 'basic'});
  const [isPlanModalOpen, setIsPlanModalOpen] = useState(false);
  const [isNewPlan, setIsNewPlan] = useState(false);

  const [testSms, setTestSms] = useState({ to: '', message: '' });

  const [profanityLists, setProfanityLists] = useState<Record<Language, string[]>>({ en: [], fa: [], ar: [] });
  const [profanityLang, setProfanityLang] = useState<Language>('fa');

  const [editableReferralConfig, setEditableReferralConfig] = useState(referralRewardConfig);

  const pendingReportsCount = reports.filter(r => r.status === 'pending').length;

  // Defensive check for the language to prevent crashes
  const getValidLang = (): Language => {
    const supportedLangs: Language[] = ['en', 'fa', 'ar'];
    const currentLang = i18n.language;
    if (supportedLangs.includes(currentLang as Language)) {
      return currentLang as Language;
    }
    return 'en'; // Default to 'en' if the language is invalid
  };
  const validLang = getValidLang();

  useEffect(() => {
    const fetchProfanityLists = async () => {
      const lists: Record<Language, string[]> = { en: [], fa: [], ar: [] };
      for (const lang of ['en', 'fa', 'ar'] as Language[]) {
        try {
          const module = await import(`../../config/profanity/${lang}.json`);
          lists[lang] = module.default.words;
        } catch (e) {
          console.error(`Failed to load profanity list for ${lang}`);
        }
      }
      setProfanityLists(lists);
    };
    fetchProfanityLists();
  }, []);

  useEffect(() => {
    setEditableReferralConfig(referralRewardConfig);
  }, [referralRewardConfig]);

  const handleModalConfirm = () => {
    if (selectedUser && modalAction) {
      switch (modalAction) {
        case 'promote': updateUser(selectedUser.id, { role: 'mentor' }); break;
        case 'demote': updateUser(selectedUser.id, { role: 'user' }); break;
        case 'block': updateUser(selectedUser.id, { status: 'blocked' }); break;
        case 'unblock': updateUser(selectedUser.id, { status: 'active' }); break;
        case 'delete': deleteUser(selectedUser.id); break;
      }
    }
    setIsModalOpen(false);
    setSelectedUser(null);
  };

  const handleAddAdmin = () => {
    if (newAdmin.username && newAdmin.password) {
      addAdmin(newAdmin.username, newAdmin.password);
      setAddAdminModalOpen(false);
      setNewAdmin({ username: '', password: '' });
    }
  };

  const handlePlanSave = () => {
    if (isNewPlan) {
        if (editablePlan.id && editablePlan.price > 0 && editablePlan.duration_days > 0) {
            addSubscriptionPlan(editablePlan as SubscriptionPlan);
        } else {
            alert('Please fill all plan fields correctly.');
        }
    } else {
        updateSubscriptionPlan(editablePlan.id, editablePlan);
    }
    setIsPlanModalOpen(false);
  };
  
  const openPlanModal = (plan?: SubscriptionPlan) => {
    if (plan) {
        setEditablePlan(plan);
        setIsNewPlan(false);
    } else {
        setEditablePlan({id: '', price: 0, duration_days: 30, trial_days: 0, enabled: true, toolAccess: 'basic'});
        setIsNewPlan(true);
    }
    setIsPlanModalOpen(true);
  };

  const handleSendTestSms = () => {
    if (testSms.to && testSms.message) {
        sendTestSms(testSms.to, testSms.message);
        setTestSms({ to: '', message: '' });
        alert('Test SMS sent to queue.');
    }
  };

  const handleProfanityListChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newList = e.target.value.split('\n');
    setProfanityLists(prev => ({...prev, [profanityLang]: newList}));
  };

  const handleSaveProfanityList = () => {
    // In a real app, this would make an API call to the backend to save the file.
    console.log(`Simulating save for ${profanityLang}:`, profanityLists[profanityLang]);
    alert(`Banned words for ${profanityLang} saved (simulated).`);
  };

  const handleSaveReferralConfig = () => {
    updateReferralConfig(editableReferralConfig);
    alert(t('adminPanel.referrals.configSaved'));
  };

  const filteredUsers = users.filter(u => u.username.toLowerCase().includes(searchTerm.toLowerCase()) || (u.phone && u.phone.includes(searchTerm)));

  const getRoleBadge = (role: string) => {
    switch (role) {
      case 'admin': return 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300';
      case 'mentor': return 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900/50 dark:text-cyan-300';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  };

  const getStatusBadge = (status: User['status']) => {
    switch(status) {
        case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300';
        case 'blocked': return 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300';
        case 'temp_blocked': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300';
        default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  };
  
  const getSubscriptionBadge = (planId: string | undefined) => {
    const plan = subscriptionPlans.find(p => p.id === planId);
    if (!plan) return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    switch(plan.id) {
        case 'yearly': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-300';
        case '9-month': return 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/50 dark:text-indigo-300';
        case '3-month': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300';
        case 'monthly': return 'bg-sky-100 text-sky-800 dark:bg-sky-900/50 dark:text-sky-300';
        default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  }

  const renderUserManagement = () => (
    <div>
      <div className="mb-4 flex justify-between items-center">
        <input
          type="text"
          placeholder={t('adminPanel.searchPlaceholder')}
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full md:w-1/2 p-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800"
        />
      </div>
      <div className="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead className="bg-gray-50 dark:bg-gray-800">
            <tr>
              <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.user')}</th>
              <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.role')}</th>
              <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.status')}</th>
              <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.subscription')}</th>
              <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.phoneVerified')}</th>
              <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.actions')}</th>
            </tr>
          </thead>
          <tbody className="bg-white dark:bg-gray-900/50 divide-y divide-gray-200 dark:divide-gray-700">
            {filteredUsers.map(user => (
              <tr key={user.id}>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">{user.username}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm"><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getRoleBadge(user.role)}`}>{user.role}</span></td>
                <td className="px-6 py-4 whitespace-nowrap text-sm"><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusBadge(user.status)}`}>{t(`adminPanel.status.${user.status}`)}</span></td>
                <td className="px-6 py-4 whitespace-nowrap text-sm"><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getSubscriptionBadge(user.subscription?.planId)}`}>{user.subscription?.planId || 'free'}</span></td>
                <td className="px-6 py-4 whitespace-nowrap text-sm">{user.isPhoneVerified ? t('yes') : t('no')}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2 space-x-reverse">
                  {user.role === 'user' && <button onClick={() => { setSelectedUser(user); setModalAction('promote'); setIsModalOpen(true); }} className="text-cyan-600 hover:text-cyan-900">{t('adminPanel.actions.promote')}</button>}
                  {user.role === 'mentor' && <button onClick={() => { setSelectedUser(user); setModalAction('demote'); setIsModalOpen(true); }} className="text-gray-600 hover:text-gray-900">{t('adminPanel.actions.demote')}</button>}
                  {user.status === 'active' ? <button onClick={() => { setSelectedUser(user); setModalAction('block'); setIsModalOpen(true); }} className="text-yellow-600 hover:text-yellow-900">{t('adminPanel.actions.block')}</button> : <button onClick={() => { setSelectedUser(user); setModalAction('unblock'); setIsModalOpen(true); }} className="text-green-600 hover:text-green-900">{t('adminPanel.actions.unblock')}</button>}
                  <button onClick={() => { setSelectedUser(user); setModalAction('delete'); setIsModalOpen(true); }} className="text-red-600 hover:text-red-900">{t('adminPanel.actions.delete')}</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );

  const renderAdminManagement = () => (
    <div>
        <button onClick={() => setAddAdminModalOpen(true)} className="mb-4 flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
            <UserPlus size={18} />
            <span>{t('adminPanel.actions.addAdmin')}</span>
        </button>
        <div className="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead className="bg-gray-50 dark:bg-gray-800">
                    <tr>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.user')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.role')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.actions')}</th>
                    </tr>
                </thead>
                <tbody className="bg-white dark:bg-gray-900/50 divide-y divide-gray-200 dark:divide-gray-700">
                    {users.filter(u => u.role === 'admin').map(admin => (
                        <tr key={admin.id}>
                            <td className="px-6 py-4 whitespace-nowrap">{admin.username}</td>
                            <td className="px-6 py-4 whitespace-nowrap"><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getRoleBadge(admin.role)}`}>Admin</span></td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium"><button onClick={() => { setSelectedUser(admin); setModalAction('delete'); setIsModalOpen(true); }} className="text-red-600 hover:text-red-900 disabled:opacity-50" disabled={admin.username === 'aria'}>{t('adminPanel.actions.delete')}</button></td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    </div>
  );
  
  const renderSubscriptionManagement = () => (
    <div>
        <button onClick={() => openPlanModal()} className="mb-4 flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
            <Plus size={18} />
            <span>{t('adminPanel.subscriptions.addNewPlan')}</span>
        </button>
        <div className="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead className="bg-gray-50 dark:bg-gray-800">
                    <tr>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.subscriptions.planId')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.subscriptions.planPrice')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.subscriptions.planDurationDays')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.subscriptions.planTrialDays')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.subscriptions.planEnabled')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.actions')}</th>
                    </tr>
                </thead>
                <tbody className="bg-white dark:bg-gray-900/50 divide-y divide-gray-200 dark:divide-gray-700">
                    {subscriptionPlans.map(plan => (
                        <tr key={plan.id}>
                            <td className="px-6 py-4 whitespace-nowrap">{plan.id}</td>
                            <td className="px-6 py-4 whitespace-nowrap">${plan.price}</td>
                            <td className="px-6 py-4 whitespace-nowrap">{plan.duration_days === Infinity ? '∞' : plan.duration_days}</td>
                            <td className="px-6 py-4 whitespace-nowrap">{plan.trial_days}</td>
                            <td className="px-6 py-4 whitespace-nowrap">{plan.enabled ? t('yes') : t('no')}</td>
                            <td className="px-6 py-4 whitespace-nowrap"><button onClick={() => openPlanModal(plan)} className="text-blue-600 hover:text-blue-900">{t('adminPanel.actions.edit')}</button></td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    </div>
  );

  const renderTransactions = () => (
    <div className="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead className="bg-gray-50 dark:bg-gray-800">
                <tr>
                    <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.transactions.user')}</th>
                    <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.transactions.plan')}</th>
                    <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.transactions.amount')}</th>
                    <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.transactions.status')}</th>
                    <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.transactions.reference')}</th>
                    <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.transactions.date')}</th>
                </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-900/50 divide-y divide-gray-200 dark:divide-gray-700">
                {transactions.map(tx => (
                    <tr key={tx.id}>
                        <td className="px-6 py-4 whitespace-nowrap">{tx.username}</td>
                        <td className="px-6 py-4 whitespace-nowrap">{tx.plan_id}</td>
                        <td className="px-6 py-4 whitespace-nowrap">${tx.amount}</td>
                        <td className="px-6 py-4 whitespace-nowrap"><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${tx.status === 'completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>{tx.status}</span></td>
                        <td className="px-6 py-4 whitespace-nowrap font-mono text-xs">{tx.reference}</td>
                        <td className="px-6 py-4 whitespace-nowrap">{formatLocaleDate(tx.timestamp, validLang, 'YYYY/MM/DD HH:mm')}</td>
                    </tr>
                ))}
            </tbody>
        </table>
    </div>
  );

  const renderReports = () => {
    const sortedReports = [...reports].sort((a, b) => {
        if (a.status === 'pending' && b.status !== 'pending') return -1;
        if (a.status !== 'pending' && b.status === 'pending') return 1;
        return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
    });

    const getReportedUser = (report: Report) => users.find(u => u.id === report.reportedUserId);

    return (
        <div className="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead className="bg-gray-50 dark:bg-gray-800">
                    <tr>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.reports.reported')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.reports.reporter')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.reports.reason')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.reports.status')}</th>
                        <th className="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.table.actions')}</th>
                    </tr>
                </thead>
                <tbody className="bg-white dark:bg-gray-900/50 divide-y divide-gray-200 dark:divide-gray-700">
                    {sortedReports.map(report => {
                        const reportedUser = getReportedUser(report);
                        const isAutoBlocked = reportedUser?.status === 'temp_blocked' && report.status === 'pending';
                        return (
                            <tr key={report.id} className={isAutoBlocked ? 'bg-yellow-50 dark:bg-yellow-900/20' : ''}>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">{report.reportedUsername}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm">{report.reporterUsername}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-400 truncate max-w-xs">{report.reason}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm">
                                    {report.status === 'pending' && <span className="px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300">{t('adminPanel.reports.pending')}</span>}
                                    {report.status === 'reviewed_dismissed' && <span className="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">{t('adminPanel.reports.dismissed')}</span>}
                                    {report.status === 'reviewed_action_taken' && <span className="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300">{t('adminPanel.reports.actionTaken')}</span>}
                                    {isAutoBlocked && <span className="ms-2 px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300">{t('adminPanel.reports.autoBlocked')}</span>}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2 space-x-reverse">
                                    {report.status === 'pending' && (
                                        <>
                                            <button onClick={() => reviewReport(report.id, 'dismiss')} className="text-gray-500 hover:text-gray-700">{t('adminPanel.reports.dismiss')}</button>
                                            <button onClick={() => reviewReport(report.id, 'uphold')} className="text-red-500 hover:text-red-700">{t('adminPanel.reports.upholdAndBlock')}</button>
                                        </>
                                    )}
                                    {reportedUser && (reportedUser.status === 'blocked' || reportedUser.status === 'temp_blocked') && (
                                        <button onClick={() => updateUser(reportedUser.id, { status: 'active' })} className="text-green-500 hover:text-green-700">{t('adminPanel.reports.liftBlock')}</button>
                                    )}
                                </td>
                            </tr>
                        );
                    })}
                </tbody>
            </table>
        </div>
    );
  };

  const renderLogs = () => (
     <div className="space-y-2">
      {activityLogs.map(log => (
        <div key={log.id} className="p-3 rounded-lg bg-gray-50 dark:bg-gray-800/50 text-sm">
          <span className="text-gray-500 dark:text-gray-400 text-xs me-2">{formatLocaleDate(log.timestamp, validLang, 'YYYY/MM/DD HH:mm')}</span>
          <span>{log.action} ({t('adminPanel.logs.by')}: {log.adminUsername})</span>
        </div>
      ))}
    </div>
  );
  
  const [forumLanguageFilter, setForumLanguageFilter] = useState<Language | 'all'>('all');

  const renderForumManagement = () => (
    <div>
        <div className="mb-4">
            <label htmlFor="lang-filter" className="sr-only">{t('adminPanel.forum.filterLanguage')}</label>
            <select 
                id="lang-filter"
                value={forumLanguageFilter}
                onChange={(e) => setForumLanguageFilter(e.target.value as Language | 'all')}
                className="p-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800"
            >
                <option value="all">{t('adminPanel.forum.allLanguages')}</option>
                <option value="fa">فارسی</option>
                <option value="en">English</option>
                <option value="ar">العربية</option>
            </select>
        </div>
        <CommunityForum isAdminView={true} languageFilter={forumLanguageFilter} />
    </div>
  );

  const renderSmsGateway = () => (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div>
            <h3 className="text-xl font-bold mb-4">{t('adminPanel.sms.sendTest')}</h3>
            <div className="space-y-4 p-6 bg-white/80 dark:bg-gray-800/80 rounded-2xl shadow-lg">
                <input type="text" placeholder={t('adminPanel.sms.phoneNumber')} value={testSms.to} onChange={e => setTestSms({...testSms, to: e.target.value})} className="w-full p-2 rounded border dark:bg-gray-700 dark:border-gray-600" />
                <textarea placeholder={t('adminPanel.sms.message')} value={testSms.message} onChange={e => setTestSms({...testSms, message: e.target.value})} className="w-full p-2 rounded border dark:bg-gray-700 dark:border-gray-600 h-24" />
                <button onClick={handleSendTestSms} className="w-full flex items-center justify-center gap-2 p-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                    <Send size={18} />
                    <span>{t('adminPanel.sms.send')}</span>
                </button>
            </div>
        </div>
        <div>
            <h3 className="text-xl font-bold mb-4">{t('adminPanel.sms.logsTitle')}</h3>
            <div className="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700 max-h-96">
                <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead className="bg-gray-50 dark:bg-gray-800 sticky top-0">
                        <tr>
                            <th className="px-4 py-2 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.sms.table.to')}</th>
                            <th className="px-4 py-2 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.sms.table.message')}</th>
                            <th className="px-4 py-2 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.sms.table.status')}</th>
                            <th className="px-4 py-2 text-start text-xs font-medium text-gray-500 uppercase">{t('adminPanel.sms.table.timestamp')}</th>
                        </tr>
                    </thead>
                    <tbody className="bg-white dark:bg-gray-900/50 divide-y divide-gray-200 dark:divide-gray-700">
                        {smsLogs.map(log => (
                            <tr key={log.id}>
                                <td className="px-4 py-2 whitespace-nowrap text-sm">{log.to}</td>
                                <td className="px-4 py-2 whitespace-nowrap text-sm truncate max-w-xs">{log.message}</td>
                                <td className="px-4 py-2 whitespace-nowrap text-sm"><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${log.status === 'sent' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>{log.status}</span></td>
                                <td className="px-4 py-2 whitespace-nowrap text-sm">{formatLocaleDate(log.timestamp, validLang, 'HH:mm:ss')}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
  );

  const renderProfanityFilter = () => (
    <div>
        <div className="mb-4 flex items-center gap-4">
            <h3 className="text-xl font-bold">{t('adminPanel.profanity.title')}</h3>
            <select 
                value={profanityLang}
                onChange={(e) => setProfanityLang(e.target.value as Language)}
                className="p-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800"
            >
                <option value="fa">فارسی</option>
                <option value="en">English</option>
                <option value="ar">العربية</option>
            </select>
        </div>
        <div className="bg-white/80 dark:bg-gray-800/80 p-6 rounded-2xl shadow-lg">
            <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">{t('adminPanel.profanity.description')}</p>
            <textarea 
                className="w-full h-64 p-3 font-mono text-sm rounded-lg border dark:bg-gray-700 dark:border-gray-600"
                value={profanityLists[profanityLang].join('\n')}
                onChange={handleProfanityListChange}
            />
            <button onClick={handleSaveProfanityList} className="mt-4 flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">
                <Save size={18} />
                <span>{t('adminPanel.profanity.save')}</span>
            </button>
        </div>
    </div>
  );
  
  const renderReferralManagement = () => (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="bg-white/80 dark:bg-gray-800/80 p-6 rounded-2xl shadow-lg">
            <h3 className="text-xl font-bold mb-4">{t('adminPanel.referrals.configTitle')}</h3>
            <div className="space-y-4">
                <div>
                    <label className="block text-sm font-medium mb-1">{t('adminPanel.referrals.rewardType')}</label>
                    <select 
                        value={editableReferralConfig.type} 
                        onChange={e => setEditableReferralConfig({...editableReferralConfig, type: e.target.value as 'subscription_days' | 'credits'})}
                        className="w-full p-2 rounded-lg border dark:bg-gray-700 dark:border-gray-600"
                    >
                        <option value="subscription_days">{t('adminPanel.referrals.subscriptionDays')}</option>
                        <option value="credits">{t('adminPanel.referrals.credits')}</option>
                    </select>
                </div>
                <div>
                    <label className="block text-sm font-medium mb-1">{t('adminPanel.referrals.rewardValue')}</label>
                    <input 
                        type="number" 
                        value={editableReferralConfig.value} 
                        onChange={e => setEditableReferralConfig({...editableReferralConfig, value: parseInt(e.target.value) || 0})}
                        className="w-full p-2 rounded-lg border dark:bg-gray-700 dark:border-gray-600"
                    />
                </div>
                <button onClick={handleSaveReferralConfig} className="w-full flex items-center justify-center gap-2 p-2 bg-green-500 text-white rounded-lg hover:bg-green-600">
                    <Save size={18} />
                    <span>{t('adminPanel.referrals.saveConfig')}</span>
                </button>
            </div>
        </div>
        <div className="bg-white/80 dark:bg-gray-800/80 p-6 rounded-2xl shadow-lg">
            <h3 className="text-xl font-bold mb-4">{t('adminPanel.referrals.manualGrant')}</h3>
            <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">{t('adminPanel.referrals.manualGrantDesc')}</p>
            <div className="max-h-80 overflow-y-auto space-y-2">
                {users.map(user => (
                    <div key={user.id} className="flex justify-between items-center p-2 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                        <span>{user.username}</span>
                        <button onClick={() => grantReferralReward(user.id)} className="px-3 py-1 text-xs bg-blue-500 text-white rounded-md hover:bg-blue-600">
                            {t('adminPanel.referrals.grantReward')}
                        </button>
                    </div>
                ))}
            </div>
        </div>
    </div>
  );

  const renderComingSoon = (title: string) => <div className="text-center p-8 text-gray-500">{title} {t('comingSoon.title')}</div>;

  const tabs = [
    { id: 'reports', i18nKey: 'reports', icon: AlertOctagon, notificationCount: pendingReportsCount },
    { id: 'users', i18nKey: 'userManagement', icon: Users },
    { id: 'admins', i18nKey: 'adminManagement', icon: Shield },
    { id: 'subscriptions', i18nKey: 'subscriptions', icon: Gem },
    { id: 'transactions', i18nKey: 'transactions', icon: CreditCard },
    { id: 'referrals', i18nKey: 'referrals', icon: Gift },
    { id: 'forum', i18nKey: 'forumManagement', icon: MessageSquare },
    { id: 'smsGateway', i18nKey: 'smsGateway', icon: Send },
    { id: 'profanityFilter', i18nKey: 'profanityFilter', icon: Filter },
    { id: 'tools', i18nKey: 'tools', icon: Wrench },
    { id: 'logs', i18nKey: 'logs', icon: BarChart2 },
  ];

  return (
    <div className="p-0 sm:p-2 md:p-4">
      <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="flex items-center gap-3 mb-8">
        <Shield className="w-8 h-8 text-gold-500" />
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">{t('adminPanel.title')}</h1>
      </motion.div>

      <div className="flex border-b border-gray-200 dark:border-gray-700 mb-6 overflow-x-auto">
        {tabs.map(tab => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id as AdminTab)}
            className={`relative flex items-center gap-2 px-4 py-2 text-sm font-medium border-b-2 transition-colors flex-shrink-0 ${
              activeTab === tab.id
                ? 'border-gold-500 text-gold-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300'
            }`}
          >
            <tab.icon size={18} />
            <span>{t(`adminPanel.tabs.${tab.i18nKey}`)}</span>
            {tab.notificationCount && tab.notificationCount > 0 && (
                <span className="absolute top-1 right-1 flex h-4 w-4">
                    <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                    <span className="relative inline-flex rounded-full h-4 w-4 bg-red-500 text-white text-xs items-center justify-center">{tab.notificationCount}</span>
                </span>
            )}
          </button>
        ))}
      </div>

      <div>
        {activeTab === 'users' && renderUserManagement()}
        {activeTab === 'admins' && renderAdminManagement()}
        {activeTab === 'subscriptions' && renderSubscriptionManagement()}
        {activeTab === 'transactions' && renderTransactions()}
        {activeTab === 'referrals' && renderReferralManagement()}
        {activeTab === 'forum' && renderForumManagement()}
        {activeTab === 'smsGateway' && renderSmsGateway()}
        {activeTab === 'profanityFilter' && renderProfanityFilter()}
        {activeTab === 'reports' && renderReports()}
        {activeTab === 'logs' && renderLogs()}
        {activeTab === 'tools' && renderComingSoon(t('adminPanel.tabs.tools'))}
      </div>
      
      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onConfirm={handleModalConfirm} title={t('adminPanel.modal.confirmTitle')}>
        <p>{t('adminPanel.modal.confirmMessage', { action: modalAction, username: selectedUser?.username })}</p>
      </Modal>

      <Modal isOpen={isAddAdminModalOpen} onClose={() => setAddAdminModalOpen(false)} onConfirm={handleAddAdmin} title={t('adminPanel.modal.addAdminTitle')}>
        <div className="space-y-4">
            <input type="text" placeholder={t('adminPanel.modal.username')} value={newAdmin.username} onChange={e => setNewAdmin({...newAdmin, username: e.target.value})} className="w-full p-2 rounded border dark:bg-gray-800 dark:border-gray-600" />
            <input type="password" placeholder={t('adminPanel.modal.password')} value={newAdmin.password} onChange={e => setNewAdmin({...newAdmin, password: e.target.value})} className="w-full p-2 rounded border dark:bg-gray-800 dark:border-gray-600" />
        </div>
      </Modal>

      <Modal isOpen={isPlanModalOpen} onClose={() => setIsPlanModalOpen(false)} onConfirm={handlePlanSave} title={isNewPlan ? t('adminPanel.subscriptions.addNewPlan') : t('adminPanel.actions.edit')}>
        <div className="space-y-4">
            <input type="text" placeholder={t('adminPanel.subscriptions.planId')} value={editablePlan.id} onChange={e => setEditablePlan({...editablePlan, id: e.target.value})} disabled={!isNewPlan} className="w-full p-2 rounded border dark:bg-gray-800 dark:border-gray-600 disabled:opacity-50"/>
            <input type="number" placeholder={t('adminPanel.subscriptions.planPrice')} value={editablePlan.price} onChange={e => setEditablePlan({...editablePlan, price: parseFloat(e.target.value)})} className="w-full p-2 rounded border dark:bg-gray-800 dark:border-gray-600" />
            <input type="number" placeholder={t('adminPanel.subscriptions.planDurationDays')} value={editablePlan.duration_days} onChange={e => setEditablePlan({...editablePlan, duration_days: parseInt(e.target.value)})} className="w-full p-2 rounded border dark:bg-gray-800 dark:border-gray-600" />
            <input type="number" placeholder={t('adminPanel.subscriptions.planTrialDays')} value={editablePlan.trial_days} onChange={e => setEditablePlan({...editablePlan, trial_days: parseInt(e.target.value)})} className="w-full p-2 rounded border dark:bg-gray-800 dark:border-gray-600" />
            <div className="flex items-center gap-2">
                <input type="checkbox" id="planEnabled" checked={editablePlan.enabled} onChange={e => setEditablePlan({...editablePlan, enabled: e.target.checked})} className="h-4 w-4 rounded border-gray-300 text-gold-600 focus:ring-gold-500" />
                <label htmlFor="planEnabled">{t('adminPanel.subscriptions.planEnabled')}</label>
            </div>
        </div>
      </Modal>
    </div>
  );
};

export default AdminPanel;
PK
     H>[&��+(
  (
  %   src/components/Panels/MentorPanel.tsximport React from 'react';
import { motion } from 'framer-motion';
import { Users, MessageCircle, Star, PlusCircle } from 'lucide-react';

const MentorPanel: React.FC = () => {
  return (
    <div className="p-4 sm:p-6">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center space-x-3 space-x-reverse mb-8"
      >
        <Users className="w-8 h-8 text-cyan-500" />
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
          پنل مربیان
        </h1>
      </motion.div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Placeholder cards for mentor functions */}
        <motion.div
          whileHover={{ y: -5 }}
          className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg"
        >
          <div className="flex items-center space-x-3 space-x-reverse mb-4">
            <MessageCircle className="w-6 h-6 text-green-500" />
            <h2 className="text-xl font-bold">چت با کاربران</h2>
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            پاسخ به سوالات کاربران و راهنمایی آن‌ها در مسیر رشد.
          </p>
        </motion.div>

        <motion.div
          whileHover={{ y: -5 }}
          className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg"
        >
          <div className="flex items-center space-x-3 space-x-reverse mb-4">
            <PlusCircle className="w-6 h-6 text-blue-500" />
            <h2 className="text-xl font-bold">مدیریت محتوا</h2>
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            افزودن و ویرایش تمرین‌ها، پکیج‌ها و ابزارهای جدید.
          </p>
        </motion.div>

        <motion.div
          whileHover={{ y: -5 }}
          className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg"
        >
          <div className="flex items-center space-x-3 space-x-reverse mb-4">
            <Star className="w-6 h-6 text-yellow-500" />
            <h2 className="text-xl font-bold">بازخوردها و امتیازات</h2>
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            مشاهده امتیازات و نظرات کاربران برای بهبود عملکرد.
          </p>
        </motion.div>
      </div>
    </div>
  );
};

export default MentorPanel;
PK
     H>[�o  o  '   src/components/Panels/SettingsPanel.tsximport React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Settings, Shield, Save, Key } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';
import Modal from '../common/Modal';
import { useTranslation } from 'react-i18next';

const SettingsPanel: React.FC = () => {
    const { t } = useTranslation();
    const { currentUser, updateUserCredentials } = useAuth();
    const [username, setUsername] = useState(currentUser?.username || '');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalMessage, setModalMessage] = useState('');
    const [smsApiKey, setSmsApiKey] = useState('YOUR_SMS_API_KEY');
    const [paymentApiKey, setPaymentApiKey] = useState('YOUR_PAYMENT_API_KEY');

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (password && password !== confirmPassword) {
            setModalMessage(t('settings.modal.mismatch'));
            setIsModalOpen(true);
            return;
        }
        if (currentUser) {
            updateUserCredentials(currentUser.id, username, password || undefined);
            setModalMessage(t('settings.modal.success'));
            setIsModalOpen(true);
            setPassword('');
            setConfirmPassword('');
        }
    };

    return (
        <div className="p-4 sm:p-6">
            <motion.div
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex items-center gap-3 mb-8"
            >
                <Settings className="w-8 h-8 text-gray-500" />
                <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                    {t('settings.title')}
                </h1>
            </motion.div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div className="lg:col-span-1">
                    <motion.div
                        whileHover={{ y: -5 }}
                        className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg h-full"
                    >
                        <div className="flex items-center gap-3 mb-4">
                            <Shield className="w-6 h-6 text-blue-500" />
                            <h2 className="text-xl font-bold">{t('settings.credentials.title')}</h2>
                        </div>
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-6">
                            {t('settings.credentials.description')}
                        </p>
                        <form onSubmit={handleSubmit} className="space-y-4">
                            <div>
                                <label className="text-sm font-medium">{t('settings.credentials.username')}</label>
                                <input
                                    type="text"
                                    value={username}
                                    onChange={(e) => setUsername(e.target.value)}
                                    className="w-full mt-1 p-2 rounded-lg border dark:bg-gray-700 dark:border-gray-600"
                                />
                            </div>
                            <div>
                                <label className="text-sm font-medium">{t('settings.credentials.newPassword')}</label>
                                <input
                                    type="password"
                                    placeholder={t('settings.credentials.newPasswordPlaceholder')}
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    className="w-full mt-1 p-2 rounded-lg border dark:bg-gray-700 dark:border-gray-600"
                                />
                            </div>
                            <div>
                                <label className="text-sm font-medium">{t('settings.credentials.confirmPassword')}</label>
                                <input
                                    type="password"
                                    value={confirmPassword}
                                    onChange={(e) => setConfirmPassword(e.target.value)}
                                    className="w-full mt-1 p-2 rounded-lg border dark:bg-gray-700 dark:border-gray-600"
                                />
                            </div>
                            <button type="submit" className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">
                                <Save size={18} />
                                <span>{t('settings.credentials.save')}</span>
                            </button>
                        </form>
                    </motion.div>
                </div>

                <div className="lg:col-span-2 space-y-8">
                     <motion.div
                        className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg"
                    >
                        <div className="flex items-center gap-3 mb-4">
                            <Key className="w-6 h-6 text-orange-500" />
                            <h2 className="text-xl font-bold">{t('settings.api.title')}</h2>
                        </div>
                        <div className="space-y-4">
                            <div>
                                <label className="text-sm font-medium">{t('settings.api.sms')}</label>
                                <input type="text" value={smsApiKey} onChange={e => setSmsApiKey(e.target.value)} className="w-full mt-1 p-2 rounded-lg border dark:bg-gray-700 dark:border-gray-600" />
                            </div>
                            <div>
                                <label className="text-sm font-medium">{t('settings.api.payment')}</label>
                                <input type="text" value={paymentApiKey} onChange={e => setPaymentApiKey(e.target.value)} className="w-full mt-1 p-2 rounded-lg border dark:bg-gray-700 dark:border-gray-600" />
                            </div>
                        </div>
                    </motion.div>
                     <motion.div
                        className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg"
                    >
                        <h2 className="text-xl font-bold mb-4">{t('settings.tools.title')}</h2>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                            {t('settings.tools.description')}
                        </p>
                    </motion.div>
                </div>
            </div>
            
            <Modal
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                onConfirm={() => setIsModalOpen(false)}
                title={t('modal.notice')}
                hideCancelButton={true}
            >
                <p>{modalMessage}</p>
            </Modal>
        </div>
    );
};

export default SettingsPanel;
PK
     H>[�5L(/  /  +   src/components/Panels/SubscriptionPanel.tsximport React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useTranslation } from 'react-i18next';
import { useAuth, SubscriptionPlan } from '../../contexts/AuthContext';
import { Check } from 'lucide-react';
import Modal from '../common/Modal';
import PaymentSimulation from '../common/PaymentSimulation';

const SubscriptionPanel: React.FC = () => {
    const { t } = useTranslation();
    const { currentUser, subscriptionPlans } = useAuth();
    const [selectedPlan, setSelectedPlan] = useState<SubscriptionPlan | null>(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [paymentMethod, setPaymentMethod] = useState<'zarinpal' | 'crypto' | null>(null);

    if (!currentUser) return null;

    const handleChoosePlan = (plan: SubscriptionPlan) => {
        setSelectedPlan(plan);
        setIsModalOpen(true);
    };

    const handleSelectPaymentMethod = (method: 'zarinpal' | 'crypto') => {
        setPaymentMethod(method);
    };
    
    const onPaymentComplete = () => {
        setPaymentMethod(null);
        setIsModalOpen(false);
        setSelectedPlan(null);
    }
    
    if (paymentMethod && selectedPlan) {
        return <PaymentSimulation method={paymentMethod} plan={selectedPlan} onBack={onPaymentComplete} />;
    }

    const availablePlans = subscriptionPlans.filter(p => p.id !== 'free' && p.enabled);

    return (
        <div className="max-w-5xl mx-auto p-4">
            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-12">
                <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">{t('subscriptionPanel.title')}</h1>
                <p className="text-lg text-gray-600 dark:text-gray-400">{t('subscriptionPanel.description')}</p>
            </motion.div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {availablePlans.map((plan, index) => (
                    <motion.div
                        key={plan.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.1 }}
                        className={`relative border-2 rounded-2xl p-8 text-center bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm shadow-lg ${currentUser.subscription?.planId === plan.id ? 'border-gold-500' : 'border-transparent'}`}
                    >
                        {currentUser.subscription?.planId === plan.id && (
                            <div className="absolute top-0 end-0 m-4 px-3 py-1 text-xs font-bold text-white bg-gold-500 rounded-full">{t('subscriptionPanel.currentPlan')}</div>
                        )}
                        {plan.save && (
                            <div className="absolute top-0 start-0 -mt-4 -ms-4">
                                <div className="w-24 h-24 flex items-center justify-center font-bold text-white bg-gradient-to-r from-red-500 to-orange-500 rounded-full animate-bounce-soft">
                                    {t('subscriptionPanel.save', { percent: plan.save })}
                                </div>
                            </div>
                        )}
                        
                        <h2 className="text-2xl font-bold text-gray-800 dark:text-white mb-2">{t(`subscriptionPanel.${plan.id}`, { defaultValue: plan.id })}</h2>
                        <p className="text-5xl font-extrabold text-gray-900 dark:text-white mb-2">${plan.price}<span className="text-lg font-medium text-gray-500 dark:text-gray-400">{t('subscriptionPanel.pricePerMonth')}</span></p>
                        
                        <ul className="text-start space-y-2 text-gray-600 dark:text-gray-300 my-8">
                            <li className="flex items-center gap-2"><Check className="w-5 h-5 text-green-500" /> {t('subscriptionPanel.feature1')}</li>
                            <li className="flex items-center gap-2"><Check className="w-5 h-5 text-green-500" /> {t('subscriptionPanel.feature2')}</li>
                            <li className="flex items-center gap-2"><Check className="w-5 h-5 text-green-500" /> {t('subscriptionPanel.feature3')}</li>
                            {plan.trial_days > 0 && <li className="flex items-center gap-2"><Check className="w-5 h-5 text-green-500" /> {t('subscriptionPanel.trial', {days: plan.trial_days})}</li>}
                        </ul>

                        <button 
                            onClick={() => handleChoosePlan(plan)}
                            disabled={currentUser.subscription?.planId === plan.id}
                            className="w-full py-3 font-semibold rounded-lg bg-gold-500 text-white hover:bg-gold-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                        >
                            {t('subscriptionPanel.choosePlan')}
                        </button>
                    </motion.div>
                ))}
            </div>
            
            <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onConfirm={() => {}} title={t('subscriptionPanel.paymentMethod')} hideCancelButton={true} hideConfirmButton={true}>
                <div className="text-center space-y-4">
                    <p>{t('subscriptionPanel.confirmPlan', { plan: t(`subscriptionPanel.${selectedPlan?.id}`, { defaultValue: selectedPlan?.id }) })}</p>
                    <button onClick={() => handleSelectPaymentMethod('zarinpal')} className="w-full px-6 py-3 bg-green-500 text-white rounded-lg">{t('subscriptionPanel.zarinpal')}</button>
                    <button onClick={() => handleSelectPaymentMethod('crypto')} className="w-full px-6 py-3 bg-blue-500 text-white rounded-lg">{t('subscriptionPanel.crypto')}</button>
                </div>
            </Modal>
        </div>
    );
};

export default SubscriptionPanel;
PK
     H>[�G%�?;  ?;  *   src/components/Panels/UserProfilePanel.tsximport React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useAuth } from '../../contexts/AuthContext';
import { useTranslation } from 'react-i18next';
import { User, Key, Gem, Link as LinkIcon, Edit, Copy, Check, Phone, Wallet, Loader, Users } from 'lucide-react';
import { faker } from '@faker-js/faker';
import Modal from '../common/Modal';
import { formatLocaleDate } from '../../lib/date';
import { Language } from '../../App';

const UserProfilePanel: React.FC = () => {
  const { currentUser, updateProfilePicture, sendOtp, verifyOtp, changePassword } = useAuth();
  const { t, i18n } = useTranslation();
  const [copied, setCopied] = useState<'referral' | 'wallet' | null>(null);
  
  const [isVerifyModalOpen, setIsVerifyModalOpen] = useState(false);
  const [verifyStep, setVerifyStep] = useState<'enterPhone' | 'enterCode'>('enterPhone');
  const [phone, setPhone] = useState(currentUser?.phone || '');
  const [verificationCode, setVerificationCode] = useState('');
  const [isSendingCode, setIsSendingCode] = useState(false);
  const [cooldown, setCooldown] = useState(0);

  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);
  const [passwordData, setPasswordData] = useState({ oldPass: '', newPass: '', confirmPass: '' });
  
  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (cooldown > 0) {
      timer = setTimeout(() => setCooldown(cooldown - 1), 1000);
    }
    return () => clearTimeout(timer);
  }, [cooldown]);

  if (!currentUser) return null;

  // Defensive check for the language to prevent crashes
  const getValidLang = (): Language => {
    const supportedLangs: Language[] = ['en', 'fa', 'ar'];
    const currentLang = i18n.language;
    if (supportedLangs.includes(currentLang as Language)) {
      return currentLang as Language;
    }
    return 'en'; // Default to 'en' if the language is invalid
  };
  const validLang = getValidLang();


  const handleCopy = (type: 'referral' | 'wallet') => {
    const textToCopy = type === 'referral' ? currentUser.referralCode : currentUser.cryptoWalletAddress;
    navigator.clipboard.writeText(textToCopy);
    setCopied(type);
    setTimeout(() => setCopied(null), 2000);
  };
  
  const handlePictureChange = () => {
    const newAvatar = faker.image.avatar();
    updateProfilePicture(currentUser.id, newAvatar);
  };

  const handleSendCode = async () => {
    if (phone.trim() && !isSendingCode && cooldown === 0) {
      setIsSendingCode(true);
      const success = await sendOtp(currentUser.id, phone);
      setIsSendingCode(false);
      if (success) {
        setVerifyStep('enterCode');
        setCooldown(60);
      } else {
        alert(t('userProfile.verification.sendFailure'));
      }
    }
  };

  const handleVerifyPhone = () => {
    if (verifyOtp(currentUser.id, verificationCode)) {
      alert(t('userProfile.verification.success'));
      setIsVerifyModalOpen(false);
      setVerifyStep('enterPhone');
      setVerificationCode('');
    } else {
      alert(t('userProfile.verification.failure'));
    }
  };

  const handleChangePassword = () => {
    if (passwordData.newPass !== passwordData.confirmPass) {
        alert(t('settings.modal.mismatch'));
        return;
    }
    if (changePassword(currentUser.id, passwordData.oldPass, passwordData.newPass)) {
        alert(t('userProfile.password.success'));
        setIsPasswordModalOpen(false);
        setPasswordData({ oldPass: '', newPass: '', confirmPass: '' });
    } else {
        alert(t('userProfile.password.failure'));
    }
  };

  const subscriptionPlan = t(`subscriptionPanel.${currentUser.subscription?.planId || 'free'}`);
  const expiryDate = currentUser.subscription?.expiryDate 
    ? formatLocaleDate(currentUser.subscription.expiryDate, validLang, 'YYYY MMMM DD')
    : t('userProfile.subscription.noExpiry');

  const renderVerificationModal = () => {
    if (verifyStep === 'enterPhone') {
      return (
        <div>
          <p className="mb-4">{t('userProfile.verification.enterPhone')}</p>
          <input type="tel" value={phone} onChange={e => setPhone(e.target.value)} className="w-full p-2 rounded border dark:bg-gray-700" placeholder="09123456789" />
        </div>
      );
    }
    return (
      <div>
        <p className="mb-4">{t('userProfile.verification.codeSent', { phone })}</p>
        <input type="text" value={verificationCode} onChange={e => setVerificationCode(e.target.value)} className="w-full p-2 rounded border dark:bg-gray-700" placeholder="123456" />
      </div>
    );
  };

  const handleVerifyModalConfirm = () => {
    if (verifyStep === 'enterPhone') {
      handleSendCode();
    } else {
      handleVerifyPhone();
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-12">
        <div className="relative inline-block">
          <img src={currentUser.profilePicture} alt="Profile" className="w-32 h-32 rounded-full border-4 border-gold-400 shadow-lg" />
          <button onClick={handlePictureChange} className="absolute bottom-0 end-0 bg-gold-500 text-white p-2 rounded-full hover:bg-gold-600 transition-colors">
            <Edit size={16} />
          </button>
        </div>
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mt-4">{currentUser.username}</h1>
        <p className="text-gray-500 dark:text-gray-400 capitalize">{currentUser.role}</p>
      </motion.div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div className="space-y-8">
          <motion.div initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg">
            <div className="flex items-center gap-3 mb-4">
              <User className="w-6 h-6 text-blue-500" />
              <h2 className="text-xl font-bold">{t('userProfile.personalInfo.title')}</h2>
            </div>
            <div className="space-y-3 text-sm">
              <p><strong>{t('userProfile.personalInfo.username')}:</strong> {currentUser.username}</p>
              <div className="flex items-center justify-between">
                  <p><strong>{t('userProfile.personalInfo.phone')}:</strong> {currentUser.phone || 'N/A'}</p>
                  {!currentUser.isPhoneVerified && <button onClick={() => { setIsVerifyModalOpen(true); setVerifyStep('enterPhone'); }} className="text-xs text-blue-500 hover:underline">{t('userProfile.verification.verifyNow')}</button>}
              </div>
              <p><strong>{t('userProfile.personalInfo.verifiedStatus')}:</strong> <span className={currentUser.isPhoneVerified ? 'text-green-500' : 'text-red-500'}>{currentUser.isPhoneVerified ? t('userProfile.personalInfo.verified') : t('userProfile.personalInfo.notVerified')}</span></p>
              <button onClick={() => setIsPasswordModalOpen(true)} className="text-sm text-blue-500 hover:underline mt-2">{t('userProfile.personalInfo.changePassword')}</button>
            </div>
          </motion.div>

          <motion.div initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.1 }} className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg">
            <div className="flex items-center gap-3 mb-4">
              <Gem className="w-6 h-6 text-purple-500" />
              <h2 className="text-xl font-bold">{t('userProfile.subscription.title')}</h2>
            </div>
            <div className="space-y-3 text-sm">
              <p><strong>{t('userProfile.subscription.currentPlan')}:</strong> {subscriptionPlan}</p>
              <p><strong>{t('userProfile.subscription.expiry')}:</strong> {expiryDate}</p>
            </div>
          </motion.div>

          <motion.div initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.2 }} className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg">
            <div className="flex items-center gap-3 mb-4">
              <Wallet className="w-6 h-6 text-cyan-500" />
              <h2 className="text-xl font-bold">{t('userProfile.wallet.title')}</h2>
            </div>
            <div className="space-y-2">
                <label className="text-sm font-medium text-gray-600 dark:text-gray-400">{t('userProfile.wallet.address')}</label>
                <div className="mt-1 flex rounded-md shadow-sm">
                    <input type="text" readOnly value={currentUser.cryptoWalletAddress} className="flex-1 block w-full rounded-none rounded-s-md p-2 border-gray-300 bg-gray-100 dark:bg-gray-700 dark:border-gray-600 font-mono text-xs" />
                    <button onClick={() => handleCopy('wallet')} className="inline-flex items-center px-3 rounded-e-md border border-s-0 border-gray-300 bg-gray-50 dark:bg-gray-600 dark:border-gray-600 text-gray-500 dark:text-gray-300">
                    {copied === 'wallet' ? <Check className="w-5 h-5 text-green-500" /> : <Copy className="w-5 h-5" />}
                    </button>
                </div>
                <p className="text-xs text-gray-500 dark:text-gray-400">{t('userProfile.wallet.description')}</p>
            </div>
          </motion.div>
        </div>

        <div className="space-y-8">
            <motion.div initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.3 }} className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg">
                <div className="flex items-center gap-3 mb-4">
                    <LinkIcon className="w-6 h-6 text-green-500" />
                    <h2 className="text-xl font-bold">{t('userProfile.referral.title')}</h2>
                </div>
                <div className="space-y-4">
                    <div>
                    <label className="text-sm font-medium text-gray-600 dark:text-gray-400">{t('userProfile.referral.yourLink')}</label>
                    <div className="mt-1 flex rounded-md shadow-sm">
                        <input type="text" readOnly value={currentUser.referralCode} className="flex-1 block w-full rounded-none rounded-s-md p-2 border-gray-300 bg-gray-100 dark:bg-gray-700 dark:border-gray-600" />
                        <button onClick={() => handleCopy('referral')} className="inline-flex items-center px-3 rounded-e-md border border-s-0 border-gray-300 bg-gray-50 dark:bg-gray-600 dark:border-gray-600 text-gray-500 dark:text-gray-300">
                        {copied === 'referral' ? <Check className="w-5 h-5 text-green-500" /> : <Copy className="w-5 h-5" />}
                        </button>
                    </div>
                    {copied === 'referral' && <p className="text-xs text-green-500 mt-1">{t('userProfile.referral.copied')}</p>}
                    </div>
                    <div className="grid grid-cols-2 gap-4 text-center">
                        <div className="bg-gold-100 dark:bg-gold-900/50 p-4 rounded-lg">
                            <p className="text-sm text-gray-700 dark:text-gray-300">{t('userProfile.referral.earnings')}</p>
                            <p className="text-3xl font-bold text-gold-600 dark:text-gold-400">${currentUser.referralEarnings}</p>
                        </div>
                        <div className="bg-blue-100 dark:bg-blue-900/50 p-4 rounded-lg">
                            <p className="text-sm text-gray-700 dark:text-gray-300">{t('userProfile.referral.referredUsers')}</p>
                            <p className="text-3xl font-bold text-blue-600 dark:text-blue-400">{currentUser.referredUsersCount}</p>
                        </div>
                    </div>
                </div>
            </motion.div>
            <motion.div initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.4 }} className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg">
                <div className="flex items-center gap-3 mb-4">
                    <Users className="w-6 h-6 text-indigo-500" />
                    <h2 className="text-xl font-bold">{t('userProfile.referral.referredUsersList')}</h2>
                </div>
                <div className="max-h-40 overflow-y-auto space-y-2">
                    {currentUser.referredUsers.length > 0 ? (
                        currentUser.referredUsers.map((refUser, index) => (
                            <div key={index} className="flex justify-between items-center p-2 bg-gray-50 dark:bg-gray-700/50 rounded-lg text-sm">
                                <span className="font-medium">{refUser.username}</span>
                                <span className="text-xs text-gray-500 dark:text-gray-400">{t('userProfile.referral.joinDate')}: {formatLocaleDate(refUser.joinDate, validLang, 'YYYY/MM/DD')}</span>
                            </div>
                        ))
                    ) : (
                        <p className="text-sm text-gray-500 dark:text-gray-400 text-center py-4">{t('userProfile.referral.noReferredUsers')}</p>
                    )}
                </div>
            </motion.div>
        </div>
      </div>

      <Modal 
        isOpen={isVerifyModalOpen} 
        onClose={() => setIsVerifyModalOpen(false)} 
        onConfirm={handleVerifyModalConfirm} 
        title={t('userProfile.verification.title')}
        hideConfirmButton={ (verifyStep === 'enterPhone' && (isSendingCode || cooldown > 0)) }
      >
        {renderVerificationModal()}
        { verifyStep === 'enterPhone' && (
            <button
                onClick={handleVerifyModalConfirm}
                disabled={isSendingCode || cooldown > 0}
                className="w-full mt-4 px-4 py-2 rounded-lg text-sm font-medium bg-gold-500 text-white hover:bg-gold-600 disabled:bg-gray-400 flex items-center justify-center"
            >
                {isSendingCode ? <Loader className="animate-spin" /> : cooldown > 0 ? `${t('userProfile.verification.resend')} (${cooldown}s)` : t('userProfile.verification.sendCode')}
            </button>
        )}
      </Modal>

      <Modal isOpen={isPasswordModalOpen} onClose={() => setIsPasswordModalOpen(false)} onConfirm={handleChangePassword} title={t('userProfile.password.title')}>
        <div className="space-y-4">
            <input type="password" placeholder={t('userProfile.password.old')} value={passwordData.oldPass} onChange={e => setPasswordData({...passwordData, oldPass: e.target.value})} className="w-full p-2 rounded border dark:bg-gray-700" />
            <input type="password" placeholder={t('userProfile.password.new')} value={passwordData.newPass} onChange={e => setPasswordData({...passwordData, newPass: e.target.value})} className="w-full p-2 rounded border dark:bg-gray-700" />
            <input type="password" placeholder={t('userProfile.password.confirm')} value={passwordData.confirmPass} onChange={e => setPasswordData({...passwordData, confirmPass: e.target.value})} className="w-full p-2 rounded border dark:bg-gray-700" />
        </div>
      </Modal>
    </div>
  );
};

export default UserProfilePanel;
PK
     H>[               src/components/Tools/PK
     H>[W,�n  n  $   src/components/Tools/BeliefsTool.tsximport React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Brain, Plus, Play, Pause, Repeat } from 'lucide-react';

const defaultAffirmations = [
  "I am capable of achieving my goals.",
  "I attract positivity and abundance into my life.",
  "I am worthy of love, success, and happiness.",
  "Every day, in every way, I am getting better and better.",
  "I release all fears and doubts.",
];

const BeliefsTool: React.FC = () => {
  const [affirmations, setAffirmations] = useState<string[]>(defaultAffirmations);
  const [newAffirmation, setNewAffirmation] = useState('');
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentAffirmationIndex, setCurrentAffirmationIndex] = useState(0);

  const addAffirmation = () => {
    if (newAffirmation.trim()) {
      setAffirmations([...affirmations, newAffirmation]);
      setNewAffirmation('');
    }
  };

  const togglePlay = () => {
    if (isPlaying) {
      speechSynthesis.cancel();
      setIsPlaying(false);
    } else {
      setIsPlaying(true);
      speakAffirmation(currentAffirmationIndex);
    }
  };

  const speakAffirmation = (index: number) => {
    if (index >= affirmations.length) {
      setIsPlaying(false);
      setCurrentAffirmationIndex(0);
      return;
    }
    const utterance = new SpeechSynthesisUtterance(affirmations[index]);
    utterance.onend = () => {
      if (speechSynthesis.speaking) { // Check if it was cancelled
        const nextIndex = index + 1;
        setCurrentAffirmationIndex(nextIndex);
        speakAffirmation(nextIndex);
      }
    };
    speechSynthesis.speak(utterance);
    setCurrentAffirmationIndex(index);
  };

  return (
    <div>
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">Beliefs Shaper</h1>
        <p className="text-gray-600 dark:text-gray-400">Reshape your reality by reshaping your beliefs. Listen or read.</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="bg-white/80 dark:bg-gray-800/80 p-6 rounded-2xl shadow-lg">
          <h3 className="font-bold text-lg mb-4">Your Affirmations</h3>
          <div className="space-y-2 mb-4">
            {affirmations.map((aff, index) => (
              <div key={index} className={`p-3 rounded-lg ${index === currentAffirmationIndex && isPlaying ? 'bg-gold-100 dark:bg-gold-900/50' : 'bg-gray-50 dark:bg-gray-700/50'}`}>
                {aff}
              </div>
            ))}
          </div>
          <div className="flex gap-2">
            <input type="text" value={newAffirmation} onChange={e => setNewAffirmation(e.target.value)} placeholder="Add a new affirmation" className="flex-1 p-2 rounded border dark:bg-gray-700" />
            <button onClick={addAffirmation} className="p-2 bg-blue-500 text-white rounded"><Plus /></button>
          </div>
        </div>

        <div className="flex flex-col items-center justify-center bg-white/80 dark:bg-gray-800/80 p-6 rounded-2xl shadow-lg">
          <motion.p 
            key={currentAffirmationIndex}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-2xl font-semibold text-center mb-8 h-24"
          >
            {isPlaying ? affirmations[currentAffirmationIndex] : "Press Play to start"}
          </motion.p>
          <div className="flex items-center gap-4">
            <button onClick={togglePlay} className="p-4 bg-gold-500 text-white rounded-full shadow-lg">
              {isPlaying ? <Pause size={32} /> : <Play size={32} />}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BeliefsTool;
PK
     H>[XBg�.  �.  '   src/components/Tools/CommunityForum.tsximport React, { useState, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MessageSquare, ThumbsUp, Flag, Send, AlertTriangle, Lock } from 'lucide-react';
import { Faker, en, fa, ar } from '@faker-js/faker';
import { useAuth } from '../../contexts/AuthContext';
import { useTranslation } from 'react-i18next';
import { Language } from '../../App';
import { isProfane, profanityWarning } from '../../lib/profanityFilter';

interface Reply {
  id: string;
  author: string;
  avatar: string;
  content: string;
  time: string;
}

interface Post {
  id: number;
  authorId: string;
  author: string;
  avatar: string;
  content: string;
  likes: number;
  time: string;
  language: Language;
  replies: Reply[];
}

const generateMockData = (): Post[] => {
  const posts: Post[] = [];
  const languages: Language[] = ['fa', 'en', 'ar'];
  const localeMap = { fa, en, ar };

  languages.forEach(lang => {
    const localeFaker = new Faker({ locale: localeMap[lang] });
    for (let i = 0; i < 5; i++) {
      const replies: Reply[] = [];
      const replyCount = localeFaker.number.int({ min: 0, max: 3 });
      for (let j = 0; j < replyCount; j++) {
        replies.push({
          id: localeFaker.string.uuid(),
          author: localeFaker.person.fullName(),
          avatar: localeFaker.image.avatar(),
          content: localeFaker.lorem.sentence(),
          time: `${localeFaker.number.int({ min: 1, max: 10 })}h ago`
        });
      }
      posts.push({
        id: posts.length,
        authorId: `user-${posts.length}`,
        author: localeFaker.person.fullName(),
        avatar: localeFaker.image.avatar(),
        content: localeFaker.lorem.paragraph(),
        likes: localeFaker.number.int({ min: 0, max: 200 }),
        time: `${localeFaker.number.int({ min: 1, max: 23 })}h ago`,
        language: lang,
        replies: replies
      });
    }
  });
  return posts;
};

const allPosts = generateMockData();
const faker = new Faker({ locale: en }); // Default faker for non-localized data

interface CommunityForumProps {
  isAdminView?: boolean;
  languageFilter?: Language | 'all';
}

const CommunityForum: React.FC<CommunityForumProps> = ({ isAdminView = false, languageFilter = 'all' }) => {
  const { currentUser, addReport, addCommentTimestamp, reportProfanity } = useAuth();
  const { t, i18n } = useTranslation();
  const [posts, setPosts] = useState<Post[]>(allPosts);
  const [newPostContent, setNewPostContent] = useState('');
  const [replyingTo, setReplyingTo] = useState<number | null>(null);
  const [replyContent, setReplyContent] = useState('');
  const [visibleReplies, setVisibleReplies] = useState<Record<number, boolean>>({});
  const [error, setError] = useState<string | null>(null);

  const currentLanguage = i18n.language as Language;

  const filteredPosts = useMemo(() => {
    if (isAdminView) {
      return languageFilter === 'all' ? posts : posts.filter(p => p.language === languageFilter);
    }
    return posts.filter(p => p.language === currentLanguage);
  }, [posts, currentLanguage, isAdminView, languageFilter]);

  const canPost = () => {
    if (!currentUser) return false;
    if (!currentUser.isPhoneVerified) {
        setError(t('communityForum.verificationNeeded'));
        setTimeout(() => setError(null), 3000);
        return false;
    }
    const now = Date.now();
    const oneDayAgo = now - 24 * 60 * 60 * 1000;
    const recentComments = currentUser.lastCommentTimestamps.filter(ts => ts > oneDayAgo);
    if (recentComments.length >= 3) {
        setError(t('communityForum.rateLimitError'));
        setTimeout(() => setError(null), 3000);
        return false;
    }
    return true;
  };

  const handlePost = async (content: string, isReply: boolean, postId?: number) => {
    if (!content.trim() || !currentUser) return;
    
    if (!canPost()) return;

    if (await isProfane(content, currentLanguage)) {
      setError(profanityWarning[currentLanguage]);
      reportProfanity(currentUser.id, content);
      setTimeout(() => setError(null), 5000);
      return;
    }

    if (isReply && postId !== undefined) {
      const newReply: Reply = {
        id: faker.string.uuid(),
        author: currentUser.username,
        avatar: currentUser.profilePicture,
        content,
        time: t('communityForum.justNow')
      };
      setPosts(prevPosts => prevPosts.map(p => p.id === postId ? { ...p, replies: [...p.replies, newReply] } : p));
      setReplyContent('');
      setReplyingTo(null);
    } else {
      const newPost: Post = {
        id: Date.now(),
        authorId: currentUser.id,
        author: currentUser.username,
        avatar: currentUser.profilePicture,
        content,
        likes: 0,
        time: t('communityForum.justNow'),
        language: currentLanguage,
        replies: []
      };
      setPosts(prevPosts => [newPost, ...prevPosts]);
      setNewPostContent('');
    }
    addCommentTimestamp(currentUser.id);
    setError(null);
  };

  const handleReport = (post: Post) => {
    if (currentUser && currentUser.id !== post.authorId) {
      addReport(post.authorId, post.author, currentUser.id, currentUser.username, 'Inappropriate content in forum', 'post', post.id.toString());
      alert(t('communityForum.reportSuccess', { user: post.author }));
    }
  };

  const toggleReplies = (postId: number) => {
    setVisibleReplies(prev => ({...prev, [postId]: !prev[postId]}));
  };

  return (
    <div className="max-w-4xl mx-auto">
      {!isAdminView && (
        <>
          <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">{t('communityForum.title')}</h1>
            <p className="text-gray-600 dark:text-gray-400">{t('communityForum.description')}</p>
          </motion.div>

          <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-4 rounded-2xl shadow-lg mb-8 flex items-center gap-3">
            <img src={currentUser?.profilePicture} alt="avatar" className="w-10 h-10 rounded-full" />
            <input 
              type="text" 
              placeholder={t('communityForum.inputPlaceholder')} 
              className="flex-1 p-2 bg-transparent focus:outline-none disabled:cursor-not-allowed"
              value={newPostContent}
              onChange={(e) => setNewPostContent(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handlePost(newPostContent, false)}
              disabled={!currentUser?.isPhoneVerified}
            />
            <button onClick={() => handlePost(newPostContent, false)} className="p-2 rounded-full bg-gold-500 text-white hover:bg-gold-600 disabled:bg-gray-400" disabled={!currentUser?.isPhoneVerified}><Send size={20} /></button>
          </div>
        </>
      )}

      <AnimatePresence>
        {error && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="mb-4 p-3 bg-red-100 dark:bg-red-900/50 text-red-700 dark:text-red-300 rounded-lg flex items-center gap-2"
          >
            <AlertTriangle size={18} />
            <span className="text-sm font-medium">{error}</span>
          </motion.div>
        )}
      </AnimatePresence>

      <div className="space-y-6">
        {filteredPosts.map((post, index) => (
          <motion.div key={post.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: index * 0.1 }} className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg">
            <div className="flex items-start gap-4">
              <img src={post.avatar} alt={post.author} className="w-12 h-12 rounded-full" />
              <div className="flex-1">
                <div className="flex justify-between items-center">
                  <div>
                    <p className="font-bold text-gray-900 dark:text-white">{post.author}</p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">{post.time}</p>
                  </div>
                  <div className="flex items-center gap-1">
                    {isAdminView && <span className="text-xs font-bold uppercase px-2 py-1 rounded-full bg-gray-200 dark:bg-gray-700">{post.language}</span>}
                    <button onClick={() => handleReport(post)} className="text-gray-400 hover:text-red-500 p-2 rounded-full"><Flag size={16} /></button>
                  </div>
                </div>
                <p className="mt-4 text-gray-700 dark:text-gray-300">{post.content}</p>
              </div>
            </div>
            <div className="mt-4 pt-4 border-t dark:border-gray-700 flex items-center gap-6 text-sm text-gray-500 dark:text-gray-400">
              <button className="flex items-center gap-1 hover:text-gold-500"><ThumbsUp size={16} /><span>{post.likes}</span></button>
              <button onClick={() => setReplyingTo(replyingTo === post.id ? null : post.id)} className="flex items-center gap-1 hover:text-gold-500"><MessageSquare size={16} /><span>{post.replies.length}</span></button>
              {isAdminView && <button className="text-blue-500 hover:text-blue-600">{t('adminPanel.forum.moderate')}</button>}
            </div>
            
            <AnimatePresence>
              {replyingTo === post.id && (
                <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} exit={{ opacity: 0, height: 0 }} className="mt-4 ps-10">
                  <div className="flex items-center gap-2">
                    <input type="text" value={replyContent} onChange={e => setReplyContent(e.target.value)} placeholder={t('communityForum.replyPlaceholder')} className="flex-1 p-2 bg-gray-100 dark:bg-gray-700 rounded-lg focus:outline-none disabled:cursor-not-allowed" onKeyDown={(e) => e.key === 'Enter' && handlePost(replyContent, true, post.id)} disabled={!currentUser?.isPhoneVerified} />
                    <button onClick={() => handlePost(replyContent, true, post.id)} className="p-2 rounded-full bg-gold-500 text-white hover:bg-gold-600 disabled:bg-gray-400" disabled={!currentUser?.isPhoneVerified}><Send size={18} /></button>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>

            {post.replies.length > 0 && (
              <div className="mt-4">
                <button onClick={() => toggleReplies(post.id)} className="text-sm text-gold-600 dark:text-gold-400 font-medium">
                  {visibleReplies[post.id] ? t('communityForum.hideReplies') : t('communityForum.showReplies', { count: post.replies.length })}
                </button>
                <AnimatePresence>
                {visibleReplies[post.id] && (
                  <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} exit={{ opacity: 0, height: 0 }} className="mt-4 space-y-4 ps-8 border-s-2 border-gray-200 dark:border-gray-700">
                    {post.replies.map(reply => (
                      <div key={reply.id} className="flex items-start gap-3">
                        <img src={reply.avatar} alt={reply.author} className="w-8 h-8 rounded-full" />
                        <div className="flex-1 bg-gray-100 dark:bg-gray-700/50 p-3 rounded-lg">
                          <p className="font-semibold text-sm text-gray-800 dark:text-gray-200">{reply.author}</p>
                          <p className="text-sm text-gray-600 dark:text-gray-400">{reply.content}</p>
                        </div>
                      </div>
                    ))}
                  </motion.div>
                )}
                </AnimatePresence>
              </div>
            )}
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default CommunityForum;
PK
     H>[O�͖<  �<  "   src/components/Tools/EightPlan.tsximport React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Target, ChevronRight, Star, Save, Eye, Lock } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import Modal from '../common/Modal';

const lifeAreas = [
  { id: 'health', titleKey: 'health', descriptionKey: 'healthDesc', color: 'from-green-400 to-green-600' },
  { id: 'career', titleKey: 'career', descriptionKey: 'careerDesc', color: 'from-blue-400 to-blue-600' },
  { id: 'relationships', titleKey: 'relationships', descriptionKey: 'relationshipsDesc', color: 'from-purple-400 to-purple-600' },
  { id: 'personal', titleKey: 'personal', descriptionKey: 'personalDesc', color: 'from-orange-400 to-orange-600' },
  { id: 'financial', titleKey: 'financial', descriptionKey: 'financialDesc', color: 'from-yellow-400 to-yellow-600' },
];

const questionsKeys = [
  'q1', 'q2', 'q3', 'q4', 'q5', 'q6'
];

interface AnalysisData {
  area: string;
  color: string;
  currentScore: number;
  scoreReason: string;
  challenges: string[];
  goal: string;
  actions: string[];
  metrics: string;
  resources: string;
}

const MIN_CHARS = 200;

const EightPlan: React.FC = () => {
  const { t } = useTranslation();
  const [currentArea, setCurrentArea] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<string, string[]>>({});
  const [currentAnswer, setCurrentAnswer] = useState('');
  const [showAnalysis, setShowAnalysis] = useState(false);
  const [analysisData, setAnalysisData] = useState<AnalysisData[]>([]);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);

  useEffect(() => {
    const savedData = localStorage.getItem('8plan-analysis');
    const savedAnswers = localStorage.getItem('8plan-answers');
    const submittedFlag = localStorage.getItem('8plan-submitted');

    if (submittedFlag === 'true' && savedData) {
      setAnalysisData(JSON.parse(savedData));
      setIsSubmitted(true);
      setShowAnalysis(true);
    } else if(savedAnswers) {
      setAnswers(JSON.parse(savedAnswers));
    }
  }, []);

  const handleNextQuestion = () => {
    const areaId = lifeAreas[currentArea].id;
    const updatedAnswers = { ...answers, [areaId]: [...(answers[areaId] || [])] };
    updatedAnswers[areaId][currentQuestion] = currentAnswer;
    setAnswers(updatedAnswers);
    localStorage.setItem('8plan-answers', JSON.stringify(updatedAnswers));

    if (currentQuestion < questionsKeys.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setCurrentAnswer(updatedAnswers[areaId]?.[currentQuestion + 1] || '');
    } else if (currentArea < lifeAreas.length - 1) {
      setCurrentArea(currentArea + 1);
      setCurrentQuestion(0);
      const nextAreaId = lifeAreas[currentArea + 1].id;
      setCurrentAnswer(updatedAnswers[nextAreaId]?.[0] || '');
    }
  };

  const handlePrevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setCurrentAnswer(answers[lifeAreas[currentArea].id]?.[currentQuestion - 1] || '');
    } else if (currentArea > 0) {
      setCurrentArea(currentArea - 1);
      setCurrentQuestion(questionsKeys.length - 1);
      setCurrentAnswer(answers[lifeAreas[currentArea - 1].id]?.[questionsKeys.length - 1] || '');
    }
  };

  const generateAnalysis = () => {
    const analysis: AnalysisData[] = [];
    lifeAreas.forEach(area => {
      const areaAnswers = answers[area.id] || [];
      if (areaAnswers.length === questionsKeys.length) {
        const scoreMatch = areaAnswers[0].match(/(\d+)/);
        const currentScore = scoreMatch ? parseInt(scoreMatch[1], 10) : 0;
        const scoreReason = areaAnswers[0].replace(/(\d+)/, '').trim();

        analysis.push({
          area: t(`8plan.areas.${area.titleKey}`),
          color: area.color,
          currentScore: Math.max(1, Math.min(10, currentScore)),
          scoreReason,
          challenges: areaAnswers[1].split(/[\n,-]/).map(s => s.trim()).filter(Boolean),
          goal: areaAnswers[2],
          actions: areaAnswers[3].split(/[\n,-]/).map(s => s.trim()).filter(Boolean),
          metrics: areaAnswers[4],
          resources: areaAnswers[5]
        });
      }
    });
    setAnalysisData(analysis);
    setShowAnalysis(true);
    setIsSubmitted(true);
    localStorage.setItem('8plan-analysis', JSON.stringify(analysis));
    localStorage.setItem('8plan-submitted', 'true');
    localStorage.removeItem('8plan-answers');
  };

  const handleComplete = () => {
    const areaId = lifeAreas[currentArea].id;
    const updatedAnswers = { ...answers, [areaId]: [...(answers[areaId] || [])] };
    updatedAnswers[areaId][currentQuestion] = currentAnswer;
    setAnswers(updatedAnswers);
    setIsConfirmModalOpen(true);
  };

  const handleConfirmSubmit = () => {
    setIsConfirmModalOpen(false);
    generateAnalysis();
  };

  const progress = ((currentArea * questionsKeys.length + currentQuestion) / (lifeAreas.length * questionsKeys.length)) * 100;
  const isLastStep = currentArea === lifeAreas.length - 1 && currentQuestion === questionsKeys.length - 1;

  if (showAnalysis) {
    return (
      <div className="max-w-6xl mx-auto p-4 sm:p-6">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">{t('8plan.analysis.title')}</h1>
          <p className="text-gray-600 dark:text-gray-400">{t('8plan.analysis.description')}</p>
        </motion.div>

        <div className="flex justify-center mb-8">
          <div className="flex items-center gap-2 p-3 bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-300 rounded-lg">
            <Lock className="w-5 h-5" />
            <span className="text-sm font-medium">{t('8plan.analysis.locked')}</span>
          </div>
        </div>
        
        <div className="space-y-8">
          {analysisData.map((data, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.15 }}
              className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 rounded-2xl p-6 shadow-lg"
            >
              <div className={`inline-flex items-center space-x-2 space-x-reverse px-4 py-2 rounded-lg bg-gradient-to-r ${data.color} text-white mb-6`}>
                <Star className="w-5 h-5" />
                <span className="font-bold text-lg">{data.area}</span>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-6">
                  <div>
                    <h4 className="font-bold text-gray-900 dark:text-white mb-3">{t('8plan.analysis.currentScore')}: {data.currentScore}/10</h4>
                    <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                      <div className={`h-2.5 rounded-full bg-gradient-to-r ${data.color}`} style={{ width: `${data.currentScore * 10}%` }}></div>
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-2 italic">"{data.scoreReason}"</p>
                  </div>
                  <div>
                    <h4 className="font-bold text-gray-900 dark:text-white mb-2">{t('8plan.analysis.mainGoal')}</h4>
                    <p className="text-base text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-700/50 p-4 rounded-lg border border-gray-200 dark:border-gray-600">{data.goal}</p>
                  </div>
                </div>
                
                <div className="space-y-6">
                  <div>
                    <h4 className="font-bold text-gray-900 dark:text-white mb-2">{t('8plan.analysis.keyActions')}</h4>
                    <ul className="space-y-2">
                      {data.actions.map((action, i) => (
                        <li key={i} className="flex items-start space-x-2 space-x-reverse">
                          <ChevronRight className="w-4 h-4 text-gold-500 mt-1 flex-shrink-0 transform -scale-x-100" />
                          <span className="text-sm text-gray-600 dark:text-gray-400">{action}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-bold text-gray-900 dark:text-white mb-2">{t('8plan.analysis.biggestChallenges')}</h4>
                     <div className="flex flex-wrap gap-2">
                      {data.challenges.map((challenge, i) => (
                        <span key={i} className="text-xs bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300 px-2 py-1 rounded-full">{challenge}</span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-4 sm:p-6">
      <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-8">
        <div className="flex items-center justify-center space-x-2 space-x-reverse mb-4">
          <Target className="w-8 h-8 text-gold-500" />
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">{t('8plan.title')}</h1>
        </div>
        <p className="text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">{t('8plan.description')}</p>
      </motion.div>

      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-medium text-gray-700 dark:text-gray-300">{t('8plan.progress')}</span>
          <span className="text-sm font-bold text-gold-600 dark:text-gold-400">{Math.round(progress)}%</span>
        </div>
        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
          <motion.div initial={{ width: 0 }} animate={{ width: `${progress}%` }} transition={{ duration: 0.5 }} className="h-3 bg-gradient-to-r from-gold-400 to-gold-600 rounded-full" />
        </div>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-1">
          <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4">{t('8plan.areas.title')}</h3>
          <div className="space-y-3">
            {lifeAreas.map((area, index) => (
              <motion.div key={area.id} initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: index * 0.05 }} className={`p-4 rounded-xl border transition-all duration-200 ${index === currentArea ? 'bg-gradient-to-r from-gold-100 to-gold-50 dark:from-gold-900/50 dark:to-gold-800/30 border-gold-300 dark:border-gold-600' : index < currentArea ? 'bg-green-50 dark:bg-green-900/30 border-green-200 dark:border-green-700' : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700'}`}>
                <div className="flex items-center space-x-2 space-x-reverse">
                  {index < currentArea ? (<Star className="w-5 h-5 text-green-500 fill-current" />) : index === currentArea ? (<div className="w-5 h-5 rounded-full bg-gold-500 animate-pulse" />) : (<div className="w-5 h-5 rounded-full border-2 border-gray-300 dark:border-gray-600" />)}
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white">{t(`8plan.areas.${area.titleKey}`)}</h4>
                    <p className="text-xs text-gray-500 dark:text-gray-400">{t(`8plan.areas.${area.descriptionKey}`)}</p>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </div>

        <div className="lg:col-span-2">
          <motion.div key={`${currentArea}-${currentQuestion}`} initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 rounded-2xl p-8 shadow-lg">
            <div className="mb-6">
              <div className={`inline-flex items-center space-x-2 space-x-reverse px-4 py-2 rounded-lg bg-gradient-to-r ${lifeAreas[currentArea].color} text-white mb-4`}>
                <Star className="w-4 h-4" />
                <span className="font-medium">{t(`8plan.areas.${lifeAreas[currentArea].titleKey}`)}</span>
              </div>
              <p className="text-gray-600 dark:text-gray-400">{t('8plan.question')} {currentQuestion + 1} {t('8plan.of')} {questionsKeys.length}</p>
            </div>
            
            <div className="mb-6">
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4 leading-relaxed">{t(`8plan.questions.${questionsKeys[currentQuestion]}`)}</h3>
              <textarea value={currentAnswer} onChange={(e) => setCurrentAnswer(e.target.value)} placeholder={t('8plan.placeholder')} className="w-full h-40 p-4 rounded-xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-gold-500 focus:border-transparent resize-none" />
              <div className={`mt-2 text-xs ${currentAnswer.length < MIN_CHARS ? 'text-red-500' : 'text-green-500'}`}>{currentAnswer.length} / {MIN_CHARS} {t('8plan.characters')}</div>
            </div>

            <div className="flex justify-between items-center">
              <button onClick={handlePrevQuestion} disabled={currentArea === 0 && currentQuestion === 0} className="flex items-center space-x-2 space-x-reverse px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                <ChevronRight className="w-4 h-4 rotate-180" />
                <span>{t('8plan.prev')}</span>
              </button>
              {isLastStep ? (
                <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} onClick={handleComplete} disabled={currentAnswer.length < MIN_CHARS} className="flex items-center space-x-2 space-x-reverse px-6 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg hover:shadow-lg disabled:opacity-50 transition-all">
                  <Save className="w-4 h-4" />
                  <span>{t('8plan.complete')}</span>
                </motion.button>
              ) : (
                <button onClick={handleNextQuestion} disabled={currentAnswer.length < MIN_CHARS} className="flex items-center space-x-2 space-x-reverse px-6 py-2 bg-gradient-to-r from-gold-500 to-gold-600 text-white rounded-lg hover:shadow-lg disabled:opacity-50 transition-all">
                  <span>{t('8plan.next')}</span>
                  <ChevronRight className="w-4 h-4" />
                </button>
              )}
            </div>
          </motion.div>
        </div>
      </div>
      
      <Modal
        isOpen={isConfirmModalOpen}
        onClose={() => setIsConfirmModalOpen(false)}
        onConfirm={handleConfirmSubmit}
        title={t('8plan.modal.title')}
      >
        <p>{t('8plan.modal.body')}</p>
      </Modal>
    </div>
  );
};

export default EightPlan;
PK
     H>[���`�  �  $   src/components/Tools/GoalPyramid.tsximport React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Plus, Trash2 } from 'lucide-react';

interface Goal {
    id: number;
    text: string;
}

const GoalPyramid: React.FC = () => {
    const [mainGoal, setMainGoal] = useState('');
    const [mediumGoals, setMediumGoals] = useState<Goal[]>([]);
    const [smallGoals, setSmallGoals] = useState<Goal[]>([]);
    const [text, setText] = useState('');
    const [level, setLevel] = useState<'main' | 'medium' | 'small'>('small');

    const addGoal = () => {
        if (!text) return;
        const newGoal = { id: Date.now(), text };
        if (level === 'medium') setMediumGoals([...mediumGoals, newGoal]);
        else if (level === 'small') setSmallGoals([...smallGoals, newGoal]);
        setText('');
    };

    return (
        <div>
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold mb-2">Goal Pyramid</h1>
                <p className="text-gray-600 dark:text-gray-400">Break down your main goal into actionable steps.</p>
            </div>

            <div className="flex flex-wrap gap-4 mb-8 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg justify-center">
                <select value={level} onChange={e => setLevel(e.target.value as any)} className="p-2 rounded-lg border dark:bg-gray-700">
                    <option value="small">Small Step</option>
                    <option value="medium">Medium Goal</option>
                </select>
                <input type="text" value={text} onChange={e => setText(e.target.value)} placeholder="Add a goal/step..." className="p-2 rounded-lg border dark:bg-gray-700" />
                <button onClick={addGoal} className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg"><Plus size={18} /> Add</button>
            </div>

            <div className="flex flex-col items-center space-y-4">
                {/* Main Goal */}
                <motion.div initial={{ scale: 0 }} animate={{ scale: 1 }} className="w-full max-w-md">
                    <input
                        type="text"
                        value={mainGoal}
                        onChange={e => setMainGoal(e.target.value)}
                        placeholder="Your Ultimate Goal"
                        className="w-full text-center p-4 text-xl font-bold rounded-lg bg-gold-200 dark:bg-gold-800/50 border-2 border-gold-500"
                    />
                </motion.div>

                {/* Medium Goals */}
                <div className="flex justify-center flex-wrap gap-4 w-full max-w-2xl">
                    {mediumGoals.map((goal, i) => (
                        <motion.div key={goal.id} initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: i * 0.1 }} className="relative group p-3 bg-blue-100 dark:bg-blue-900/50 rounded-lg shadow">
                            {goal.text}
                            <button onClick={() => setMediumGoals(mediumGoals.filter(g => g.id !== goal.id))} className="absolute -top-2 -right-2 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100"><Trash2 size={12} /></button>
                        </motion.div>
                    ))}
                </div>

                {/* Small Goals */}
                <div className="flex justify-center flex-wrap gap-2 w-full max-w-4xl">
                    {smallGoals.map((goal, i) => (
                        <motion.div key={goal.id} initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: i * 0.05 }} className="relative group p-2 text-sm bg-green-100 dark:bg-green-900/50 rounded-lg shadow-sm">
                            {goal.text}
                            <button onClick={() => setSmallGoals(smallGoals.filter(g => g.id !== goal.id))} className="absolute -top-2 -right-2 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100"><Trash2 size={12} /></button>
                        </motion.div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default GoalPyramid;
PK
     H>[�%Q    )   src/components/Tools/GratitudeJournal.tsximport React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { BookOpen, Plus } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import { formatLocaleDate } from '../../lib/date';
import { Language } from '../../App';

interface Entry {
  date: string;
  text: string;
}

const GratitudeJournal: React.FC = () => {
  const { t, i18n } = useTranslation();
  const [entries, setEntries] = useState<Entry[]>([]);
  const [newEntry, setNewEntry] = useState('');

  // Defensive check for the language to prevent crashes
  const getValidLang = (): Language => {
    const supportedLangs: Language[] = ['en', 'fa', 'ar'];
    const currentLang = i18n.language;
    if (supportedLangs.includes(currentLang as Language)) {
      return currentLang as Language;
    }
    return 'en'; // Default to 'en' if the language is invalid
  };
  const validLang = getValidLang();
  
  const today = formatLocaleDate(new Date(), validLang, 'YYYY-MM-DD');
  const todayEntry = entries.find(e => e.date === today);

  useEffect(() => {
    const savedEntries = localStorage.getItem('gratitude-journal');
    if (savedEntries) {
      setEntries(JSON.parse(savedEntries));
    }
  }, []);

  const saveEntry = () => {
    if (!newEntry.trim()) return;
    const updatedEntries = [...entries.filter(e => e.date !== today), { date: today, text: newEntry }];
    setEntries(updatedEntries);
    localStorage.setItem('gratitude-journal', JSON.stringify(updatedEntries));
    setNewEntry('');
  };

  return (
    <div>
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">Gratitude Journal</h1>
        <p className="text-gray-600 dark:text-gray-400">Record what you're thankful for each day.</p>
      </div>

      <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg mb-8">
        <h2 className="text-xl font-bold mb-2">Today's Entry - {formatLocaleDate(new Date(), validLang, 'dddd, MMMM D, YYYY')}</h2>
        {todayEntry ? (
          <p className="text-gray-700 dark:text-gray-300 whitespace-pre-wrap">{todayEntry.text}</p>
        ) : (
          <div>
            <textarea
              value={newEntry}
              onChange={e => setNewEntry(e.target.value)}
              placeholder="List three things you are grateful for today..."
              className="w-full h-32 p-2 border rounded-lg dark:bg-gray-700 dark:border-gray-600"
            />
            <button onClick={saveEntry} className="mt-2 flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg"><Plus size={18} /> Save Entry</button>
          </div>
        )}
      </div>

      <div className="space-y-4">
        <h3 className="text-2xl font-bold">Past Entries</h3>
        {entries.filter(e => e.date !== today).sort((a, b) => b.date.localeCompare(a.date)).map(entry => (
          <motion.div key={entry.date} initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="bg-white/50 dark:bg-gray-800/50 p-4 rounded-lg">
            <p className="font-bold text-lg mb-2">{formatLocaleDate(entry.date, validLang, 'dddd, MMMM D, YYYY')}</p>
            <p className="text-gray-600 dark:text-gray-400 whitespace-pre-wrap">{entry.text}</p>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default GratitudeJournal;
PK
     H>[4�~�`  `  %   src/components/Tools/HabitTracker.tsximport React, { useState, useMemo } from 'react';
import { motion } from 'framer-motion';
import { useTranslation } from 'react-i18next';
import dayjs, { getCalendarSystem } from '../../lib/date';
import { Language } from '../../App';
import { ChevronLeft, ChevronRight, Plus } from 'lucide-react';

interface Habit {
  id: number;
  name: string;
  color: string;
  completed: string[]; // Store dates as ISO strings
}

const HabitTracker: React.FC = () => {
  const { i18n } = useTranslation();
  const lang = i18n.language as Language;
  const calendar = getCalendarSystem(lang);

  const [habits, setHabits] = useState<Habit[]>([
    { id: 1, name: 'ورزش', color: 'bg-blue-500', completed: [] },
    { id: 2, name: 'مطالعه', color: 'bg-green-500', completed: [] },
  ]);
  const [newHabit, setNewHabit] = useState('');
  const [currentMonth, setCurrentMonth] = useState(dayjs().calendar(calendar).locale(lang));

  const toggleHabit = (habitId: number, day: dayjs.Dayjs) => {
    const dayISO = day.format('YYYY-MM-DD');
    setHabits(habits.map(habit => {
      if (habit.id === habitId) {
        const isCompleted = habit.completed.includes(dayISO);
        return {
          ...habit,
          completed: isCompleted
            ? habit.completed.filter(d => d !== dayISO)
            : [...habit.completed, dayISO]
        };
      }
      return habit;
    }));
  };

  const addHabit = () => {
    if (!newHabit) return;
    const newId = Math.max(0, ...habits.map(h => h.id)) + 1;
    const colors = ['bg-red-500', 'bg-yellow-500', 'bg-purple-500', 'bg-pink-500'];
    setHabits([...habits, { id: newId, name: newHabit, color: colors[newId % colors.length], completed: [] }]);
    setNewHabit('');
  };

  const { daysInMonth, startingDayIndex, weekDays } = useMemo(() => {
    const monthInstance = currentMonth.calendar(calendar).locale(lang);
    const start = monthInstance.startOf('month');
    const end = monthInstance.endOf('month');
    const days = Array.from({ length: end.diff(start, 'day') + 1 }, (_, i) => start.add(i, 'day'));
    
    // dayjs locale data contains weekStart (0 for Sun, 6 for Sat)
    const weekStart = dayjs.Ls[lang]?.weekStart || 0;
    const startIndex = (start.day() - weekStart + 7) % 7;

    const dayNames = [...Array(7)].map((_, i) => dayjs().locale(lang).day((i + weekStart) % 7).format('dd'));

    return {
      daysInMonth: days,
      startingDayIndex: startIndex,
      weekDays: dayNames
    };
  }, [currentMonth, lang, calendar]);

  const changeMonth = (amount: number) => {
    setCurrentMonth(prev => prev.add(amount, 'month'));
  };

  return (
    <div>
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">Habit Tracker</h1>
        <p className="text-gray-600 dark:text-gray-400">Build good habits. One day at a time.</p>
      </div>

      <div className="flex gap-2 mb-4">
        <input type="text" value={newHabit} onChange={e => setNewHabit(e.target.value)} placeholder="Add new habit..." className="flex-1 p-2 rounded-lg border dark:bg-gray-700 dark:border-gray-600" />
        <button onClick={addHabit} className="flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg"><Plus size={18} /> Add</button>
      </div>

      <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg">
        <div className="flex justify-between items-center mb-4">
          <button onClick={() => changeMonth(-1)}><ChevronRight /></button>
          <h2 className="font-bold text-xl">{currentMonth.format('MMMM YYYY')}</h2>
          <button onClick={() => changeMonth(1)}><ChevronLeft /></button>
        </div>

        <div className="grid grid-cols-7 gap-1 text-center font-bold text-xs text-gray-500">
          {weekDays.map((day, index) => <div key={index}>{day}</div>)}
        </div>

        <div className="grid grid-cols-7 gap-1 mt-2">
          {Array.from({ length: startingDayIndex }).map((_, i) => <div key={`empty-${i}`}></div>)}
          {daysInMonth.map(day => (
            <div key={day.toString()} className="border-t dark:border-gray-700 p-1 space-y-1">
              <div className={`text-center text-sm ${day.isSame(dayjs(), 'day') ? 'text-blue-500 font-bold' : ''}`}>{day.format('D')}</div>
              <div className="space-y-1">
                {habits.map(habit => (
                  <motion.div
                    key={habit.id}
                    onClick={() => toggleHabit(habit.id, day)}
                    className={`w-full h-4 rounded cursor-pointer ${habit.completed.includes(day.format('YYYY-MM-DD')) ? habit.color : 'bg-gray-200 dark:bg-gray-700'}`}
                    whileTap={{ scale: 1.2 }}
                  />
                ))}
              </div>
            </div>
          ))}
        </div>
        <div className="mt-4 flex flex-wrap gap-4">
            {habits.map(habit => (
                <div key={habit.id} className="flex items-center gap-2 text-sm">
                    <div className={`w-4 h-4 rounded ${habit.color}`}></div>
                    <span>{habit.name}</span>
                </div>
            ))}
        </div>
      </div>
    </div>
  );
};

export default HabitTracker;
PK
     H>[Q�ag  g  %   src/components/Tools/IkigaiFinder.tsximport React, { useState } from 'react';
import { motion } from 'framer-motion';

const IkigaiFinder: React.FC = () => {
    const [step, setStep] = useState(0);
    const [answers, setAnswers] = useState({
        love: '',
        goodAt: '',
        paidFor: '',
        worldNeeds: ''
    });
    const [showResult, setShowResult] = useState(false);

    const questions = [
        { key: 'love', title: "What you LOVE", color: "bg-pink-500" },
        { key: 'goodAt', title: "What you are GOOD AT", color: "bg-blue-500" },
        { key: 'paidFor', title: "What you can be PAID FOR", color: "bg-green-500" },
        { key: 'worldNeeds', title: "What the WORLD NEEDS", color: "bg-yellow-500" }
    ];

    const handleNext = () => {
        if (step < questions.length - 1) {
            setStep(step + 1);
        } else {
            setShowResult(true);
        }
    };

    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        setAnswers({ ...answers, [questions[step].key]: e.target.value });
    };

    if (showResult) {
        return (
            <div className="text-center">
                <h1 className="text-3xl font-bold mb-4">Your Ikigai</h1>
                <p className="mb-8">The intersection of your passions and talents.</p>
                <div className="relative w-96 h-96 mx-auto">
                    {questions.map((q, i) => (
                        <motion.div
                            key={q.key}
                            initial={{ opacity: 0, scale: 0.5 }}
                            animate={{ opacity: 1, scale: 1 }}
                            transition={{ delay: i * 0.2 }}
                            className={`absolute w-48 h-48 rounded-full flex items-center justify-center text-white p-4 text-center ${q.color}`}
                            style={{
                                top: i < 2 ? '0' : '50%',
                                left: i % 2 === 0 ? '0' : '50%'
                            }}
                        >
                            {q.title}
                        </motion.div>
                    ))}
                    <motion.div 
                        initial={{ opacity: 0, scale: 0 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ delay: 1 }}
                        className="absolute top-1/4 left-1/4 w-48 h-48 rounded-full bg-purple-600 flex items-center justify-center text-white font-bold text-2xl z-10"
                    >
                        IKIGAI
                    </motion.div>
                </div>
            </div>
        );
    }

    return (
        <div>
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold mb-2">Ikigai Finder</h1>
                <p className="text-gray-600 dark:text-gray-400">Discover your reason for being.</p>
            </div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mb-8">
                <motion.div className="bg-gold-500 h-2.5 rounded-full" style={{ width: `${((step + 1) / questions.length) * 100}%` }} />
            </div>
            <motion.div key={step} initial={{ opacity: 0, x: 50 }} animate={{ opacity: 1, x: 0 }}>
                <h2 className="text-2xl font-bold mb-4">{questions[step].title}</h2>
                <textarea
                    value={answers[questions[step].key as keyof typeof answers]}
                    onChange={handleChange}
                    className="w-full h-40 p-4 rounded-lg border dark:bg-gray-700"
                    placeholder="List everything that comes to mind..."
                />
                <button onClick={handleNext} className="mt-4 px-6 py-2 bg-gold-500 text-white rounded-lg">
                    {step < questions.length - 1 ? 'Next' : 'Find my Ikigai'}
                </button>
            </motion.div>
        </div>
    );
};

export default IkigaiFinder;
PK
     H>[*5i��  �  '   src/components/Tools/MindMapBuilder.tsximport React, { useState, useCallback } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodesState,
  useEdgesState,
  Connection,
  Edge,
  Node,
} from 'reactflow';
import 'reactflow/dist/style.css';
import { motion } from 'framer-motion';
import { GitBranch, Plus, Trash2 } from 'lucide-react';

const initialNodes: Node[] = [
  { id: '1', type: 'input', data: { label: 'My Goal' }, position: { x: 250, y: 5 } },
];

const MindMapBuilder: React.FC = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [nodeName, setNodeName] = useState('');
  const [selectedNode, setSelectedNode] = useState<Node | null>(null);

  const onConnect = useCallback(
    (params: Connection | Edge) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  const addNode = () => {
    if (!nodeName) return;
    const newNodeId = (nodes.length + 1).toString();
    const newNode: Node = {
      id: newNodeId,
      data: { label: nodeName },
      position: {
        x: Math.random() * 400,
        y: Math.random() * 400,
      },
    };
    setNodes((nds) => nds.concat(newNode));
    if (selectedNode) {
        const newEdge: Edge = {
            id: `e${selectedNode.id}-${newNodeId}`,
            source: selectedNode.id,
            target: newNodeId,
            animated: true,
        };
        setEdges((eds) => eds.concat(newEdge));
    }
    setNodeName('');
  };
  
  const onNodeClick = (_: React.MouseEvent, node: Node) => {
    setSelectedNode(node);
  };

  return (
    <div>
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">Mind Map Builder</h1>
        <p className="text-gray-600 dark:text-gray-400">Organize your thoughts and ideas visually.</p>
      </div>

      <div className="flex flex-wrap gap-4 mb-8 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg justify-center">
        <input 
          type="text" 
          value={nodeName} 
          onChange={(e) => setNodeName(e.target.value)} 
          placeholder="New idea..." 
          className="p-2 rounded-lg border dark:bg-gray-700"
        />
        <button onClick={addNode} className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg"><Plus size={18} /> Add Node</button>
        {selectedNode && <span className="self-center text-sm">Selected: <strong>{selectedNode.data.label}</strong></span>}
      </div>

      <div className="w-full h-[70vh] rounded-lg overflow-hidden border-4 border-gray-200 dark:border-gray-700">
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          onNodeClick={onNodeClick}
          fitView
        >
          <MiniMap />
          <Controls />
          <Background />
        </ReactFlow>
      </div>
    </div>
  );
};

export default MindMapBuilder;
PK
     H>[�F�>�  �  %   src/components/Tools/MoneyPlanner.tsximport React, { useState, useMemo } from 'react';
import { motion } from 'framer-motion';
import { DollarSign, Plus, ArrowUp, ArrowDown } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

type TransactionType = 'income' | 'expense';
interface Transaction {
  id: number;
  type: TransactionType;
  description: string;
  amount: number;
}

const MoneyPlanner: React.FC = () => {
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [description, setDescription] = useState('');
  const [amount, setAmount] = useState('');
  const [type, setType] = useState<TransactionType>('expense');

  const addTransaction = () => {
    if (!description || !amount) return;
    const newTransaction: Transaction = {
      id: Date.now(),
      type,
      description,
      amount: parseFloat(amount),
    };
    setTransactions([...transactions, newTransaction]);
    setDescription('');
    setAmount('');
  };

  const { totalIncome, totalExpense, balance, chartData } = useMemo(() => {
    const income = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);
    const expense = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
    return {
      totalIncome: income,
      totalExpense: expense,
      balance: income - expense,
      chartData: [{ name: 'Financials', income, expense }]
    };
  }, [transactions]);

  return (
    <div>
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">Money Planner</h1>
        <p className="text-gray-600 dark:text-gray-400">Track your income and expenses to achieve financial clarity.</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
        <div className="lg:col-span-1 bg-white/80 dark:bg-gray-800/80 p-6 rounded-2xl shadow-lg">
          <h3 className="font-bold text-lg mb-4">Add Transaction</h3>
          <div className="space-y-4">
            <input type="text" value={description} onChange={e => setDescription(e.target.value)} placeholder="Description" className="w-full p-2 rounded border dark:bg-gray-700" />
            <input type="number" value={amount} onChange={e => setAmount(e.target.value)} placeholder="Amount" className="w-full p-2 rounded border dark:bg-gray-700" />
            <div className="flex gap-2">
              <button onClick={() => setType('income')} className={`flex-1 p-2 rounded ${type === 'income' ? 'bg-green-500 text-white' : 'bg-gray-200 dark:bg-gray-600'}`}>Income</button>
              <button onClick={() => setType('expense')} className={`flex-1 p-2 rounded ${type === 'expense' ? 'bg-red-500 text-white' : 'bg-gray-200 dark:bg-gray-600'}`}>Expense</button>
            </div>
            <button onClick={addTransaction} className="w-full flex items-center justify-center gap-2 p-2 bg-blue-500 text-white rounded"><Plus size={18} /> Add</button>
          </div>
        </div>
        <div className="lg:col-span-2 bg-white/80 dark:bg-gray-800/80 p-6 rounded-2xl shadow-lg">
          <h3 className="font-bold text-lg mb-4">Summary</h3>
          <div className="grid grid-cols-3 gap-4 text-center mb-4">
            <div className="p-4 bg-green-100 dark:bg-green-900/50 rounded-lg">
              <p className="text-sm text-green-800 dark:text-green-300">Total Income</p>
              <p className="text-2xl font-bold">${totalIncome.toFixed(2)}</p>
            </div>
            <div className="p-4 bg-red-100 dark:bg-red-900/50 rounded-lg">
              <p className="text-sm text-red-800 dark:text-red-300">Total Expense</p>
              <p className="text-2xl font-bold">${totalExpense.toFixed(2)}</p>
            </div>
            <div className={`p-4 rounded-lg ${balance >= 0 ? 'bg-blue-100 dark:bg-blue-900/50' : 'bg-yellow-100 dark:bg-yellow-900/50'}`}>
              <p className={`text-sm ${balance >= 0 ? 'text-blue-800 dark:text-blue-300' : 'text-yellow-800 dark:text-yellow-300'}`}>Balance</p>
              <p className="text-2xl font-bold">${balance.toFixed(2)}</p>
            </div>
          </div>
          <div className="w-full h-48">
            <ResponsiveContainer>
              <BarChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="income" fill="#22c55e" />
                <Bar dataKey="expense" fill="#ef4444" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      <div className="bg-white/80 dark:bg-gray-800/80 p-6 rounded-2xl shadow-lg">
        <h3 className="font-bold text-lg mb-4">Transaction History</h3>
        <div className="space-y-2">
          {transactions.map(t => (
            <motion.div key={t.id} initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
              <div className="flex items-center gap-3">
                {t.type === 'income' ? <ArrowUp className="w-5 h-5 text-green-500" /> : <ArrowDown className="w-5 h-5 text-red-500" />}
                <span>{t.description}</span>
              </div>
              <span className={`font-bold ${t.type === 'income' ? 'text-green-600' : 'text-red-600'}`}>${t.amount.toFixed(2)}</span>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default MoneyPlanner;
PK
     H>[�wݿ�  �  %   src/components/Tools/SwotAnalysis.tsximport React, { useState } from 'react';
import { motion } from 'framer-motion';

const SWOTQuadrant: React.FC<{ title: string; color: string; items: string[]; onUpdate: (items: string[]) => void; }> = ({ title, color, items, onUpdate }) => {
    const [text, setText] = useState(items.join('\n'));
    
    const handleBlur = () => {
        onUpdate(text.split('\n').filter(Boolean));
    };

    return (
        <motion.div 
            whileHover={{ scale: 1.02 }}
            className={`rounded-2xl p-6 shadow-lg bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-t-4 ${color}`}
        >
            <h3 className="text-xl font-bold mb-4">{title}</h3>
            <textarea
                value={text}
                onChange={e => setText(e.target.value)}
                onBlur={handleBlur}
                className="w-full h-48 p-2 bg-transparent focus:outline-none resize-none"
                placeholder={`List ${title.toLowerCase()}...`}
            />
        </motion.div>
    );
};

const SwotAnalysis: React.FC = () => {
  const [swot, setSwot] = useState({
    strengths: [],
    weaknesses: [],
    opportunities: [],
    threats: [],
  });

  const updateQuadrant = (quadrant: keyof typeof swot, items: string[]) => {
    setSwot(prev => ({ ...prev, [quadrant]: items }));
  };

  return (
    <div>
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">SWOT Analysis</h1>
        <p className="text-gray-600 dark:text-gray-400">Identify your Strengths, Weaknesses, Opportunities, and Threats.</p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <SWOTQuadrant title="Strengths" color="border-green-500" items={swot.strengths} onUpdate={(items) => updateQuadrant('strengths', items)} />
        <SWOTQuadrant title="Weaknesses" color="border-red-500" items={swot.weaknesses} onUpdate={(items) => updateQuadrant('weaknesses', items)} />
        <SWOTQuadrant title="Opportunities" color="border-blue-500" items={swot.opportunities} onUpdate={(items) => updateQuadrant('opportunities', items)} />
        <SWOTQuadrant title="Threats" color="border-yellow-500" items={swot.threats} onUpdate={(items) => updateQuadrant('threats', items)} />
      </div>
    </div>
  );
};

export default SwotAnalysis;
PK
     H>[E����  �  $   src/components/Tools/VisionBoard.tsximport React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Image as ImageIcon, Plus, Trash2, Type } from 'lucide-react';
import { faker } from '@faker-js/faker';

interface BoardItem {
  id: number;
  type: 'image' | 'text';
  content: string;
  x: number;
  y: number;
  rotation: number;
}

const VisionBoard: React.FC = () => {
  const [items, setItems] = useState<BoardItem[]>([]);
  const [textInput, setTextInput] = useState('');

  const addItem = (type: 'image' | 'text') => {
    const newItem: BoardItem = {
      id: Date.now(),
      type,
      content: type === 'image' ? faker.image.urlLoremFlickr({ category: 'nature' }) : textInput,
      x: Math.random() * 200,
      y: Math.random() * 200,
      rotation: Math.random() * 20 - 10,
    };
    setItems([...items, newItem]);
    setTextInput('');
  };

  const removeItem = (id: number) => {
    setItems(items.filter(item => item.id !== id));
  };

  return (
    <div>
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">Vision Board</h1>
        <p className="text-gray-600 dark:text-gray-400">Visualize your dreams and goals. Drag and drop to arrange.</p>
      </div>

      <div className="flex flex-wrap gap-4 mb-8 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg justify-center">
        <button onClick={() => addItem('image')} className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg"><ImageIcon size={18} /> Add Image</button>
        <div className="flex">
          <input type="text" value={textInput} onChange={e => setTextInput(e.target.value)} placeholder="Add text..." className="p-2 rounded-l-lg border-t border-b border-l dark:bg-gray-700 dark:border-gray-600" />
          <button onClick={() => addItem('text')} disabled={!textInput} className="flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-r-lg disabled:bg-gray-400"><Type size={18} /> Add Text</button>
        </div>
      </div>

      <div className="relative w-full h-[60vh] bg-corkboard-pattern bg-cover rounded-lg shadow-inner-strong overflow-hidden border-8 border-yellow-800">
        {items.map(item => (
          <motion.div
            key={item.id}
            drag
            dragConstraints={{ left: 0, right: 500, top: 0, bottom: 300 }} // Adjust constraints
            dragMomentum={false}
            initial={{ x: item.x, y: item.y, rotate: item.rotation, scale: 0 }}
            animate={{ scale: 1 }}
            className="absolute group cursor-move p-2 bg-white shadow-lg"
            style={{ transform: `rotate(${item.rotation}deg)` }}
          >
            {item.type === 'image' ? (
              <img src={item.content} alt="vision" className="w-40 h-auto pointer-events-none" />
            ) : (
              <p className="w-40 text-lg font-serif p-2 bg-yellow-100">{item.content}</p>
            )}
            <button onClick={() => removeItem(item.id)} className="absolute -top-2 -right-2 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity">
              <Trash2 size={14} />
            </button>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default VisionBoard;
PK
     H>[               src/components/common/PK
     H>[�Yd|
  |
     src/components/common/Modal.tsximport React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import { useTranslation } from 'react-i18next';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  title: string;
  children: React.ReactNode;
  hideCancelButton?: boolean;
  hideConfirmButton?: boolean;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, onConfirm, title, children, hideCancelButton, hideConfirmButton }) => {
  const { t } = useTranslation();

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0, y: 20 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.9, opacity: 0, y: 20 }}
            className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl w-full max-w-md"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6 border-b dark:border-gray-700 flex justify-between items-center">
              <h3 className="text-lg font-bold text-gray-900 dark:text-white">{title}</h3>
              <button onClick={onClose} className="p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700">
                <X size={20} />
              </button>
            </div>
            <div className="p-6 text-sm text-gray-600 dark:text-gray-300">
              {children}
            </div>
            {(!hideCancelButton || !hideConfirmButton) && (
                <div className="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-b-2xl flex justify-end gap-3">
                {!hideCancelButton && (
                    <button
                    onClick={onClose}
                    className="px-4 py-2 rounded-lg text-sm font-medium bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600"
                    >
                    {t('modal.cancel')}
                    </button>
                )}
                {!hideConfirmButton && (
                    <button
                    onClick={onConfirm}
                    className="px-4 py-2 rounded-lg text-sm font-medium bg-gold-500 text-white hover:bg-gold-600"
                    >
                    {t('modal.confirm')}
                    </button>
                )}
                </div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default Modal;
PK
     H>[��h�  �  +   src/components/common/PaymentSimulation.tsximport React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useTranslation } from 'react-i18next';
import { ArrowLeft, CheckCircle, Copy, Loader, AlertTriangle } from 'lucide-react';
import { useAuth, SubscriptionPlan } from '../../contexts/AuthContext';
import { faker } from '@faker-js/faker';

interface PaymentSimulationProps {
  method: 'zarinpal' | 'crypto';
  plan: SubscriptionPlan;
  onBack: () => void;
}

const PaymentSimulation: React.FC<PaymentSimulationProps> = ({ method, plan, onBack }) => {
  const { t } = useTranslation();
  const { currentUser, updateSubscription, addTransaction } = useAuth();
  const [status, setStatus] = useState<'pending' | 'verifying' | 'success'>('pending');
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    let timer: number;
    if (status === 'verifying') {
      timer = setTimeout(() => {
        setStatus('success');
      }, 4000);
    }
    return () => clearTimeout(timer);
  }, [status]);

  const handleSuccess = () => {
    if (currentUser) {
      updateSubscription(currentUser.id, plan.id);
      addTransaction({
        user_id: currentUser.id,
        username: currentUser.username,
        plan_id: plan.id,
        amount: plan.price * (plan.duration_days / 30),
        status: 'completed',
        reference: faker.string.alphanumeric(10).toUpperCase(),
        raw_response: JSON.stringify({ "message": "Simulated payment success", "method": method })
      });
    }
    onBack();
  };

  const handleCopy = () => {
    if (currentUser?.cryptoWalletAddress) {
        navigator.clipboard.writeText(currentUser.cryptoWalletAddress);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
    }
  };
  
  const cryptoNetwork = import.meta.env.VITE_CRYPTO_NETWORK || 'TRC20';

  const renderZarinpal = () => (
    <div className="text-center">
      <h2 className="text-2xl font-bold mb-4">{t('paymentSimulation.zarinpalTitle')}</h2>
      {status !== 'success' ? (
        <div className="flex flex-col items-center gap-4">
          <Loader className="w-12 h-12 text-gold-500 animate-spin" />
          <p>{t('paymentSimulation.zarinpalDesc')}</p>
        </div>
      ) : (
        <motion.div initial={{ scale: 0.8 }} animate={{ scale: 1 }}>
          <CheckCircle className="w-20 h-20 text-green-500 mx-auto mb-4" />
          <p className="text-xl font-semibold mb-6">{t('paymentSimulation.zarinpalSuccess')}</p>
          <button onClick={handleSuccess} className="px-6 py-2 bg-blue-500 text-white rounded-lg">
            {t('paymentSimulation.zarinpalReturn')}
          </button>
        </motion.div>
      )}
    </div>
  );

  const renderCrypto = () => (
    <div className="text-center">
      <h2 className="text-2xl font-bold mb-4">{t('paymentSimulation.cryptoTitle', { network: cryptoNetwork })}</h2>
      
      {status === 'pending' && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <p className="mb-6 text-gray-600 dark:text-gray-400">{t('paymentSimulation.cryptoDesc')}</p>
            <div className="mb-4">
                <p className="text-sm font-medium mb-2">{t('paymentSimulation.yourWallet')}</p>
                <div className="p-3 bg-gray-100 dark:bg-gray-700 rounded-lg font-mono text-sm break-all">
                {currentUser?.cryptoWalletAddress}
                </div>
                <button onClick={handleCopy} className="mt-2 flex items-center justify-center gap-2 w-full px-4 py-2 bg-gray-200 dark:bg-gray-600 rounded-lg">
                    {copied ? <CheckCircle size={18} className="text-green-500" /> : <Copy size={18} />}
                    {copied ? t('userProfile.referral.copied') : t('paymentSimulation.copyAddress')}
                </button>
            </div>
            <div className="p-3 bg-yellow-100 dark:bg-yellow-900/50 text-yellow-800 dark:text-yellow-200 text-xs rounded-lg flex items-start gap-2 mb-6">
                <AlertTriangle className="w-6 h-6 flex-shrink-0" />
                <span>{t('paymentSimulation.sendOnlyUSDT', { network: cryptoNetwork })}</span>
            </div>
            <button onClick={() => setStatus('verifying')} className="w-full px-6 py-3 bg-blue-500 text-white rounded-lg font-semibold">
                {t('paymentSimulation.cryptoConfirm')}
            </button>
        </motion.div>
      )}

      {status === 'verifying' && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="flex flex-col items-center gap-4">
          <Loader className="w-12 h-12 text-gold-500 animate-spin" />
          <p className="font-semibold">{t('paymentSimulation.verifying')}</p>
          <p className="text-sm text-gray-500 dark:text-gray-400">{t('paymentSimulation.cryptoSimulation')}</p>
        </motion.div>
      )}

      {status === 'success' && (
        <motion.div initial={{ scale: 0.8, opacity: 0 }} animate={{ scale: 1, opacity: 1 }}>
          <CheckCircle className="w-20 h-20 text-green-500 mx-auto mb-4" />
          <p className="text-xl font-semibold mb-6">{t('paymentSimulation.paymentConfirmed')}</p>
          <button onClick={handleSuccess} className="px-6 py-2 bg-blue-500 text-white rounded-lg">
            {t('paymentSimulation.zarinpalReturn')}
          </button>
        </motion.div>
      )}
    </div>
  );

  return (
    <div className="max-w-md mx-auto">
      <button onClick={onBack} className="flex items-center gap-2 mb-4 text-sm text-gray-600 dark:text-gray-400">
        <ArrowLeft size={16} /> {t('paymentSimulation.back')}
      </button>
      <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-8 rounded-2xl shadow-lg">
        {method === 'zarinpal' ? renderZarinpal() : renderCrypto()}
      </div>
    </div>
  );
};

export default PaymentSimulation;
PK
     H>[               src/contexts/PK
     H>[���KS  KS     src/contexts/AuthContext.tsximport React, { createContext, useContext, useState, useEffect } from 'react';
import { faker } from '@faker-js/faker';
import { UserRole, Language } from '../App';

export interface SubscriptionPlan {
  id: 'free' | 'monthly' | '3-month' | '9-month' | 'yearly' | string;
  price: number; // price per month
  save?: number;
  duration_days: number;
  trial_days: number;
  enabled: boolean;
  toolAccess: 'basic' | 'all';
}

export interface Subscription {
  planId: SubscriptionPlan['id'];
  expiryDate: string | null;
  isTrial: boolean;
}

interface ReferredUser {
  username: string;
  joinDate: string;
}

export interface User {
  id: string;
  username: string;
  passwordHash: string;
  role: UserRole;
  status: 'active' | 'blocked' | 'temp_blocked';
  language: Language;
  phone?: string;
  isPhoneVerified: boolean;
  profilePicture: string;
  subscription: Subscription;
  referralCode: string;
  referralEarnings: number;
  referredUsersCount: number;
  reportCount: number;
  lastCommentTimestamps: number[];
  cryptoWalletAddress: string;
  referredUsers: ReferredUser[];
}

export interface Report {
  id: number;
  reportedUserId: string;
  reportedUsername: string;
  reporterUserId: string;
  reporterUsername: string;
  reason: string;
  timestamp: string;
  status: 'pending' | 'reviewed_dismissed' | 'reviewed_action_taken';
  targetType: 'post' | 'user' | 'comment';
  targetId: string;
}

export interface ActivityLog {
  id: number;
  action: string;
  adminUsername: string;
  timestamp: string;
}

export interface Transaction {
    id: string;
    user_id: string;
    username: string;
    plan_id: string;
    amount: number;
    status: 'completed' | 'pending' | 'failed';
    reference: string;
    timestamp: string;
    raw_response: string;
}

export interface SmsLog {
    id: string;
    to: string;
    message: string;
    status: 'sent' | 'failed';
    timestamp: string;
}

interface ReferralRewardConfig {
    type: 'subscription_days' | 'credits';
    value: number;
}

interface AuthContextType {
  currentUser: User | null;
  simulatedRole: UserRole | null;
  users: User[];
  reports: Report[];
  activityLogs: ActivityLog[];
  subscriptionPlans: SubscriptionPlan[];
  transactions: Transaction[];
  smsLogs: SmsLog[];
  referralRewardConfig: ReferralRewardConfig;
  error: string | null;
  login: (username: string, password: string, referralCode?: string) => void;
  logout: () => void;
  setSimulatedRole: (role: UserRole | null) => void;
  updateUser: (userId: string, updates: Partial<User>) => void;
  deleteUser: (userId: string) => void;
  addAdmin: (username: string, password: string) => void;
  updateUserCredentials: (userId: string, username: string, password?: string) => void;
  addReport: (reportedUserId: string, reportedUsername: string, reporterUserId: string, reporterUsername: string, reason: string, targetType: 'post' | 'user' | 'comment', targetId: string) => void;
  updateUserLanguage: (userId: string, language: Language) => void;
  addCommentTimestamp: (userId: string) => void;
  updateSubscription: (userId: string, planId: SubscriptionPlan['id']) => void;
  sendOtp: (userId: string, phone: string) => Promise<boolean>;
  verifyOtp: (userId: string, code: string) => boolean;
  updateProfilePicture: (userId: string, pictureUrl: string) => void;
  updateSubscriptionPlan: (planId: SubscriptionPlan['id'], updates: Partial<SubscriptionPlan>) => void;
  addSubscriptionPlan: (newPlan: SubscriptionPlan) => void;
  simulateReferral: (referralCode: string) => boolean;
  changePassword: (userId: string, oldPass: string, newPass: string) => boolean;
  addTransaction: (transaction: Omit<Transaction, 'id' | 'timestamp'>) => void;
  sendTestSms: (to: string, message: string) => void;
  reportProfanity: (userId: string, content: string) => void;
  reviewReport: (reportId: number, action: 'dismiss' | 'uphold') => void;
  updateReferralConfig: (config: ReferralRewardConfig) => void;
  grantReferralReward: (userId: string) => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

const simpleHash = (s: string) => `hashed_${s}`;

const initialSubscriptionPlans: SubscriptionPlan[] = [
    { id: 'free', price: 0, duration_days: Infinity, trial_days: 0, enabled: true, toolAccess: 'basic' },
    { id: 'monthly', price: 10, duration_days: 30, trial_days: 0, enabled: true, toolAccess: 'all' },
    { id: '3-month', price: 8, save: 20, duration_days: 90, trial_days: 7, enabled: true, toolAccess: 'all' },
    { id: '9-month', price: 7, save: 30, duration_days: 270, trial_days: 14, enabled: true, toolAccess: 'all' },
    { id: 'yearly', price: 6, save: 40, duration_days: 365, trial_days: 30, enabled: true, toolAccess: 'all' },
];

const generateInitialUsers = (): User[] => {
  const initialUsers: User[] = [
    { 
      id: 'admin-1', 
      username: 'aria', 
      passwordHash: simpleHash('thankGOd8west888*#!'), 
      role: 'admin', 
      status: 'active', 
      language: 'fa', 
      phone: '09120000001',
      isPhoneVerified: true, 
      profilePicture: faker.image.avatar(),
      subscription: { planId: 'yearly', expiryDate: new Date(2026, 0, 1).toISOString(), isTrial: false },
      referralCode: 'ADMINREF',
      referralEarnings: 150,
      referredUsersCount: 30,
      reportCount: 0,
      lastCommentTimestamps: [],
      cryptoWalletAddress: `T${faker.string.alphanumeric({ length: 33, casing: 'upper' })}`,
      referredUsers: Array.from({ length: 30 }).map(() => ({ username: faker.internet.userName(), joinDate: faker.date.past().toISOString() })),
    },
    { 
      id: 'mentor-1', 
      username: 'mentor_ali', 
      passwordHash: simpleHash('123'), 
      role: 'mentor', 
      status: 'active', 
      language: 'fa', 
      phone: '09123456789', 
      isPhoneVerified: true,
      profilePicture: faker.image.avatar(),
      subscription: { planId: '9-month', expiryDate: new Date(2025, 8, 1).toISOString(), isTrial: false },
      referralCode: 'MENTORALI',
      referralEarnings: 75,
      referredUsersCount: 15,
      reportCount: 0,
      lastCommentTimestamps: [],
      cryptoWalletAddress: `T${faker.string.alphanumeric({ length: 33, casing: 'upper' })}`,
      referredUsers: Array.from({ length: 15 }).map(() => ({ username: faker.internet.userName(), joinDate: faker.date.past().toISOString() })),
    },
  ];
  for (let i = 0; i < 15; i++) {
    const username = faker.internet.userName().toLowerCase();
    initialUsers.push({
      id: `user-${i}`,
      username: username,
      passwordHash: simpleHash('123'),
      role: 'user',
      status: 'active',
      language: 'en',
      phone: faker.phone.number(),
      isPhoneVerified: false,
      profilePicture: faker.image.avatar(),
      subscription: { planId: 'free', expiryDate: null, isTrial: false },
      referralCode: faker.string.alphanumeric(8).toUpperCase(),
      referralEarnings: 0,
      referredUsersCount: 0,
      reportCount: 0,
      lastCommentTimestamps: [],
      cryptoWalletAddress: `T${faker.string.alphanumeric({ length: 33, casing: 'upper' })}`,
      referredUsers: [],
    });
  }
  return initialUsers;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [currentUser, setCurrentUser] = useState<User | null>(() => {
    const savedUser = sessionStorage.getItem('westnaord-user');
    return savedUser ? JSON.parse(savedUser) : null;
  });
  const [simulatedRole, setSimulatedRole] = useState<UserRole | null>(null);
  const [users, setUsers] = useState<User[]>(() => {
    const savedUsers = sessionStorage.getItem('westnaord-all-users');
    return savedUsers ? JSON.parse(savedUsers) : generateInitialUsers();
  });
  const [reports, setReports] = useState<Report[]>([]);
  const [activityLogs, setActivityLogs] = useState<ActivityLog[]>([]);
  const [subscriptionPlans, setSubscriptionPlans] = useState<SubscriptionPlan[]>(initialSubscriptionPlans);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [smsLogs, setSmsLogs] = useState<SmsLog[]>([]);
  const [referralRewardConfig, setReferralRewardConfig] = useState<ReferralRewardConfig>({ type: 'subscription_days', value: 7 });
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (currentUser) {
      sessionStorage.setItem('westnaord-user', JSON.stringify(currentUser));
    } else {
      sessionStorage.removeItem('westnaord-user');
    }
  }, [currentUser]);

  useEffect(() => {
    sessionStorage.setItem('westnaord-all-users', JSON.stringify(users));
  }, [users]);

  const logActivity = (action: string) => {
    if (currentUser?.role === 'admin') {
      const newLog: ActivityLog = {
        id: Date.now(),
        action,
        adminUsername: currentUser.username,
        timestamp: new Date().toISOString(),
      };
      setActivityLogs(prev => [newLog, ...prev]);
    }
  };

  const login = (username: string, password: string, referralCode?: string) => {
    setError(null);
    const user = users.find(u => u.username.toLowerCase() === username.toLowerCase());
    if (user && user.passwordHash === simpleHash(password)) {
      if (user.status === 'blocked' || user.status === 'temp_blocked') {
        setError('blocked');
        return;
      }
      setCurrentUser(user);
    } else if (!user && username && password) {
      // Simulate signup
      const newUser: User = {
        id: `user-${Date.now()}`,
        username,
        passwordHash: simpleHash(password),
        role: 'user',
        status: 'active',
        language: 'fa',
        isPhoneVerified: false,
        profilePicture: faker.image.avatar(),
        subscription: { planId: 'free', expiryDate: null, isTrial: false },
        referralCode: faker.string.alphanumeric(8).toUpperCase(),
        referralEarnings: 0,
        referredUsersCount: 0,
        reportCount: 0,
        lastCommentTimestamps: [],
        cryptoWalletAddress: `T${faker.string.alphanumeric({ length: 33, casing: 'upper' })}`,
        referredUsers: [],
      };
      
      if (referralCode) {
        simulateReferral(referralCode, newUser.username);
      }

      setUsers(prev => [...prev, newUser]);
      setCurrentUser(newUser);
      logActivity(`New user signed up: ${username}`);
    } else {
      setError('error');
    }
  };

  const logout = () => {
    setCurrentUser(null);
    setSimulatedRole(null);
  };
  
  const updateUser = (userId: string, updates: Partial<User>) => {
    setUsers(prevUsers => prevUsers.map(u => (u.id === userId ? { ...u, ...updates } : u)));
    if (currentUser?.id === userId) {
      setCurrentUser(prev => prev ? { ...prev, ...updates } : null);
    }
    logActivity(`User ${userId} updated: ${JSON.stringify(updates)}`);
  };

  const deleteUser = (userId: string) => {
    setUsers(prevUsers => prevUsers.filter(u => u.id !== userId));
    logActivity(`User ${userId} deleted`);
  };

  const addAdmin = (username: string, password: string) => {
    const newAdmin: User = {
      id: `admin-${Date.now()}`,
      username,
      passwordHash: simpleHash(password),
      role: 'admin',
      status: 'active',
      language: 'fa',
      isPhoneVerified: true,
      profilePicture: faker.image.avatar(),
      subscription: { planId: 'yearly', expiryDate: new Date(2026, 0, 1).toISOString(), isTrial: false },
      referralCode: faker.string.alphanumeric(8).toUpperCase(),
      referralEarnings: 0,
      referredUsersCount: 0,
      reportCount: 0,
      lastCommentTimestamps: [],
      cryptoWalletAddress: `T${faker.string.alphanumeric({ length: 33, casing: 'upper' })}`,
      referredUsers: [],
    };
    setUsers(prev => [...prev, newAdmin]);
    logActivity(`Admin ${username} created`);
  };

  const updateUserCredentials = (userId: string, username: string, password?: string) => {
    setUsers(prevUsers => prevUsers.map(u => {
      if (u.id === userId) {
        const updatedUser = { ...u, username };
        if (password) {
          updatedUser.passwordHash = simpleHash(password);
        }
        if (currentUser?.id === userId) {
            setCurrentUser(updatedUser);
        }
        return updatedUser;
      }
      return u;
    }));
    logActivity(`Credentials updated for user ${userId}`);
  };

  const addReport = (reportedUserId: string, reportedUsername: string, reporterUserId: string, reporterUsername: string, reason: string, targetType: 'post' | 'user' | 'comment', targetId: string) => {
    const newReport: Report = {
      id: Date.now(),
      reportedUserId,
      reportedUsername,
      reporterUserId,
      reporterUsername,
      reason,
      timestamp: new Date().toISOString(),
      status: 'pending',
      targetType,
      targetId,
    };
    
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

    const recentReports = [...reports, newReport].filter(r => 
        r.reportedUserId === reportedUserId && new Date(r.timestamp) > sevenDaysAgo
    );

    const uniqueReporters = new Set(recentReports.map(r => r.reporterUserId));

    if (uniqueReporters.size > 3) {
        updateUser(reportedUserId, { status: 'temp_blocked' });
        logActivity(`User ${reportedUsername} automatically temporarily blocked due to >3 reports in 7 days.`);
    }

    setReports(prev => [newReport, ...prev]);
  };
  
  const reportProfanity = (userId: string, content: string) => {
    const user = users.find(u => u.id === userId);
    if (!user || !currentUser) return;

    addReport(user.id, user.username, currentUser.id, 'SYSTEM', `Profanity detected: "${content.substring(0, 50)}..."`, 'comment', `comment-${Date.now()}`);
    
    setUsers(prevUsers => prevUsers.map(u => {
      if (u.id === userId) {
        return { ...u, reportCount: u.reportCount + 1 };
      }
      return u;
    }));
  };

  const reviewReport = (reportId: number, action: 'dismiss' | 'uphold') => {
    const report = reports.find(r => r.id === reportId);
    if (!report) return;

    if (action === 'dismiss') {
        setReports(prev => prev.map(r => r.id === reportId ? {...r, status: 'reviewed_dismissed'} : r));
        logActivity(`Report ${reportId} for user ${report.reportedUsername} was dismissed.`);
    } else { // uphold
        setReports(prev => prev.map(r => r.id === reportId ? {...r, status: 'reviewed_action_taken'} : r));
        updateUser(report.reportedUserId, { status: 'blocked' });
        logActivity(`Report ${reportId} for user ${report.reportedUsername} was upheld. User blocked.`);
    }
  };

  const addCommentTimestamp = (userId: string) => {
    setUsers(prevUsers => prevUsers.map(u => {
      if (u.id === userId) {
        const now = Date.now();
        const oneDayAgo = now - 24 * 60 * 60 * 1000;
        const recentTimestamps = u.lastCommentTimestamps.filter(ts => ts > oneDayAgo);
        const updatedUser = { ...u, lastCommentTimestamps: [...recentTimestamps, now] };
        if (currentUser?.id === userId) {
          setCurrentUser(updatedUser);
        }
        return updatedUser;
      }
      return u;
    }));
  };

  const updateUserLanguage = (userId: string, language: Language) => {
    setUsers(prev => prev.map(u => u.id === userId ? { ...u, language } : u));
    if (currentUser?.id === userId) {
      setCurrentUser(prev => prev ? { ...prev, language } : null);
    }
  };

  const updateSubscription = (userId: string, planId: SubscriptionPlan['id']) => {
    const plan = subscriptionPlans.find(p => p.id === planId);
    if (!plan) return;

    const expiryDate = new Date();
    if (plan.duration_days !== Infinity) {
      expiryDate.setDate(expiryDate.getDate() + plan.duration_days);
    }
    
    const newSubscription: Subscription = {
      planId,
      expiryDate: plan.duration_days === Infinity ? null : expiryDate.toISOString(),
      isTrial: false,
    };
    
    setUsers(prev => prev.map(u => u.id === userId ? { ...u, subscription: newSubscription } : u));
    if (currentUser?.id === userId) {
      setCurrentUser(prev => prev ? { ...prev, subscription: newSubscription } : null);
    }
    logActivity(`User ${userId} subscribed to ${planId} plan.`);
  };

  const sendOtp = async (userId: string, phone: string): Promise<boolean> => {
    console.log(`Simulating OTP send for user ${userId} to phone ${phone}`);
    updateUser(userId, { phone });
    return new Promise(resolve => setTimeout(() => resolve(true), 1000));
  };

  const verifyOtp = (userId: string, code: string) => {
    if (code === '123456') {
        updateUser(userId, { isPhoneVerified: true });
        logActivity(`Phone number verified for user ${userId}.`);
        return true;
    }
    return false;
  };
  
  const updateProfilePicture = (userId: string, pictureUrl: string) => {
    setUsers(prev => prev.map(u => u.id === userId ? { ...u, profilePicture: pictureUrl } : u));
    if (currentUser?.id === userId) {
      setCurrentUser(prev => prev ? { ...prev, profilePicture: pictureUrl } : null);
    }
  };

  const updateSubscriptionPlan = (planId: SubscriptionPlan['id'], updates: Partial<SubscriptionPlan>) => {
    setSubscriptionPlans(prev => prev.map(p => p.id === planId ? {...p, ...updates} : p));
    logActivity(`Subscription plan ${planId} updated.`);
  };

  const addSubscriptionPlan = (newPlan: SubscriptionPlan) => {
    setSubscriptionPlans(prev => [...prev, newPlan]);
    logActivity(`New subscription plan ${newPlan.id} added.`);
  };

  const simulateReferral = (referralCode: string, newUsername: string) => {
    let success = false;
    setUsers(prev => prev.map(u => {
        if (u.referralCode.toLowerCase() === referralCode.toLowerCase()) {
            success = true;
            const newReferredUser = { username: newUsername, joinDate: new Date().toISOString() };
            return { 
                ...u, 
                referralEarnings: u.referralEarnings + 5, 
                referredUsersCount: u.referredUsersCount + 1,
                referredUsers: [newReferredUser, ...u.referredUsers]
            };
        }
        return u;
    }));
    if (success) {
        logActivity(`Referral code ${referralCode} used successfully by ${newUsername}.`);
    }
    return success;
  };

  const changePassword = (userId: string, oldPass: string, newPass: string) => {
    const user = users.find(u => u.id === userId);
    if (user && user.passwordHash === simpleHash(oldPass)) {
        setUsers(prev => prev.map(u => u.id === userId ? { ...u, passwordHash: simpleHash(newPass)} : u));
        return true;
    }
    return false;
  };

  const addTransaction = (transaction: Omit<Transaction, 'id' | 'timestamp'>) => {
    const newTransaction: Transaction = {
        ...transaction,
        id: faker.string.uuid(),
        timestamp: new Date().toISOString(),
    };
    setTransactions(prev => [newTransaction, ...prev]);
    logActivity(`New transaction recorded for user ${transaction.user_id}`);
  };

  const sendTestSms = (to: string, message: string) => {
    const newLog: SmsLog = {
        id: faker.string.uuid(),
        to,
        message,
        status: 'sent',
        timestamp: new Date().toISOString(),
    };
    setSmsLogs(prev => [newLog, ...prev]);
    logActivity(`Test SMS sent to ${to}`);
  };

  const updateReferralConfig = (config: ReferralRewardConfig) => {
    setReferralRewardConfig(config);
    logActivity(`Referral reward config updated: ${JSON.stringify(config)}`);
  };

  const grantReferralReward = (userId: string) => {
    const user = users.find(u => u.id === userId);
    if (!user) return;

    if (referralRewardConfig.type === 'subscription_days') {
        const currentExpiry = user.subscription.expiryDate ? new Date(user.subscription.expiryDate) : new Date();
        currentExpiry.setDate(currentExpiry.getDate() + referralRewardConfig.value);
        updateUser(userId, { subscription: { ...user.subscription, expiryDate: currentExpiry.toISOString() } });
        logActivity(`Granted ${referralRewardConfig.value} subscription days to user ${user.username}`);
    } else {
        // Credits logic would go here
        logActivity(`Granted ${referralRewardConfig.value} credits to user ${user.username}`);
    }
  };

  return (
    <AuthContext.Provider value={{ 
        currentUser, 
        simulatedRole, 
        users, 
        reports,
        activityLogs,
        subscriptionPlans,
        transactions,
        smsLogs,
        referralRewardConfig,
        error, 
        login, 
        logout, 
        setSimulatedRole,
        updateUser,
        deleteUser,
        addAdmin,
        updateUserCredentials,
        addReport,
        updateUserLanguage,
        addCommentTimestamp,
        updateSubscription,
        sendOtp,
        verifyOtp,
        updateProfilePicture,
        updateSubscriptionPlan,
        addSubscriptionPlan,
        simulateReferral,
        changePassword,
        addTransaction,
        sendTestSms,
        reportProfanity,
        reviewReport,
        updateReferralConfig,
        grantReferralReward
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
PK
     H>[��'��  �     src/contexts/ThemeContext.tsximport React, { createContext, useContext, useEffect, useState } from 'react';

type Theme = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>(() => {
    const saved = localStorage.getItem('westnaord-theme');
    return (saved as Theme) || 'light';
  });

  useEffect(() => {
    localStorage.setItem('westnaord-theme', theme);
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};
PK
     H>[WW��K  K     src/i18n.tsimport i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

import translationEN from './locales/en/translation.json';
import translationFA from './locales/fa/translation.json';
import translationAR from './locales/ar/translation.json';

const resources = {
  en: {
    translation: translationEN,
  },
  fa: {
    translation: translationFA,
  },
  ar: {
    translation: translationAR,
  },
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'en',
    supportedLngs: ['en', 'fa', 'ar'],
    
    detection: {
      order: ['localStorage', 'navigator'],
      caches: ['localStorage'],
    },

    interpolation: {
      escapeValue: false, // react already safes from xss
    },
  });

export default i18n;
PK
     H>[���;=   =      src/index.css@tailwind base;
@tailwind components;
@tailwind utilities;
PK
     H>[               src/lib/PK
     H>[T��K  K     src/lib/profanityFilter.tsimport { Language } from '../App';

export const profanityWarning = {
  en: 'Posting content with offensive words is not allowed. Please edit your message.',
  fa: 'ارسال محتوا با کلمات توهین‌آمیز مجاز نیست. لطفا پیام خود را ویرایش کنید.',
  ar: 'نشر محتوى يحتوي على كلمات مسيئة غير مسموح به. يرجى تعديل رسالتك.',
};

async function getProfanityList(language: Language): Promise<string[]> {
  try {
    const module = await import(`../config/profanity/${language}.json`);
    return module.default.words || [];
  } catch (error) {
    console.error(`Could not load profanity list for language: ${language}`, error);
    return [];
  }
}

// A more advanced check that simulates what a backend might do
export async function isProfane(text: string, language: Language): Promise<boolean> {
  const profanityList = await getProfanityList(language);
  if (profanityList.length === 0) return false;

  // Normalize text: toLowerCase, remove common punctuation
  const normalizedText = text.toLowerCase().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"");
  const words = normalizedText.split(/\s+/);

  // Simple check for now. A real backend would handle leet speak, unicode normalization, etc.
  return words.some(word => profanityList.includes(word));
}
PK
     H>[               src/locales/PK
     H>[               src/locales/ar/PK
     H>[z*�@B  @B     src/locales/ar/translation.json{
  "login": {
    "welcome": "أهلاً بك في منصة النمو الشخصي الخاصة بك",
    "signUpWelcome": "أنشئ حسابك",
    "username": "اسم المستخدم",
    "password": "كلمة المرور",
    "button": "تسجيل الدخول إلى الحساب",
    "signUpButton": "إنشاء حساب",
    "newHere": "جديد هنا؟ أنشئ حسابًا",
    "backToLogin": "هل لديك حساب بالفعل؟ تسجيل الدخول",
    "referralCode": "رمز الإحالة",
    "error": "اسم المستخدم أو كلمة المرور غير صحيحة.",
    "blocked": "تم حظر حسابك."
  },
  "header": {
    "welcome": "أهلاً، {{username}}",
    "menu": "القائمة",
    "switchRole": "تبديل الدور",
    "switchTheme": "تبديل السمة",
    "logout": "تسجيل الخروج",
    "switchLanguage": "تبديل اللغة"
  },
  "roleSwitcher": {
    "title": "تبديل الدور:",
    "user": "مستخدم",
    "mentor": "مرشد",
    "admin": "مدير"
  },
  "languageSwitcher": {
    "title": "اللغة:"
  },
  "sidebar": {
    "menu": "القائمة",
    "version": "الإصدار 3.0.0",
    "dashboard": "لوحة التحكم",
    "userProfile": "الملف الشخصي",
    "subscription": "الاشتراك",
    "mentorPanel": "لوحة المرشد",
    "adminPanel": "لوحة الإدارة",
    "8plan": "خطة 8",
    "lifeCompass": "بوصلة الحياة",
    "visionBoard": "لوحة الرؤية",
    "habitTracker": "متتبع العادات",
    "dailyJournal": "المجلة اليومية",
    "mindMapBuilder": "باني الخرائط الذهنية",
    "swotAnalysis": "تحليل SWOT",
    "timeAudit": "تدقيق الوقت",
    "ikigaiFinder": "مكتشف إيكيجاي",
    "energyTracker": "متتبع الطاقة",
    "focusMatrix": "مصفوفة التركيز",
    "gratitudeJournal": "مجلة الامتنان",
    "moodTracker": "متتبع المزاج",
    "goalPyramid": "هرم الأهداف",
    "skillMap": "خريطة المهارات",
    "learningPath": "مسار التعلم",
    "moneyPlanner": "مخطط المال",
    "careerPathway": "المسار الوظيفي",
    "strengthsTest": "اختبار نقاط القوة",
    "personalityTest": "اختبار الشخصية",
    "loveRelationship": "أداة العلاقات",
    "healthTracker": "متتبع الصحة",
    "meditationGuide": "دليل التأمل",
    "lawOfAttraction": "قانون الجذب",
    "challengeCreator": "صانع التحديات",
    "communityForum": "منتدى المجتمع",
    "achievementWall": "جدار الإنجازات",
    "monthlyExam": "الامتحان الشهري",
    "aiCoach": "مدرب الذكاء الاصطناعي",
    "progressTimeline": "الجدول الزمني للتقدم",
    "milestonePlanner": "مخطط المعالم",
    "resilienceTest": "اختبار المرونة",
    "happinessIndex": "مؤشر السعادة",
    "settings": "إعدادات النظام",
    "beliefs": "أداة المعتقدات"
  },
  "adminPanel": {
    "title": "لوحة الإدارة",
    "tabs": {
      "userManagement": "إدارة المستخدمين",
      "adminManagement": "إدارة المديرين",
      "forumManagement": "إدارة المنتدى",
      "reports": "تقارير المخالفات",
      "logs": "سجلات النشاط",
      "subscriptions": "الاشتراكات",
      "transactions": "المعاملات",
      "tools": "الأدوات",
      "smsGateway": "بوابة الرسائل",
      "profanityFilter": "مرشح الكلمات",
      "referrals": "الإحالات"
    },
    "searchPlaceholder": "البحث عن طريق اسم المستخدم أو رقم الهاتف...",
    "table": {
      "user": "المستخدم",
      "role": "الدور",
      "status": "الحالة",
      "actions": "الإجراءات",
      "subscription": "الاشتراك",
      "phoneVerified": "الهاتف موثق"
    },
    "actions": {
      "promote": "الترقية إلى مرشد",
      "demote": "تخفيض إلى مستخدم",
      "block": "حظر",
      "unblock": "إلغاء الحظر",
      "delete": "حذف",
      "addAdmin": "إضافة مدير جديد",
      "edit": "تعديل"
    },
    "modal": {
      "confirmTitle": "تأكيد الإجراء",
      "confirmMessage": "هل أنت متأكد من أنك تريد تنفيذ الإجراء '{{action}}' للمستخدم '{{username}}'؟",
      "addAdminTitle": "إضافة مدير جديد",
      "username": "اسم المستخدم",
      "password": "كلمة المرور"
    },
    "reports": {
      "reported": "المستخدم المُبلغ عنه",
      "reporter": "المُبلغ",
      "reason": "السبب",
      "warn": "تحذير",
      "blockUser": "حظر المستخدم",
      "noReports": "لا توجد تقارير لعرضها."
    },
    "logs": {
      "by": "بواسطة"
    },
    "forum": {
      "filterLanguage": "تصفية حسب اللغة",
      "allLanguages": "كل اللغات",
      "moderate": "إشراف",
      "deletePost": "حذف المشاركة",
      "adminReply": "رد المدير"
    },
    "subscriptions": {
      "managePlans": "إدارة خطط الاشتراك",
      "addNewPlan": "إضافة خطة جديدة",
      "planId": "معرف الخطة",
      "planPrice": "السعر",
      "planDurationDays": "المدة (أيام)",
      "planTrialDays": "فترة تجريبية (أيام)",
      "planEnabled": "مفعل",
      "basic": "أساسي",
      "all": "الكل",
      "addPlan": "إضافة خطة"
    },
    "transactions": {
        "user": "المستخدم",
        "plan": "الخطة",
        "amount": "المبلغ",
        "status": "الحالة",
        "reference": "المرجع",
        "date": "التاريخ"
    },
    "sms": {
      "sendTest": "إرسال رسالة اختبار",
      "phoneNumber": "رقم الهاتف",
      "message": "الرسالة",
      "send": "إرسال",
      "logsTitle": "سجلات الرسائل",
      "table": {
        "to": "إلى",
        "message": "الرسالة",
        "status": "الحالة",
        "timestamp": "الوقت"
      }
    },
    "profanity": {
      "title": "محرر الكلمات المحظورة",
      "description": "قم بتعديل قائمة الكلمات المحظورة للغة المحددة. يجب أن تكون كل كلمة في سطر جديد.",
      "save": "حفظ القائمة"
    },
    "referrals": {
      "configTitle": "تكوين مكافأة الإحالة",
      "rewardType": "نوع المكافأة",
      "subscriptionDays": "أيام الاشتراك",
      "credits": "أرصدة (غير منفذة)",
      "rewardValue": "قيمة المكافأة",
      "saveConfig": "حفظ التكوين",
      "configSaved": "تم حفظ تكوين الإحالة!",
      "manualGrant": "منح مكافأة يدوي",
      "manualGrantDesc": "منح مكافأة الإحالة المكونة يدويًا لمستخدم.",
      "grantReward": "منح المكافأة"
    }
  },
  "communityForum": {
    "title": "منتدى المجتمع",
    "description": "مكان لتبادل الخبرات وطرح الأسئلة ودعم بعضنا البعض.",
    "inputPlaceholder": "بماذا تفكر؟",
    "reportSuccess": "تم إرسال بلاغ ضد المستخدم {{user}}.",
    "replyPlaceholder": "اكتب رداً...",
    "send": "إرسال",
    "showReplies": "عرض {{count}} ردود",
    "hideReplies": "إخفاء الردود",
    "justNow": "الآن",
    "rateLimitError": "لقد وصلت إلى الحد الأقصى للتعليقات اليوم (3 تعليقات كل 24 ساعة).",
    "verificationNeeded": "يجب عليك توثيق رقم هاتفك للنشر في المنتدى."
  },
  "modal": {
    "cancel": "إلغاء",
    "confirm": "تأكيد",
    "notice": "إشعار"
  },
  "comingSoon": {
    "title": "أداة {{tool}}",
    "description": "هذا القسم قيد التطوير وسيكون متاحًا قريبًا. يعمل فريق Westnaord بجد لتزويدك بأفضل تجربة."
  },
  "settings": {
    "title": "إعدادات النظام",
    "credentials": {
      "title": "تغيير بيانات تسجيل الدخول",
      "description": "قم بتغيير بيانات اعتماد تسجيل الدخول لحساب المسؤول هنا.",
      "username": "اسم المستخدم",
      "newPassword": "كلمة المرور الجديدة",
      "newPasswordPlaceholder": "اتركه فارغًا لعدم التغيير",
      "confirmPassword": "تأكيد كلمة المرور الجديدة",
      "save": "حفظ التغييرات"
    },
    "tools": {
      "title": "إدارة الأدوات (قريباً)",
      "description": "في هذا القسم، ستتمكن من تمكين أو تعطيل الأدوات المختلفة لأدوار المستخدمين المختلفة."
    },
    "api": {
      "title": "مفاتيح API",
      "sms": "مفتاح API للرسائل القصيرة",
      "payment": "مفتاح API لبوابة الدفع"
    },
    "modal": {
      "mismatch": "كلمات المرور غير متطابقة.",
      "success": "تم تحديث المعلومات بنجاح."
    }
  },
  "userProfile": {
    "title": "الملف الشخصي",
    "personalInfo": {
      "title": "المعلومات الشخصية",
      "username": "اسم المستخدم",
      "phone": "رقم الهاتف",
      "verifiedStatus": "الحالة",
      "verified": "موثق",
      "notVerified": "غير موثق",
      "changePassword": "تغيير كلمة المرور"
    },
    "subscription": {
      "title": "حالة الاشتراك",
      "currentPlan": "الخطة الحالية",
      "expiry": "تاريخ الانتهاء",
      "noExpiry": "لا يوجد",
      "manage": "إدارة الاشتراك"
    },
    "referral": {
      "title": "نظام الإحالة",
      "yourLink": "رابط الإحالة الخاص بك",
      "copy": "نسخ",
      "copied": "تم النسخ!",
      "earnings": "الأرباح الإجمالية",
      "referredUsers": "المستخدمون المحالون",
      "referredUsersList": "قائمة المستخدمين المحالين",
      "joinDate": "تاريخ الانضمام",
      "noReferredUsers": "لم تقم بإحالة أي مستخدمين بعد."
    },
    "wallet": {
      "title": "محفظة العملات الرقمية",
      "address": "عنوان الإيداع الخاص بك",
      "description": "استخدم هذا العنوان لتمويل حسابك باستخدام USDT."
    },
    "changePic": "تغيير الصورة",
    "verification": {
      "title": "توثيق رقم الهاتف",
      "enterPhone": "الرجاء إدخال رقم هاتفك لتلقي رمز التحقق.",
      "sendCode": "إرسال الرمز",
      "codeSent": "تم إرسال رمز التحقق إلى {{phone}}. الرجاء إدخاله أدناه. (الرمز هو 123456)",
      "resend": "إعادة إرسال",
      "verifyNow": "توثيق الآن",
      "success": "تم توثيق رقم الهاتف بنجاح!",
      "failure": "رمز التحقق غير صحيح.",
      "sendFailure": "فشل إرسال الرمز. الرجاء المحاولة مرة أخرى."
    },
    "password": {
      "title": "تغيير كلمة المرور",
      "old": "كلمة المرور القديمة",
      "new": "كلمة المرور الجديدة",
      "confirm": "تأكيد كلمة المرور الجديدة",
      "success": "تم تغيير كلمة المرور بنجاح!",
      "failure": "كلمة المرور القديمة غير صحيحة."
    }
  },
  "subscriptionPanel": {
    "title": "اختر خطتك",
    "description": "افتح جميع الأدوات والميزات لتسريع نموك.",
    "monthly": "شهري",
    "3-month": "3 أشهر",
    "9-month": "9 أشهر",
    "yearly": "سنوي",
    "free": "مجاني",
    "pricePerMonth": "/ شهر",
    "save": "وفر {{percent}}%",
    "choosePlan": "اختر الخطة",
    "currentPlan": "الخطة الحالية",
    "paymentMethod": "اختر طريقة الدفع",
    "zarinpal": "زرين بال (لإيران)",
    "crypto": "عملة مشفرة (USDT)",
    "feature1": "كل 33+ أداة",
    "feature2": "مدرب الذكاء الاصطناعي",
    "feature3": "تحليلات متقدمة",
    "trial": "فترة تجريبية مجانية لمدة {{days}} يومًا",
    "confirmPlan": "أنت تختار خطة {{plan}}."
  },
  "paymentSimulation": {
    "back": "رجوع",
    "zarinpalTitle": "محاكاة دفع زرين بال",
    "zarinpalDesc": "يتم توجيهك إلى بوابة دفع زرين بال...",
    "zarinpalSuccess": "تم الدفع بنجاح!",
    "zarinpalReturn": "العودة إلى ويستنورد",
    "cryptoTitle": "الدفع بالعملات المشفرة (USDT {{network}})",
    "cryptoDesc": "يرجى إرسال المبلغ المطلوب إلى العنوان أدناه. سيتم تفعيل اشتراكك عند التأكيد.",
    "yourWallet": "عنوان الإيداع الفريد الخاص بك:",
    "copyAddress": "نسخ العنوان",
    "cryptoSimulation": "هذه محاكاة. سيتم الكشف عن دفعة ناجحة تلقائيًا.",
    "cryptoConfirm": "لقد قمت بالدفع",
    "verifying": "يتم التحقق من الدفع على البلوك تشين...",
    "paymentConfirmed": "تم تأكيد الدفع!",
    "sendOnlyUSDT": "تحذير: أرسل USDT فقط على شبكة {{network}} إلى هذا العنوان. سيؤدي إرسال أي أصل آخر إلى خسارة دائمة."
  },
  "8plan": {
    "title": "خطة 8 - بوابة الصحوة",
    "description": "صمم خطتك لمدة 6-8 أشهر في 5 أبعاد رئيسية للحياة من خلال الإجابة على 30 سؤالًا علميًا.",
    "progress": "التقدم العام",
    "areas": {
      "title": "مجالات الحياة",
      "health": "الصحة الجسدية والعقلية",
      "healthDesc": "التمارين، التغذية، النوم، الصحة العقلية",
      "career": "الحياة المهنية والأعمال",
      "careerDesc": "النمو الوظيفي، المهارات، الدخل",
      "relationships": "العلاقات الاجتماعية",
      "relationshipsDesc": "الأسرة، الأصدقاء، الشبكة الاجتماعية",
      "personal": "النمو الشخصي",
      "personalDesc": "التعلم، المهارات الناعمة، اكتشاف الذات",
      "financial": "المالية والاستثمار",
      "financialDesc": "الادخار، الاستثمار، الأمان المالي"
    },
    "question": "سؤال",
    "of": "من",
    "questions": {
      "q1": "قيم وضعك الحالي في هذا المجال من 1 إلى 10 واشرح سبب هذه الدرجة.",
      "q2": "ما هي أكبر تحدياتك وعقباتك في هذا المجال؟ (3 عناصر على الأقل)",
      "q3": "ما هو هدفك الرئيسي القابل للقياس للأشهر 6-8 القادمة في هذا المجال؟",
      "q4": "ما هي الإجراءات المحددة والعملية التي تخطط لاتخاذها لتحقيق هذا الهدف؟ (5 إجراءات على الأقل)",
      "q5": "كيف وبأي مقاييس ستقيس تقدمك؟",
      "q6": "ما هي الموارد أو الأدوات أو الدعم الذي تحتاجه للنجاح؟"
    },
    "placeholder": "اكتب إجابتك المفصلة والدقيقة هنا...",
    "characters": "حرف",
    "prev": "السابق",
    "next": "التالي",
    "complete": "أكمل واعرض التحليل",
    "analysis": {
      "title": "تحليل خطة 8 الخاصة بك",
      "description": "هذه هي خريطة طريقك لمدة 6-8 أشهر. احفظها والتزم بها.",
      "currentScore": "الدرجة الحالية",
      "mainGoal": "الهدف الرئيسي",
      "keyActions": "الإجراءات الرئيسية",
      "biggestChallenges": "أكبر التحديات",
      "locked": "تم الآن حفظ خطة 8 الخاصة بك وقفلها."
    }
  },
  "profanity": {
    "warning": "نشر محتوى يحتوي على كلمات مسيئة غير مسموح به. يرجى تعديل رسالتك."
  },
  "yes": "نعم",
  "no": "لا"
}
PK
     H>[               src/locales/en/PK
     H>[��D�B5  B5     src/locales/en/translation.json{
  "login": {
    "welcome": "Welcome to your personal growth platform",
    "signUpWelcome": "Create your account",
    "username": "Username",
    "password": "Password",
    "button": "Login to Account",
    "signUpButton": "Create Account",
    "newHere": "New here? Create an account",
    "backToLogin": "Already have an account? Login",
    "referralCode": "Referral Code",
    "error": "Incorrect username or password.",
    "blocked": "Your account has been blocked."
  },
  "header": {
    "welcome": "Welcome, {{username}}",
    "menu": "Menu",
    "switchRole": "Switch Role",
    "switchTheme": "Switch Theme",
    "logout": "Logout",
    "switchLanguage": "Switch Language"
  },
  "roleSwitcher": {
    "title": "Switch Role:",
    "user": "User",
    "mentor": "Mentor",
    "admin": "Admin"
  },
  "languageSwitcher": {
    "title": "Language:"
  },
  "sidebar": {
    "menu": "Menu",
    "version": "3.0.0",
    "dashboard": "Dashboard",
    "userProfile": "User Profile",
    "subscription": "Subscription",
    "mentorPanel": "Mentor Panel",
    "adminPanel": "Admin Panel",
    "8plan": "8Plan",
    "lifeCompass": "Life Compass",
    "visionBoard": "Vision Board",
    "habitTracker": "Habit Tracker",
    "dailyJournal": "Daily Journal",
    "mindMapBuilder": "Mind Map Builder",
    "swotAnalysis": "SWOT Analysis",
    "timeAudit": "Time Audit",
    "ikigaiFinder": "Ikigai Finder",
    "energyTracker": "Energy Tracker",
    "focusMatrix": "Focus Matrix",
    "gratitudeJournal": "Gratitude Journal",
    "moodTracker": "Mood Tracker",
    "goalPyramid": "Goal Pyramid",
    "skillMap": "Skill Map",
    "learningPath": "Learning Path",
    "moneyPlanner": "Money Planner",
    "careerPathway": "Career Pathway",
    "strengthsTest": "Strengths Test",
    "personalityTest": "Personality Test",
    "loveRelationship": "Love & Relationship",
    "healthTracker": "Health Tracker",
    "meditationGuide": "Meditation Guide",
    "lawOfAttraction": "Law of Attraction",
    "challengeCreator": "Challenge Creator",
    "communityForum": "Community Forum",
    "achievementWall": "Achievement Wall",
    "monthlyExam": "Monthly Exam",
    "aiCoach": "AI Coach",
    "progressTimeline": "Progress Timeline",
    "milestonePlanner": "Milestone Planner",
    "resilienceTest": "Resilience Test",
    "happinessIndex": "Happiness Index",
    "settings": "System Settings",
    "beliefs": "Beliefs Tool"
  },
  "adminPanel": {
    "title": "Admin Panel",
    "tabs": {
      "userManagement": "User Management",
      "adminManagement": "Admin Management",
      "forumManagement": "Forum Management",
      "reports": "Violation Reports",
      "logs": "Activity Logs",
      "subscriptions": "Subscriptions",
      "transactions": "Transactions",
      "tools": "Tools",
      "smsGateway": "SMS Gateway",
      "profanityFilter": "Profanity Filter",
      "referrals": "Referrals"
    },
    "searchPlaceholder": "Search by username or phone number...",
    "table": {
      "user": "User",
      "role": "Role",
      "status": "Status",
      "actions": "Actions",
      "subscription": "Subscription",
      "phoneVerified": "Phone Verified"
    },
    "status": {
      "active": "Active",
      "blocked": "Blocked",
      "temp_blocked": "Temp. Blocked"
    },
    "actions": {
      "promote": "Promote to Mentor",
      "demote": "Demote to User",
      "block": "Block",
      "unblock": "Unblock",
      "delete": "Delete",
      "addAdmin": "Add New Admin",
      "edit": "Edit"
    },
    "modal": {
      "confirmTitle": "Confirm Action",
      "confirmMessage": "Are you sure you want to perform the action '{{action}}' for user '{{username}}'?",
      "addAdminTitle": "Add New Admin",
      "username": "Username",
      "password": "Password"
    },
    "reports": {
      "reported": "Reported User",
      "reporter": "Reporter",
      "reason": "Reason",
      "status": "Status",
      "pending": "Pending",
      "dismissed": "Dismissed",
      "actionTaken": "Action Taken",
      "autoBlocked": "Auto Blocked",
      "noReports": "No reports to display.",
      "dismiss": "Dismiss",
      "upholdAndBlock": "Uphold & Block",
      "liftBlock": "Lift Block"
    },
    "logs": {
      "by": "by"
    },
    "forum": {
      "filterLanguage": "Filter by Language",
      "allLanguages": "All Languages",
      "moderate": "Moderate",
      "deletePost": "Delete Post",
      "adminReply": "Admin Reply"
    },
    "subscriptions": {
      "managePlans": "Manage Subscription Plans",
      "addNewPlan": "Add New Plan",
      "planId": "Plan ID",
      "planPrice": "Price",
      "planDurationDays": "Duration (Days)",
      "planTrialDays": "Trial (Days)",
      "planEnabled": "Enabled",
      "basic": "Basic",
      "all": "All",
      "addPlan": "Add Plan"
    },
    "transactions": {
        "user": "User",
        "plan": "Plan",
        "amount": "Amount",
        "status": "Status",
        "reference": "Reference",
        "date": "Date"
    },
    "sms": {
      "sendTest": "Send Test SMS",
      "phoneNumber": "Phone Number",
      "message": "Message",
      "send": "Send",
      "logsTitle": "SMS Logs",
      "table": {
        "to": "To",
        "message": "Message",
        "status": "Status",
        "timestamp": "Timestamp"
      }
    },
    "profanity": {
      "title": "Banned Words Editor",
      "description": "Edit the list of banned words for the selected language. Each word should be on a new line.",
      "save": "Save List"
    },
    "referrals": {
      "configTitle": "Referral Reward Configuration",
      "rewardType": "Reward Type",
      "subscriptionDays": "Subscription Days",
      "credits": "Credits (Not Implemented)",
      "rewardValue": "Reward Value",
      "saveConfig": "Save Configuration",
      "configSaved": "Referral configuration saved!",
      "manualGrant": "Manual Reward Grant",
      "manualGrantDesc": "Manually grant the configured referral reward to a user.",
      "grantReward": "Grant Reward"
    }
  },
  "communityForum": {
    "title": "Community Forum",
    "description": "A place to share experiences, ask questions, and support each other.",
    "inputPlaceholder": "What's on your mind?",
    "reportSuccess": "Report for user {{user}} has been submitted.",
    "replyPlaceholder": "Write a reply...",
    "send": "Send",
    "showReplies": "Show {{count}} replies",
    "hideReplies": "Hide replies",
    "justNow": "Just now",
    "rateLimitError": "You have reached the comment limit for today (3 comments per 24 hours).",
    "verificationNeeded": "You must verify your phone number to post in the forum."
  },
  "modal": {
    "cancel": "Cancel",
    "confirm": "Confirm",
    "notice": "Notice"
  },
  "comingSoon": {
    "title": "{{tool}} Tool",
    "description": "This section is under development and will be available soon. The Westnaord team is working hard to provide you with the best experience."
  },
  "settings": {
    "title": "System Settings",
    "credentials": {
      "title": "Change Login Credentials",
      "description": "Change the admin account login credentials here.",
      "username": "Username",
      "newPassword": "New Password",
      "newPasswordPlaceholder": "Leave blank to keep unchanged",
      "confirmPassword": "Confirm New Password",
      "save": "Save Changes"
    },
    "tools": {
      "title": "Tool Management (Soon)",
      "description": "In this section, you will be able to enable or disable different tools for different user roles."
    },
    "api": {
      "title": "API Keys",
      "sms": "SMS API Key (FarazSMS)",
      "payment": "Payment Gateway API Key"
    },
    "modal": {
      "mismatch": "Passwords do not match.",
      "success": "Information updated successfully."
    }
  },
  "userProfile": {
    "title": "User Profile",
    "personalInfo": {
      "title": "Personal Information",
      "username": "Username",
      "phone": "Phone Number",
      "verifiedStatus": "Status",
      "verified": "Verified",
      "notVerified": "Not Verified",
      "changePassword": "Change Password"
    },
    "subscription": {
      "title": "Subscription Status",
      "currentPlan": "Current Plan",
      "expiry": "Expires on",
      "noExpiry": "No Expiry",
      "manage": "Manage Subscription"
    },
    "referral": {
      "title": "Referral System",
      "yourLink": "Your Referral Link",
      "copy": "Copy",
      "copied": "Copied!",
      "earnings": "Total Earnings",
      "referredUsers": "Referred Users",
      "referredUsersList": "Referred Users List",
      "joinDate": "Join Date",
      "noReferredUsers": "You haven't referred any users yet."
    },
    "wallet": {
      "title": "Crypto Wallet",
      "address": "Your Deposit Address",
      "description": "Use this address to fund your account with USDT."
    },
    "changePic": "Change Picture",
    "verification": {
      "title": "Verify Phone Number",
      "enterPhone": "Please enter your phone number to receive a verification code.",
      "sendCode": "Send Code",
      "codeSent": "A verification code has been sent to {{phone}}. Please enter it below. (The code is 123456)",
      "resend": "Resend",
      "verifyNow": "Verify Now",
      "success": "Phone number verified successfully!",
      "failure": "Incorrect verification code.",
      "sendFailure": "Failed to send code. Please try again."
    },
    "password": {
      "title": "Change Password",
      "old": "Old Password",
      "new": "New Password",
      "confirm": "New Password",
      "success": "Password changed successfully!",
      "failure": "Incorrect old password."
    }
  },
  "subscriptionPanel": {
    "title": "Choose Your Plan",
    "description": "Unlock all tools and features to accelerate your growth.",
    "monthly": "Monthly",
    "3-month": "3-Month",
    "9-month": "9-Month",
    "yearly": "Yearly",
    "free": "Free",
    "pricePerMonth": "/ month",
    "save": "Save {{percent}}%",
    "choosePlan": "Choose Plan",
    "currentPlan": "Current Plan",
    "paymentMethod": "Select Payment Method",
    "zarinpal": "ZarinPal (for Iran)",
    "crypto": "Cryptocurrency (USDT)",
    "feature1": "All 33+ Tools",
    "feature2": "AI Coach",
    "feature3": "Advanced Analytics",
    "trial": "{{days}}-day free trial",
    "confirmPlan": "You are choosing the {{plan}} plan."
  },
  "paymentSimulation": {
    "back": "Back",
    "zarinpalTitle": "ZarinPal Payment Simulation",
    "zarinpalDesc": "You are being redirected to ZarinPal...",
    "zarinpalSuccess": "Payment Successful!",
    "zarinpalReturn": "Return to Westnaord",
    "cryptoTitle": "Crypto Payment (USDT {{network}})",
    "cryptoDesc": "Please send the required amount to the address below. Your subscription will be activated upon confirmation.",
    "yourWallet": "Your unique deposit address:",
    "copyAddress": "Copy Address",
    "cryptoSimulation": "This is a simulation. A successful payment will be detected automatically.",
    "cryptoConfirm": "I have made the payment",
    "verifying": "Verifying Payment on Blockchain...",
    "paymentConfirmed": "Payment Confirmed!",
    "sendOnlyUSDT": "Warning: Send only USDT on the {{network}} network to this address. Sending any other asset will result in permanent loss."
  },
  "8plan": {
    "title": "8Plan - Gateway to Awakening",
    "description": "Design your 6-8 month plan in 5 key life dimensions by answering 30 scientific questions.",
    "progress": "Overall Progress",
    "areas": {
      "title": "Life Areas",
      "health": "Physical & Mental Health",
      "healthDesc": "Exercise, nutrition, sleep, mental health",
      "career": "Career & Business",
      "careerDesc": "Career growth, skills, income",
      "relationships": "Social Relationships",
      "relationshipsDesc": "Family, friends, social network",
      "personal": "Personal Growth",
      "personalDesc": "Learning, soft skills, self-discovery",
      "financial": "Finance & Investment",
      "financialDesc": "Savings, investment, financial security"
    },
    "question": "Question",
    "of": "of",
    "questions": {
      "q1": "Rate your current situation in this area from 1 to 10 and explain the reason for this score.",
      "q2": "What are your biggest challenges and obstacles in this area? (at least 3 items)",
      "q3": "What is your main, measurable goal for the next 6-8 months in this area?",
      "q4": "What specific and practical actions do you plan to take to achieve this goal? (at least 5 actions)",
      "q5": "How and with what metrics will you measure your progress?",
      "q6": "What resources, tools, or support do you need to succeed?"
    },
    "placeholder": "Write your detailed and precise answer here...",
    "characters": "characters",
    "prev": "Previous",
    "next": "Next",
    "complete": "Complete & View Analysis",
    "analysis": {
      "title": "Your 8Plan Analysis",
      "description": "This is your 6-8 month roadmap. Save it and commit to it.",
      "currentScore": "Current Score",
      "mainGoal": "Main Goal",
      "keyActions": "Key Actions",
      "biggestChallenges": "Biggest Challenges",
      "locked": "Your 8Plan is now saved and locked."
    },
    "modal": {
      "title": "Confirm Plan Finalization",
      "body": "Are you sure you want to finalize your plan? After confirming, you will no longer be able to edit your answers. This action is necessary for your commitment to the plan."
    }
  },
  "profanity": {
    "warning": "Posting content with offensive words is not allowed. Please edit your message."
  },
  "yes": "Yes",
  "no": "No"
}
PK
     H>[               src/locales/fa/PK
     H>[��r�D  �D     src/locales/fa/translation.json{
  "login": {
    "welcome": "به پلتفرم رشد فردی خود خوش آمدید",
    "signUpWelcome": "حساب کاربری خود را بسازید",
    "username": "نام کاربری",
    "password": "رمز عبور",
    "button": "ورود به حساب کاربری",
    "signUpButton": "ایجاد حساب",
    "newHere": "کاربر جدید هستید؟ ثبت نام کنید",
    "backToLogin": "حساب کاربری دارید؟ وارد شوید",
    "referralCode": "کد معرف",
    "error": "نام کاربری یا رمز عبور اشتباه است.",
    "blocked": "حساب کاربری شما مسدود شده است."
  },
  "header": {
    "welcome": "خوش آمدید، {{username}}",
    "menu": "منو",
    "switchRole": "تغییر نقش",
    "switchTheme": "تغییر تم",
    "logout": "خروج",
    "switchLanguage": "تغییر زبان"
  },
  "roleSwitcher": {
    "title": "تغییر نقش:",
    "user": "کاربر",
    "mentor": "مربی",
    "admin": "مدیر"
  },
  "languageSwitcher": {
    "title": "زبان:"
  },
  "sidebar": {
    "menu": "منو",
    "version": "نسخه ۳.۰.۰",
    "dashboard": "داشبورد",
    "userProfile": "پروفایل کاربری",
    "subscription": "اشتراک",
    "mentorPanel": "پنل مربی",
    "adminPanel": "پنل مدیریت",
    "8plan": "8Plan",
    "lifeCompass": "قطب‌نمای زندگی",
    "visionBoard": "تابلوی آرزوها",
    "habitTracker": "پیگیری عادت‌ها",
    "dailyJournal": "دفترچه روزانه",
    "mindMapBuilder": "سازنده نقشه ذهنی",
    "swotAnalysis": "تحلیل SWOT",
    "timeAudit": "آنالیز زمان",
    "ikigaiFinder": "کشف ایکیگای",
    "energyTracker": "پیگیری انرژی",
    "focusMatrix": "ماتریس تمرکز",
    "gratitudeJournal": "دفترچه شکرگزاری",
    "moodTracker": "پیگیری خلق و خو",
    "goalPyramid": "هرم اهداف",
    "skillMap": "نقشه مهارت‌ها",
    "learningPath": "مسیر یادگیری",
    "moneyPlanner": "برنامه مالی شخصی",
    "careerPathway": "مسیر شغلی",
    "strengthsTest": "تست نقاط قوت",
    "personalityTest": "تست شخصیت",
    "loveRelationship": "ابزار روابط عاطفی",
    "healthTracker": "پیگیری سبک زندگی",
    "meditationGuide": "راهنمای مدیتیشن",
    "lawOfAttraction": "قانون جذب",
    "challengeCreator": "سازنده چالش‌ها",
    "communityForum": "انجمن گفتگو",
    "achievementWall": "دیوار دستاوردها",
    "monthlyExam": "آزمون ماهانه",
    "aiCoach": "مربی هوش مصنوعی",
    "progressTimeline": "تایم‌لاین پیشرفت",
    "milestonePlanner": "برنامه‌ریزی نقاط عطف",
    "resilienceTest": "تست تاب‌آوری",
    "happinessIndex": "شاخص خوشبختی",
    "settings": "تنظیمات سیستم",
    "beliefs": "ابزار باورسازی"
  },
  "adminPanel": {
    "title": "پنل مدیریت",
    "tabs": {
      "userManagement": "مدیریت کاربران",
      "adminManagement": "مدیریت ادمین‌ها",
      "forumManagement": "مدیریت انجمن",
      "reports": "گزارشات تخلف",
      "logs": "لاگ فعالیت‌ها",
      "subscriptions": "اشتراک‌ها",
      "transactions": "تراکنش‌ها",
      "tools": "ابزارها",
      "smsGateway": "درگاه پیامک",
      "profanityFilter": "فیلتر کلمات",
      "referrals": "معرفی‌ها"
    },
    "searchPlaceholder": "جستجو بر اساس نام کاربری یا شماره تلفن...",
    "table": {
      "user": "کاربر",
      "role": "نقش",
      "status": "وضعیت",
      "actions": "عملیات",
      "subscription": "اشتراک",
      "phoneVerified": "تلفن تایید شده"
    },
    "status": {
      "active": "فعال",
      "blocked": "مسدود دائم",
      "temp_blocked": "مسدود موقت"
    },
    "actions": {
      "promote": "ارتقا به مربی",
      "demote": "تنزل به کاربر",
      "block": "مسدود",
      "unblock": "رفع انسداد",
      "delete": "حذف",
      "addAdmin": "افزودن مدیر جدید",
      "edit": "ویرایش"
    },
    "modal": {
      "confirmTitle": "تایید عملیات",
      "confirmMessage": "آیا از انجام عملیات '{{action}}' برای کاربر '{{username}}' مطمئن هستید؟",
      "addAdminTitle": "افزودن مدیر جدید",
      "username": "نام کاربری",
      "password": "رمز عبور"
    },
    "reports": {
      "reported": "کاربر گزارش شده",
      "reporter": "گزارش دهنده",
      "reason": "دلیل",
      "status": "وضعیت",
      "pending": "در انتظار بررسی",
      "dismissed": "رد شده",
      "actionTaken": "اقدام شده",
      "autoBlocked": "مسدود خودکار",
      "noReports": "هیچ گزارشی برای نمایش وجود ندارد.",
      "dismiss": "رد کردن",
      "upholdAndBlock": "تایید و مسدود",
      "liftBlock": "رفع انسداد"
    },
    "logs": {
      "by": "توسط"
    },
    "forum": {
      "filterLanguage": "فیلتر بر اساس زبان",
      "allLanguages": "همه زبان‌ها",
      "moderate": "مدیریت",
      "deletePost": "حذف پست",
      "adminReply": "پاسخ مدیر"
    },
    "subscriptions": {
      "managePlans": "مدیریت طرح‌های اشتراک",
      "addNewPlan": "افزودن طرح جدید",
      "planId": "شناسه طرح",
      "planPrice": "قیمت",
      "planDurationDays": "مدت (روز)",
      "planTrialDays": "آزمایشی (روز)",
      "planEnabled": "فعال",
      "basic": "پایه",
      "all": "همه",
      "addPlan": "افزودن طرح"
    },
    "transactions": {
        "user": "کاربر",
        "plan": "طرح",
        "amount": "مبلغ",
        "status": "وضعیت",
        "reference": "کد پیگیری",
        "date": "تاریخ"
    },
    "sms": {
      "sendTest": "ارسال پیامک تستی",
      "phoneNumber": "شماره تلفن",
      "message": "متن پیام",
      "send": "ارسال",
      "logsTitle": "لاگ پیامک‌ها",
      "table": {
        "to": "به",
        "message": "پیام",
        "status": "وضعیت",
        "timestamp": "زمان"
      }
    },
    "profanity": {
      "title": "ویرایشگر کلمات ممنوعه",
      "description": "لیست کلمات ممنوعه برای زبان انتخاب شده را ویرایش کنید. هر کلمه باید در یک خط جدید باشد.",
      "save": "ذخیره لیست"
    },
    "referrals": {
      "configTitle": "تنظیمات پاداش معرفی",
      "rewardType": "نوع پاداش",
      "subscriptionDays": "روز اشتراک",
      "credits": "اعتبار (پیاده‌سازی نشده)",
      "rewardValue": "مقدار پاداش",
      "saveConfig": "ذخیره تنظیمات",
      "configSaved": "تنظیمات معرفی با موفقیت ذخیره شد!",
      "manualGrant": "اعطای پاداش دستی",
      "manualGrantDesc": "پاداش معرفی تنظیم شده را به صورت دستی به یک کاربر اعطا کنید.",
      "grantReward": "اعطای پاداش"
    }
  },
  "communityForum": {
    "title": "انجمن گفتگو",
    "description": "مکانی برای به اشتراک گذاشتن تجربیات، پرسش و پاسخ و حمایت از یکدیگر.",
    "inputPlaceholder": "چه چیزی در ذهن دارید؟",
    "reportSuccess": "گزارش تخلف برای کاربر {{user}} ثبت شد.",
    "replyPlaceholder": "پاسخی بنویسید...",
    "send": "ارسال",
    "showReplies": "نمایش {{count}} پاسخ",
    "hideReplies": "پنهان کردن پاسخ‌ها",
    "justNow": "همین الان",
    "rateLimitError": "شما به حد مجاز ارسال نظر در امروز رسیده‌اید (۳ نظر در ۲۴ ساعت).",
    "verificationNeeded": "برای ارسال پست در انجمن باید شماره تلفن خود را تایید کنید."
  },
  "modal": {
    "cancel": "انصراف",
    "confirm": "تایید",
    "notice": "اعلان"
  },
  "comingSoon": {
    "title": "ابزار {{tool}}",
    "description": "این بخش در حال توسعه است و به زودی در دسترس شما قرار خواهد گرفت. تیم Westnaord سخت در تلاش است تا بهترین تجربه را برای شما فراهم کند."
  },
  "settings": {
    "title": "تنظیمات سیستم",
    "credentials": {
      "title": "تغییر اطلاعات ورود",
      "description": "اطلاعات ورود به حساب کاربری مدیر را در اینجا تغییر دهید.",
      "username": "نام کاربری",
      "newPassword": "رمز عبور جدید",
      "newPasswordPlaceholder": "برای عدم تغییر، خالی بگذارید",
      "confirmPassword": "تکرار رمز عبور جدید",
      "save": "ذخیره تغییرات"
    },
    "tools": {
      "title": "مدیریت ابزارها (بزودی)",
      "description": "در این بخش می‌توانید ابزارهای مختلف را برای نقش‌های کاربری متفاوت فعال یا غیرفعال کنید."
    },
    "api": {
      "title": "کلیدهای API",
      "sms": "کلید API پیامک (فراز اس‌ام‌اس)",
      "payment": "کلید API درگاه پرداخت"
    },
    "modal": {
      "mismatch": "رمزهای عبور مطابقت ندارند.",
      "success": "اطلاعات با موفقیت بروزرسانی شد."
    }
  },
  "userProfile": {
    "title": "پروفایل کاربری",
    "personalInfo": {
      "title": "اطلاعات شخصی",
      "username": "نام کاربری",
      "phone": "شماره تلفن",
      "verifiedStatus": "وضعیت",
      "verified": "تایید شده",
      "notVerified": "تایید نشده",
      "changePassword": "تغییر رمز عبور"
    },
    "subscription": {
      "title": "وضعیت اشتراک",
      "currentPlan": "طرح فعلی",
      "expiry": "تاریخ انقضا",
      "noExpiry": "ندارد",
      "manage": "مدیریت اشتراک"
    },
    "referral": {
      "title": "سیستم معرفی",
      "yourLink": "لینک معرفی شما",
      "copy": "کپی",
      "copied": "کپی شد!",
      "earnings": "درآمد کل",
      "referredUsers": "کاربران معرفی شده",
      "referredUsersList": "لیست کاربران معرفی شده",
      "joinDate": "تاریخ عضویت",
      "noReferredUsers": "شما هنوز هیچ کاربری را معرفی نکرده‌اید."
    },
    "wallet": {
      "title": "کیف پول ارز دیجیتال",
      "address": "آدرس واریز شما",
      "description": "برای شارژ حساب خود از این آدرس استفاده کنید."
    },
    "changePic": "تغییر عکس",
    "verification": {
      "title": "تایید شماره تلفن",
      "enterPhone": "لطفا شماره تلفن خود را برای دریافت کد تایید وارد کنید.",
      "sendCode": "ارسال کد",
      "codeSent": "کد تایید به شماره {{phone}} ارسال شد. لطفا آن را وارد کنید. (کد ۱۲۳۴۵۶ است)",
      "resend": "ارسال مجدد",
      "verifyNow": "تایید",
      "success": "شماره تلفن با موفقیت تایید شد!",
      "failure": "کد تایید اشتباه است.",
      "sendFailure": "ارسال کد با خطا مواجه شد. لطفا دوباره تلاش کنید."
    },
    "password": {
      "title": "تغییر رمز عبور",
      "old": "رمز عبور فعلی",
      "new": "رمز عبور جدید",
      "confirm": "تکرار رمز عبور جدید",
      "success": "رمز عبور با موفقیت تغییر کرد!",
      "failure": "رمز عبور فعلی اشتباه است."
    }
  },
  "subscriptionPanel": {
    "title": "طرح خود را انتخاب کنید",
    "description": "برای سرعت بخشیدن به رشد خود، تمام ابزارها و ویژگی‌ها را باز کنید.",
    "monthly": "ماهانه",
    "3-month": "۳ ماهه",
    "9-month": "۹ ماهه",
    "yearly": "سالیانه",
    "free": "رایگان",
    "pricePerMonth": "/ ماه",
    "save": "تخفیف {{percent}}%",
    "choosePlan": "انتخاب طرح",
    "currentPlan": "طرح فعلی",
    "paymentMethod": "انتخاب روش پرداخت",
    "zarinpal": "زرین‌پال (برای ایران)",
    "crypto": "ارز دیجیتال (تتر)",
    "feature1": "تمام ۳۳+ ابزار",
    "feature2": "مربی هوش مصنوعی",
    "feature3": "تحلیل‌های پیشرفته",
    "trial": "{{days}} روز استفاده آزمایشی رایگان",
    "confirmPlan": "شما در حال انتخاب طرح {{plan}} هستید."
  },
  "paymentSimulation": {
    "back": "بازگشت",
    "zarinpalTitle": "شبیه‌سازی پرداخت زرین‌پال",
    "zarinpalDesc": "در حال انتقال به درگاه پرداخت زرین‌پال...",
    "zarinpalSuccess": "پرداخت موفقیت‌آمیز بود!",
    "zarinpalReturn": "بازگشت به وست‌نورد",
    "cryptoTitle": "پرداخت با تتر (شبکه {{network}})",
    "cryptoDesc": "لطفا مبلغ مورد نیاز را به آدرس زیر ارسال کنید. اشتراک شما پس از تایید فعال خواهد شد.",
    "yourWallet": "آدرس واریز منحصر به فرد شما:",
    "copyAddress": "کپی آدرس",
    "cryptoSimulation": "این یک شبیه‌سازی است. پرداخت موفق به صورت خودکار شناسایی خواهد شد.",
    "cryptoConfirm": "پرداخت را انجام دادم",
    "verifying": "در حال تایید پرداخت در شبکه بلاکچین...",
    "paymentConfirmed": "پرداخت تایید شد!",
    "sendOnlyUSDT": "هشدار: فقط USDT روی شبکه {{network}} به این آدرس ارسال کنید. ارسال هر ارز دیگری منجر به از دست رفتن دائمی آن خواهد شد."
  },
  "8plan": {
    "title": "8Plan - دروازه بیداری",
    "description": "با پاسخ به ۳۰ سؤال علمی، برنامه ۶ تا ۸ ماهه خود را در ۵ بعد مهم زندگی طراحی کنید.",
    "progress": "پیشرفت کلی",
    "areas": {
      "title": "حوزه‌های زندگی",
      "health": "سلامت جسمی و روانی",
      "healthDesc": "ورزش، تغذیه، خواب، سلامت روان",
      "career": "شغل و کسب‌وکار",
      "careerDesc": "پیشرفت شغلی، مهارت‌ها، درآمد",
      "relationships": "روابط اجتماعی",
      "relationshipsDesc": "خانواده، دوستان، شبکه اجتماعی",
      "personal": "رشد شخصی",
      "personalDesc": "یادگیری، مهارت‌های نرم، خودشناسی",
      "financial": "مالی و سرمایه‌گذاری",
      "financialDesc": "پس‌انداز، سرمایه‌گذاری، امنیت مالی"
    },
    "question": "سؤال",
    "of": "از",
    "questions": {
      "q1": "وضعیت فعلی شما در این حوزه را از ۱ تا ۱۰ امتیازدهی کنید و دلیل این امتیاز را شرح دهید.",
      "q2": "بزرگ‌ترین چالش‌ها و موانع شما در این حوزه چیست؟ (حداقل ۳ مورد)",
      "q3": "هدف کلان و قابل اندازه‌گیری شما برای ۶-۸ ماه آینده در این حوزه چیست؟",
      "q4": "چه اقدامات مشخص و عملی برای رسیدن به این هدف در نظر دارید؟ (حداقل ۵ اقدام)",
      "q5": "چگونه و با چه معیارهایی پیشرفت خود را اندازه‌گیری خواهید کرد؟",
      "q6": "چه منابع، ابزارها یا حمایت‌هایی برای موفقیت نیاز دارید؟"
    },
    "placeholder": "پاسخ خود را به صورت مفصل و دقیق بنویسید...",
    "characters": "کاراکتر",
    "prev": "قبلی",
    "next": "بعدی",
    "complete": "تکمیل و مشاهده تحلیل",
    "analysis": {
      "title": "تحلیل 8Plan شما",
      "description": "این نقشه راه ۶-۸ ماهه شماست. آن را ذخیره کرده و به آن متعهد باشید.",
      "currentScore": "امتیاز فعلی",
      "mainGoal": "هدف کلان",
      "keyActions": "اقدامات کلیدی",
      "biggestChallenges": "بزرگترین چالش‌ها",
      "locked": "برنامه 8Plan شما اکنون ذخیره و قفل شده است."
    }
  },
  "profanity": {
    "warning": "ارسال محتوا با کلمات توهین‌آمیز مجاز نیست. لطفا پیام خود را ویرایش کنید."
  },
  "yes": "بله",
  "no": "خیر"
}
PK
     H>[��͞       src/main.tsximport { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import './i18n'; // Import i18n configuration

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
);
PK
     H>[�D  D     tailwind.config.js/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        gold: {
          50: '#fffef7',
          100: '#fffbeb',
          200: '#fef3c7',
          300: '#fde68a',
          400: '#fcd34d',
          500: '#FFD700',
          600: '#d97706',
          700: '#b45309',
          800: '#92400e',
          900: '#78350f',
        }
      },
      fontFamily: {
        'vazir': ['Vazirmatn', 'sans-serif'],
        'iran': ['IRANSans', 'sans-serif'],
      },
      backdropBlur: {
        xs: '2px',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.5s ease-out',
        'bounce-soft': 'bounceSoft 2s infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(20px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        bounceSoft: {
          '0%, 20%, 50%, 80%, 100%': { transform: 'translateY(0)' },
          '40%': { transform: 'translateY(-10px)' },
          '60%': { transform: 'translateY(-5px)' },
        }
      }
    },
  },
  plugins: [],
}
PK
     H>[�+�i  i     tsconfig.app.json{
    "compilerOptions": {
      "target": "ES2020",
      "useDefineForClassFields": true,
      "lib": ["ES2020", "DOM", "DOM.Iterable"],
      "module": "ESNext",
      "skipLibCheck": true,

      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "isolatedModules": true,
      "moduleDetection": "force",
      "noEmit": true,
      "jsx": "react-jsx",

      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true
    },
    "include": ["src"]
  }
PK
     H>[^�(5�   �      tsconfig.json{
    "files": [],
    "references": [
      { "path": "./tsconfig.app.json" },
      { "path": "./tsconfig.node.json" }
    ]
  }
PK
     H>[�+�i  i     tsconfig.node.json{
    "compilerOptions": {
      "target": "ES2020",
      "useDefineForClassFields": true,
      "lib": ["ES2020", "DOM", "DOM.Iterable"],
      "module": "ESNext",
      "skipLibCheck": true,

      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "isolatedModules": true,
      "moduleDetection": "force",
      "noEmit": true,
      "jsx": "react-jsx",

      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true
    },
    "include": ["src"]
  }
PK
     H>[9�Qh�   �      vite.config.tsimport { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});
PK
     H>[<��   �      .envVITE_ZARINPAL_MERCHANT_ID="YOUR_ZARINPAL_MERCHANT_ID"
VITE_CRYPTO_NETWORK="TRC20"
VITE_FARAZSMS_USER="YOUR_FARAZSMS_USER"
VITE_FARAZSMS_PASS="YOUR_FARAZSMS_PASS"
VITE_FARAZSMS_SENDER="YOUR_FARAZSMS_SENDER"
PK
     H>[               src/config/PK
     H>[               src/config/profanity/PK
     H>[jr��M   M      src/config/profanity/en.json{
  "words": [
    "badword",
    "curse",
    "offensive",
    "hate"
  ]
}
PK
     H>[;L�QR   R      src/config/profanity/fa.json{
  "words": [
    "فحش",
    "ناسزا",
    "بد",
    "توهین"
  ]
}
PK
     H>[��ݷZ   Z      src/config/profanity/ar.json{
  "words": [
    "سيئة",
    "شتيمة",
    "جارح",
    "كراهية"
  ]
}
PK
     H>[\��o�  �     src/lib/date.tsimport dayjs from 'dayjs';
import jalali from 'dayjs-jalali-plugin';
import hijri from 'dayjs-hijri-plugin';
import relativeTime from 'dayjs/plugin/relativeTime';
import 'dayjs/locale/fa';
import 'dayjs/locale/ar';
import { Language } from '../App';

// Extend dayjs with all necessary plugins
dayjs.extend(jalali);
dayjs.extend(hijri);
dayjs.extend(relativeTime);

// Set default locale to English
dayjs.locale('en');

type CalendarSystem = 'gregory' | 'jalali' | 'hijri';

/**
 * Determines the calendar system to use based on the language.
 * @param lang The language code.
 * @returns The calendar system name.
 */
export const getCalendarSystem = (lang: Language): CalendarSystem => {
  switch (lang) {
    case 'fa':
      return 'jalali';
    case 'ar':
      return 'hijri';
    default:
      return 'gregory';
  }
};

/**
 * Formats a date according to the locale's calendar system.
 * @param date The date to format (string, Date, or Dayjs object).
 * @param lang The target language.
 * @param formatString The dayjs format string.
 * @returns A formatted date string.
 */
export const formatLocaleDate = (
  date: string | Date | dayjs.Dayjs,
  lang: Language,
  formatString = 'YYYY/MM/DD'
): string => {
  const calendar = getCalendarSystem(lang);
  return dayjs(date).calendar(calendar).locale(lang).format(formatString);
};

/**
 * Provides a relative time string (e.g., "2 hours ago").
 * @param date The date to compare from.
 * @param lang The target language.
 * @returns A relative time string.
 */
export const formatRelativeTime = (
    date: string | Date | dayjs.Dayjs,
    lang: Language
): string => {
    return dayjs(date).locale(lang).fromNow();
}

// Export the configured dayjs instance for more complex use cases
export default dayjs;
PK
     H>[��V�  �     yarn-error.logArguments: 
  /usr/local/bin/node /usr/local/bin/yarn install

PATH: 
  /bin:/usr/bin:/usr/local/bin

Yarn version: 
  1.22.19

Node version: 
  20.19.1

Platform: 
  linux x64

Trace: 
  Error: https://registry.yarnpkg.com/dayjs-hijri-plugin: Not found
      at params.callback (/usr/local/lib/node_modules/yarn/dist/yarn.js:56412:18)
      at self.callback (/usr/local/lib/node_modules/yarn/dist/yarn.js:124812:22)
      at emit (node:events:30:11034)
      at <anonymous> (/usr/local/lib/node_modules/yarn/dist/yarn.js:125784:10)
      at emit (node:events:30:11034)
      at <anonymous> (/usr/local/lib/node_modules/yarn/dist/yarn.js:125706:12)
      at onceWrapper (node:events:30:8244)
      at emit (node:events:30:11150)
      at endReadableNT (node:internal/streams/readable:230:10631)
      at processTicksAndRejections (node:internal/process/task_queues:196:1068)
      at <anonymous> (https://j9hsf5g8r4y1549jb1c2vwks6jcrow-tu3u.w-credentialless-staticblitz.com/blitz.96435430.js:31:295831)
      at _0x1eb571 (https://j9hsf5g8r4y1549jb1c2vwks6jcrow-tu3u.w-credentialless-staticblitz.com/blitz.96435430.js:31:295912)
      at _0x1f84e9 (https://j9hsf5g8r4y1549jb1c2vwks6jcrow-tu3u.w-credentialless-staticblitz.com/blitz.96435430.js:31:545656)
      at <anonymous> (https://j9hsf5g8r4y1549jb1c2vwks6jcrow-tu3u.w-credentialless-staticblitz.com/blitz.96435430.js:31:546484)
      at _0x510d52 (https://j9hsf5g8r4y1549jb1c2vwks6jcrow-tu3u.w-credentialless-staticblitz.com/blitz.96435430.js:31:546463)
      at _0x26e055 (https://j9hsf5g8r4y1549jb1c2vwks6jcrow-tu3u.w-credentialless-staticblitz.com/blitz.96435430.js:31:546089)
      at _0x121e01 (https://j9hsf5g8r4y1549jb1c2vwks6jcrow-tu3u.w-credentialless-staticblitz.com/blitz.96435430.js:31:544983)
      at <anonymous> (https://j9hsf5g8r4y1549jb1c2vwks6jcrow-tu3u.w-credentialless-staticblitz.com/blitz.96435430.js:31:545165)

npm manifest: 
  {
    "name": "vite-react-typescript-starter",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
      "dev": "vite",
      "build": "vite build",
      "lint": "eslint .",
      "preview": "vite preview"
    },
    "dependencies": {
      "@faker-js/faker": "^8.4.1",
      "axios": "^1.7.2",
      "clsx": "^2.1.1",
      "dayjs": "^1.11.11",
      "dayjs-hijri-plugin": "^1.2.2",
      "dayjs-jalali-plugin": "^1.0.2",
      "framer-motion": "^11.2.12",
      "i18next": "^25.5.2",
      "i18next-browser-languagedetector": "^8.2.0",
      "lucide-react": "^0.395.0",
      "react": "^18.3.1",
      "react-dom": "^18.3.1",
      "react-i18next": "^15.7.3",
      "react-router-dom": "^6.23.1",
      "reactflow": "^11.11.4",
      "recharts": "^2.12.7"
    },
    "devDependencies": {
      "@eslint/js": "^9.5.0",
      "@types/react": "^18.3.3",
      "@types/react-dom": "^18.3.0",
      "@vitejs/plugin-react": "^4.3.1",
      "autoprefixer": "^10.4.19",
      "eslint": "^9.5.0",
      "eslint-plugin-react-hooks": "^4.6.2",
      "eslint-plugin-react-refresh": "^0.4.7",
      "globals": "^15.6.0",
      "postcss": "^8.4.38",
      "tailwindcss": "^3.4.4",
      "typescript": "^5.4.5",
      "typescript-eslint": "^7.13.1",
      "vite": "^5.3.1"
    }
  }

yarn manifest: 
  No manifest

Lockfile: 
  # THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
  # yarn lockfile v1
  
  
  "@alloc/quick-lru@^5.2.0":
    version "5.2.0"
    resolved "https://registry.yarnpkg.com/@alloc/quick-lru/-/quick-lru-5.2.0.tgz#7bf68b20c0a350f936915fcae06f58e32007ce30"
    integrity sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==
  
  "@babel/code-frame@^7.27.1":
    version "7.27.1"
    resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.27.1.tgz#200f715e66d52a23b221a9435534a91cc13ad5be"
    integrity sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==
    dependencies:
      "@babel/helper-validator-identifier" "^7.27.1"
      js-tokens "^4.0.0"
      picocolors "^1.1.1"
  
  "@babel/compat-data@^7.27.2":
    version "7.27.5"
    resolved "https://registry.yarnpkg.com/@babel/compat-data/-/compat-data-7.27.5.tgz#7d0658ec1a8420fc866d1df1b03bea0e79934c82"
    integrity sha512-KiRAp/VoJaWkkte84TvUd9qjdbZAdiqyvMxrGl1N6vzFogKmaLgoM3L1kgtLicp2HP5fBJS8JrZKLVIZGVJAVg==
  
  "@babel/core@^7.28.0":
    version "7.28.4"
    resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.28.4.tgz#12a550b8794452df4c8b084f95003bce1742d496"
    integrity sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==
    dependencies:
      "@babel/code-frame" "^7.27.1"
      "@babel/generator" "^7.28.3"
      "@babel/helper-compilation-targets" "^7.27.2"
      "@babel/helper-module-transforms" "^7.28.3"
      "@babel/helpers" "^7.28.4"
      "@babel/parser" "^7.28.4"
      "@babel/template" "^7.27.2"
      "@babel/traverse" "^7.28.4"
      "@babel/types" "^7.28.4"
      "@jridgewell/remapping" "^2.3.5"
      convert-source-map "^2.0.0"
      debug "^4.1.0"
      gensync "^1.0.0-beta.2"
      json5 "^2.2.3"
      semver "^6.3.1"
  
  "@babel/generator@^7.27.3":
    version "7.27.5"
    resolved "https://registry.yarnpkg.com/@babel/generator/-/generator-7.27.5.tgz#3eb01866b345ba261b04911020cbe22dd4be8c8c"
    integrity sha512-ZGhA37l0e/g2s1Cnzdix0O3aLYm66eF8aufiVteOgnwxgnRP8GoyMj7VWsgWnQbVKXyge7hqrFh2K2TQM6t1Hw==
    dependencies:
      "@babel/parser" "^7.27.5"
      "@babel/types" "^7.27.3"
      "@jridgewell/gen-mapping" "^0.3.5"
      "@jridgewell/trace-mapping" "^0.3.25"
      jsesc "^3.0.2"
  
  "@babel/generator@^7.28.3":
    version "7.28.3"
    resolved "https://registry.yarnpkg.com/@babel/generator/-/generator-7.28.3.tgz#9626c1741c650cbac39121694a0f2d7451b8ef3e"
    integrity sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==
    dependencies:
      "@babel/parser" "^7.28.3"
      "@babel/types" "^7.28.2"
      "@jridgewell/gen-mapping" "^0.3.12"
      "@jridgewell/trace-mapping" "^0.3.28"
      jsesc "^3.0.2"
  
  "@babel/helper-compilation-targets@^7.27.2":
    version "7.27.2"
    resolved "https://registry.yarnpkg.com/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz#46a0f6efab808d51d29ce96858dd10ce8732733d"
    integrity sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==
    dependencies:
      "@babel/compat-data" "^7.27.2"
      "@babel/helper-validator-option" "^7.27.1"
      browserslist "^4.24.0"
      lru-cache "^5.1.1"
      semver "^6.3.1"
  
  "@babel/helper-globals@^7.28.0":
    version "7.28.0"
    resolved "https://registry.yarnpkg.com/@babel/helper-globals/-/helper-globals-7.28.0.tgz#b9430df2aa4e17bc28665eadeae8aa1d985e6674"
    integrity sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==
  
  "@babel/helper-module-imports@^7.27.1":
    version "7.27.1"
    resolved "https://registry.yarnpkg.com/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz#7ef769a323e2655e126673bb6d2d6913bbead204"
    integrity sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==
    dependencies:
      "@babel/traverse" "^7.27.1"
      "@babel/types" "^7.27.1"
  
  "@babel/helper-module-transforms@^7.28.3":
    version "7.28.3"
    resolved "https://registry.yarnpkg.com/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz#a2b37d3da3b2344fe085dab234426f2b9a2fa5f6"
    integrity sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==
    dependencies:
      "@babel/helper-module-imports" "^7.27.1"
      "@babel/helper-validator-identifier" "^7.27.1"
      "@babel/traverse" "^7.28.3"
  
  "@babel/helper-plugin-utils@^7.27.1":
    version "7.27.1"
    resolved "https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz#ddb2f876534ff8013e6c2b299bf4d39b3c51d44c"
    integrity sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==
  
  "@babel/helper-string-parser@^7.27.1":
    version "7.27.1"
    resolved "https://registry.yarnpkg.com/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz#54da796097ab19ce67ed9f88b47bb2ec49367687"
    integrity sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==
  
  "@babel/helper-validator-identifier@^7.27.1":
    version "7.27.1"
    resolved "https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz#a7054dcc145a967dd4dc8fee845a57c1316c9df8"
    integrity sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==
  
  "@babel/helper-validator-option@^7.27.1":
    version "7.27.1"
    resolved "https://registry.yarnpkg.com/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz#fa52f5b1e7db1ab049445b421c4471303897702f"
    integrity sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==
  
  "@babel/helpers@^7.28.4":
    version "7.28.4"
    resolved "https://registry.yarnpkg.com/@babel/helpers/-/helpers-7.28.4.tgz#fe07274742e95bdf7cf1443593eeb8926ab63827"
    integrity sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==
    dependencies:
      "@babel/template" "^7.27.2"
      "@babel/types" "^7.28.4"
  
  "@babel/parser@^7.1.0", "@babel/parser@^7.20.7", "@babel/parser@^7.27.2", "@babel/parser@^7.27.4", "@babel/parser@^7.27.5":
    version "7.27.5"
    resolved "https://registry.yarnpkg.com/@babel/parser/-/parser-7.27.5.tgz#ed22f871f110aa285a6fd934a0efed621d118826"
    integrity sha512-OsQd175SxWkGlzbny8J3K8TnnDD0N3lrIUtB92xwyRpzaenGZhxDvxN/JgU00U3CDZNj9tPuDJ5H0WS4Nt3vKg==
    dependencies:
      "@babel/types" "^7.27.3"
  
  "@babel/parser@^7.28.3", "@babel/parser@^7.28.4":
    version "7.28.4"
    resolved "https://registry.yarnpkg.com/@babel/parser/-/parser-7.28.4.tgz#da25d4643532890932cc03f7705fe19637e03fa8"
    integrity sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==
    dependencies:
      "@babel/types" "^7.28.4"
  
  "@babel/plugin-transform-react-jsx-self@^7.27.1":
    version "7.27.1"
    resolved "https://registry.yarnpkg.com/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz#af678d8506acf52c577cac73ff7fe6615c85fc92"
    integrity sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==
    dependencies:
      "@babel/helper-plugin-utils" "^7.27.1"
  
  "@babel/plugin-transform-react-jsx-source@^7.27.1":
    version "7.27.1"
    resolved "https://registry.yarnpkg.com/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz#dcfe2c24094bb757bf73960374e7c55e434f19f0"
    integrity sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==
    dependencies:
      "@babel/helper-plugin-utils" "^7.27.1"
  
  "@babel/runtime@^7.23.2", "@babel/runtime@^7.27.6", "@babel/runtime@^7.5.5", "@babel/runtime@^7.8.7":
    version "7.28.4"
    resolved "https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.28.4.tgz#a70226016fabe25c5783b2f22d3e1c9bc5ca3326"
    integrity sha512-Q/N6JNWvIvPnLDvjlE1OUBLPQHH6l3CltCEsHIujp45zQUSSh8K+gHnaEX45yAT1nyngnINhvWtzN+Nb9D8RAQ==
  
  "@babel/template@^7.27.2":
    version "7.27.2"
    resolved "https://registry.yarnpkg.com/@babel/template/-/template-7.27.2.tgz#fa78ceed3c4e7b63ebf6cb39e5852fca45f6809d"
    integrity sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==
    dependencies:
      "@babel/code-frame" "^7.27.1"
      "@babel/parser" "^7.27.2"
      "@babel/types" "^7.27.1"
  
  "@babel/traverse@^7.27.1":
    version "7.27.4"
    resolved "https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.27.4.tgz#b0045ac7023c8472c3d35effd7cc9ebd638da6ea"
    integrity sha512-oNcu2QbHqts9BtOWJosOVJapWjBDSxGCpFvikNR5TGDYDQf3JwpIoMzIKrvfoti93cLfPJEG4tH9SPVeyCGgdA==
    dependencies:
      "@babel/code-frame" "^7.27.1"
      "@babel/generator" "^7.27.3"
      "@babel/parser" "^7.27.4"
      "@babel/template" "^7.27.2"
      "@babel/types" "^7.27.3"
      debug "^4.3.1"
      globals "^11.1.0"
  
  "@babel/traverse@^7.28.3", "@babel/traverse@^7.28.4":
    version "7.28.4"
    resolved "https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.28.4.tgz#8d456101b96ab175d487249f60680221692b958b"
    integrity sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==
    dependencies:
      "@babel/code-frame" "^7.27.1"
      "@babel/generator" "^7.28.3"
      "@babel/helper-globals" "^7.28.0"
      "@babel/parser" "^7.28.4"
      "@babel/template" "^7.27.2"
      "@babel/types" "^7.28.4"
      debug "^4.3.1"
  
  "@babel/types@^7.0.0", "@babel/types@^7.20.7", "@babel/types@^7.27.1", "@babel/types@^7.27.3":
    version "7.27.6"
    resolved "https://registry.yarnpkg.com/@babel/types/-/types-7.27.6.tgz#a434ca7add514d4e646c80f7375c0aa2befc5535"
    integrity sha512-ETyHEk2VHHvl9b9jZP5IHPavHYk57EhanlRRuae9XCpb/j5bDCbPPMOBfCWhnl/7EDJz0jEMCi/RhccCE8r1+Q==
    dependencies:
      "@babel/helper-string-parser" "^7.27.1"
      "@babel/helper-validator-identifier" "^7.27.1"
  
  "@babel/types@^7.28.2", "@babel/types@^7.28.4":
    version "7.28.4"
    resolved "https://registry.yarnpkg.com/@babel/types/-/types-7.28.4.tgz#0a4e618f4c60a7cd6c11cb2d48060e4dbe38ac3a"
    integrity sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==
    dependencies:
      "@babel/helper-string-parser" "^7.27.1"
      "@babel/helper-validator-identifier" "^7.27.1"
  
  "@eslint-community/eslint-utils@^4.4.0", "@eslint-community/eslint-utils@^4.8.0":
    version "4.9.0"
    resolved "https://registry.yarnpkg.com/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz#7308df158e064f0dd8b8fdb58aa14fa2a7f913b3"
    integrity sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==
    dependencies:
      eslint-visitor-keys "^3.4.3"
  
  "@eslint-community/regexpp@^4.10.0", "@eslint-community/regexpp@^4.12.1":
    version "4.12.1"
    resolved "https://registry.yarnpkg.com/@eslint-community/regexpp/-/regexpp-4.12.1.tgz#cfc6cffe39df390a3841cde2abccf92eaa7ae0e0"
    integrity sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==
  
  "@eslint/config-array@^0.21.0":
    version "0.21.0"
    resolved "https://registry.yarnpkg.com/@eslint/config-array/-/config-array-0.21.0.tgz#abdbcbd16b124c638081766392a4d6b509f72636"
    integrity sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==
    dependencies:
      "@eslint/object-schema" "^2.1.6"
      debug "^4.3.1"
      minimatch "^3.1.2"
  
  "@eslint/config-helpers@^0.3.1":
    version "0.3.1"
    resolved "https://registry.yarnpkg.com/@eslint/config-helpers/-/config-helpers-0.3.1.tgz#d316e47905bd0a1a931fa50e669b9af4104d1617"
    integrity sha512-xR93k9WhrDYpXHORXpxVL5oHj3Era7wo6k/Wd8/IsQNnZUTzkGS29lyn3nAT05v6ltUuTFVCCYDEGfy2Or/sPA==
  
  "@eslint/core@^0.15.2":
    version "0.15.2"
    resolved "https://registry.yarnpkg.com/@eslint/core/-/core-0.15.2.tgz#59386327d7862cc3603ebc7c78159d2dcc4a868f"
    integrity sha512-78Md3/Rrxh83gCxoUc0EiciuOHsIITzLy53m3d9UyiW8y9Dj2D29FeETqyKA+BRK76tnTp6RXWb3pCay8Oyomg==
    dependencies:
      "@types/json-schema" "^7.0.15"
  
  "@eslint/eslintrc@^3.3.1":
    version "3.3.1"
    resolved "https://registry.yarnpkg.com/@eslint/eslintrc/-/eslintrc-3.3.1.tgz#e55f7f1dd400600dd066dbba349c4c0bac916964"
    integrity sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==
    dependencies:
      ajv "^6.12.4"
      debug "^4.3.2"
      espree "^10.0.1"
      globals "^14.0.0"
      ignore "^5.2.0"
      import-fresh "^3.2.1"
      js-yaml "^4.1.0"
      minimatch "^3.1.2"
      strip-json-comments "^3.1.1"
  
  "@eslint/js@9.36.0", "@eslint/js@^9.5.0":
    version "9.36.0"
    resolved "https://registry.yarnpkg.com/@eslint/js/-/js-9.36.0.tgz#b1a3893dd6ce2defed5fd49de805ba40368e8fef"
    integrity sha512-uhCbYtYynH30iZErszX78U+nR3pJU3RHGQ57NXy5QupD4SBVwDeU8TNBy+MjMngc1UyIW9noKqsRqfjQTBU2dw==
  
  "@eslint/object-schema@^2.1.6":
    version "2.1.6"
    resolved "https://registry.yarnpkg.com/@eslint/object-schema/-/object-schema-2.1.6.tgz#58369ab5b5b3ca117880c0f6c0b0f32f6950f24f"
    integrity sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==
  
  "@eslint/plugin-kit@^0.3.5":
    version "0.3.5"
    resolved "https://registry.yarnpkg.com/@eslint/plugin-kit/-/plugin-kit-0.3.5.tgz#fd8764f0ee79c8ddab4da65460c641cefee017c5"
    integrity sha512-Z5kJ+wU3oA7MMIqVR9tyZRtjYPr4OC004Q4Rw7pgOKUOKkJfZ3O24nz3WYfGRpMDNmcOi3TwQOmgm7B7Tpii0w==
    dependencies:
      "@eslint/core" "^0.15.2"
      levn "^0.4.1"
  
  "@faker-js/faker@^8.4.1":
    version "8.4.1"
    resolved "https://registry.yarnpkg.com/@faker-js/faker/-/faker-8.4.1.tgz#5d5e8aee8fce48f5e189bf730ebd1f758f491451"
    integrity sha512-XQ3cU+Q8Uqmrbf2e0cIC/QN43sTBSC8KF12u29Mb47tWrt2hAgBXSgpZMj4Ao8Uk0iJcU99QsOCaIL8934obCg==
  
  "@humanfs/core@^0.19.1":
    version "0.19.1"
    resolved "https://registry.yarnpkg.com/@humanfs/core/-/core-0.19.1.tgz#17c55ca7d426733fe3c561906b8173c336b40a77"
    integrity sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==
  
  "@humanfs/node@^0.16.6":
    version "0.16.6"
    resolved "https://registry.yarnpkg.com/@humanfs/node/-/node-0.16.6.tgz#ee2a10eaabd1131987bf0488fd9b820174cd765e"
    integrity sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==
    dependencies:
      "@humanfs/core" "^0.19.1"
      "@humanwhocodes/retry" "^0.3.0"
  
  "@humanwhocodes/module-importer@^1.0.1":
    version "1.0.1"
    resolved "https://registry.yarnpkg.com/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz#af5b2691a22b44be847b0ca81641c5fb6ad0172c"
    integrity sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==
  
  "@humanwhocodes/retry@^0.3.0":
    version "0.3.1"
    resolved "https://registry.yarnpkg.com/@humanwhocodes/retry/-/retry-0.3.1.tgz#c72a5c76a9fbaf3488e231b13dc52c0da7bab42a"
    integrity sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==
  
  "@humanwhocodes/retry@^0.4.2":
    version "0.4.3"
    resolved "https://registry.yarnpkg.com/@humanwhocodes/retry/-/retry-0.4.3.tgz#c2b9d2e374ee62c586d3adbea87199b1d7a7a6ba"
    integrity sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==
  
  "@isaacs/cliui@^8.0.2":
    version "8.0.2"
    resolved "https://registry.yarnpkg.com/@isaacs/cliui/-/cliui-8.0.2.tgz#b37667b7bc181c168782259bab42474fbf52b550"
    integrity sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==
    dependencies:
      string-width "^5.1.2"
      string-width-cjs "npm:string-width@^4.2.0"
      strip-ansi "^7.0.1"
      strip-ansi-cjs "npm:strip-ansi@^6.0.1"
      wrap-ansi "^8.1.0"
      wrap-ansi-cjs "npm:wrap-ansi@^7.0.0"
  
  "@jridgewell/gen-mapping@^0.3.12":
    version "0.3.13"
    resolved "https://registry.yarnpkg.com/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz#6342a19f44347518c93e43b1ac69deb3c4656a1f"
    integrity sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==
    dependencies:
      "@jridgewell/sourcemap-codec" "^1.5.0"
      "@jridgewell/trace-mapping" "^0.3.24"
  
  "@jridgewell/gen-mapping@^0.3.2", "@jridgewell/gen-mapping@^0.3.5":
    version "0.3.8"
    resolved "https://registry.yarnpkg.com/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz#4f0e06362e01362f823d348f1872b08f666d8142"
    integrity sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==
    dependencies:
      "@jridgewell/set-array" "^1.2.1"
      "@jridgewell/sourcemap-codec" "^1.4.10"
      "@jridgewell/trace-mapping" "^0.3.24"
  
  "@jridgewell/remapping@^2.3.5":
    version "2.3.5"
    resolved "https://registry.yarnpkg.com/@jridgewell/remapping/-/remapping-2.3.5.tgz#375c476d1972947851ba1e15ae8f123047445aa1"
    integrity sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==
    dependencies:
      "@jridgewell/gen-mapping" "^0.3.5"
      "@jridgewell/trace-mapping" "^0.3.24"
  
  "@jridgewell/resolve-uri@^3.1.0":
    version "3.1.2"
    resolved "https://registry.yarnpkg.com/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz#7a0ee601f60f99a20c7c7c5ff0c80388c1189bd6"
    integrity sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==
  
  "@jridgewell/set-array@^1.2.1":
    version "1.2.1"
    resolved "https://registry.yarnpkg.com/@jridgewell/set-array/-/set-array-1.2.1.tgz#558fb6472ed16a4c850b889530e6b36438c49280"
    integrity sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==
  
  "@jridgewell/sourcemap-codec@^1.4.10", "@jridgewell/sourcemap-codec@^1.4.14":
    version "1.5.0"
    resolved "https://registry.yarnpkg.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz#3188bcb273a414b0d215fd22a58540b989b9409a"
    integrity sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==
  
  "@jridgewell/sourcemap-codec@^1.5.0":
    version "1.5.5"
    resolved "https://registry.yarnpkg.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz#6912b00d2c631c0d15ce1a7ab57cd657f2a8f8ba"
    integrity sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==
  
  "@jridgewell/trace-mapping@^0.3.24", "@jridgewell/trace-mapping@^0.3.25":
    version "0.3.25"
    resolved "https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz#15f190e98895f3fc23276ee14bc76b675c2e50f0"
    integrity sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==
    dependencies:
      "@jridgewell/resolve-uri" "^3.1.0"
      "@jridgewell/sourcemap-codec" "^1.4.14"
  
  "@jridgewell/trace-mapping@^0.3.28":
    version "0.3.31"
    resolved "https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz#db15d6781c931f3a251a3dac39501c98a6082fd0"
    integrity sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==
    dependencies:
      "@jridgewell/resolve-uri" "^3.1.0"
      "@jridgewell/sourcemap-codec" "^1.4.14"
  
  "@nodelib/fs.scandir@2.1.5":
    version "2.1.5"
    resolved "https://registry.yarnpkg.com/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz#7619c2eb21b25483f6d167548b4cfd5a7488c3d5"
    integrity sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==
    dependencies:
      "@nodelib/fs.stat" "2.0.5"
      run-parallel "^1.1.9"
  
  "@nodelib/fs.stat@2.0.5", "@nodelib/fs.stat@^2.0.2":
    version "2.0.5"
    resolved "https://registry.yarnpkg.com/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz#5bd262af94e9d25bd1e71b05deed44876a222e8b"
    integrity sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==
  
  "@nodelib/fs.walk@^1.2.3":
    version "1.2.8"
    resolved "https://registry.yarnpkg.com/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz#e95737e8bb6746ddedf69c556953494f196fe69a"
    integrity sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==
    dependencies:
      "@nodelib/fs.scandir" "2.1.5"
      fastq "^1.6.0"
  
  "@pkgjs/parseargs@^0.11.0":
    version "0.11.0"
    resolved "https://registry.yarnpkg.com/@pkgjs/parseargs/-/parseargs-0.11.0.tgz#a77ea742fab25775145434eb1d2328cf5013ac33"
    integrity sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==
  
  "@reactflow/background@11.3.14":
    version "11.3.14"
    resolved "https://registry.yarnpkg.com/@reactflow/background/-/background-11.3.14.tgz#778ca30174f3de77fc321459ab3789e66e71a699"
    integrity sha512-Gewd7blEVT5Lh6jqrvOgd4G6Qk17eGKQfsDXgyRSqM+CTwDqRldG2LsWN4sNeno6sbqVIC2fZ+rAUBFA9ZEUDA==
    dependencies:
      "@reactflow/core" "11.11.4"
      classcat "^5.0.3"
      zustand "^4.4.1"
  
  "@reactflow/controls@11.2.14":
    version "11.2.14"
    resolved "https://registry.yarnpkg.com/@reactflow/controls/-/controls-11.2.14.tgz#508ed2c40d23341b3b0919dd11e76fd49cf850c7"
    integrity sha512-MiJp5VldFD7FrqaBNIrQ85dxChrG6ivuZ+dcFhPQUwOK3HfYgX2RHdBua+gx+40p5Vw5It3dVNp/my4Z3jF0dw==
    dependencies:
      "@reactflow/core" "11.11.4"
      classcat "^5.0.3"
      zustand "^4.4.1"
  
  "@reactflow/core@11.11.4":
    version "11.11.4"
    resolved "https://registry.yarnpkg.com/@reactflow/core/-/core-11.11.4.tgz#89bd86d1862aa1416f3f49926cede7e8c2aab6a7"
    integrity sha512-H4vODklsjAq3AMq6Np4LE12i1I4Ta9PrDHuBR9GmL8uzTt2l2jh4CiQbEMpvMDcp7xi4be0hgXj+Ysodde/i7Q==
    dependencies:
      "@types/d3" "^7.4.0"
      "@types/d3-drag" "^3.0.1"
      "@types/d3-selection" "^3.0.3"
      "@types/d3-zoom" "^3.0.1"
      classcat "^5.0.3"
      d3-drag "^3.0.0"
      d3-selection "^3.0.0"
      d3-zoom "^3.0.0"
      zustand "^4.4.1"
  
  "@reactflow/minimap@11.7.14":
    version "11.7.14"
    resolved "https://registry.yarnpkg.com/@reactflow/minimap/-/minimap-11.7.14.tgz#298d7a63cb1da06b2518c99744f716560c88ca73"
    integrity sha512-mpwLKKrEAofgFJdkhwR5UQ1JYWlcAAL/ZU/bctBkuNTT1yqV+y0buoNVImsRehVYhJwffSWeSHaBR5/GJjlCSQ==
    dependencies:
      "@reactflow/core" "11.11.4"
      "@types/d3-selection" "^3.0.3"
      "@types/d3-zoom" "^3.0.1"
      classcat "^5.0.3"
      d3-selection "^3.0.0"
      d3-zoom "^3.0.0"
      zustand "^4.4.1"
  
  "@reactflow/node-resizer@2.2.14":
    version "2.2.14"
    resolved "https://registry.yarnpkg.com/@reactflow/node-resizer/-/node-resizer-2.2.14.tgz#1810c0ce51aeb936f179466a6660d1e02c7a77a8"
    integrity sha512-fwqnks83jUlYr6OHcdFEedumWKChTHRGw/kbCxj0oqBd+ekfs+SIp4ddyNU0pdx96JIm5iNFS0oNrmEiJbbSaA==
    dependencies:
      "@reactflow/core" "11.11.4"
      classcat "^5.0.4"
      d3-drag "^3.0.0"
      d3-selection "^3.0.0"
      zustand "^4.4.1"
  
  "@reactflow/node-toolbar@1.3.14":
    version "1.3.14"
    resolved "https://registry.yarnpkg.com/@reactflow/node-toolbar/-/node-toolbar-1.3.14.tgz#c6ffc76f82acacdce654f2160dc9852162d6e7c9"
    integrity sha512-rbynXQnH/xFNu4P9H+hVqlEUafDCkEoCy0Dg9mG22Sg+rY/0ck6KkrAQrYrTgXusd+cEJOMK0uOOFCK2/5rSGQ==
    dependencies:
      "@reactflow/core" "11.11.4"
      classcat "^5.0.3"
      zustand "^4.4.1"
  
  "@remix-run/router@1.23.0":
    version "1.23.0"
    resolved "https://registry.yarnpkg.com/@remix-run/router/-/router-1.23.0.tgz#35390d0e7779626c026b11376da6789eb8389242"
    integrity sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==
  
  "@rolldown/pluginutils@1.0.0-beta.27":
    version "1.0.0-beta.27"
    resolved "https://registry.yarnpkg.com/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz#47d2bf4cef6d470b22f5831b420f8964e0bf755f"
    integrity sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==
  
  "@types/babel__core@^7.20.5":
    version "7.20.5"
    resolved "https://registry.yarnpkg.com/@types/babel__core/-/babel__core-7.20.5.tgz#3df15f27ba85319caa07ba08d0721889bb39c017"
    integrity sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==
    dependencies:
      "@babel/parser" "^7.20.7"
      "@babel/types" "^7.20.7"
      "@types/babel__generator" "*"
      "@types/babel__template" "*"
      "@types/babel__traverse" "*"
  
  "@types/babel__generator@*":
    version "7.27.0"
    resolved "https://registry.yarnpkg.com/@types/babel__generator/-/babel__generator-7.27.0.tgz#b5819294c51179957afaec341442f9341e4108a9"
    integrity sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==
    dependencies:
      "@babel/types" "^7.0.0"
  
  "@types/babel__template@*":
    version "7.4.4"
    resolved "https://registry.yarnpkg.com/@types/babel__template/-/babel__template-7.4.4.tgz#5672513701c1b2199bc6dad636a9d7491586766f"
    integrity sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==
    dependencies:
      "@babel/parser" "^7.1.0"
      "@babel/types" "^7.0.0"
  
  "@types/babel__traverse@*":
    version "7.20.7"
    resolved "https://registry.yarnpkg.com/@types/babel__traverse/-/babel__traverse-7.20.7.tgz#968cdc2366ec3da159f61166428ee40f370e56c2"
    integrity sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==
    dependencies:
      "@babel/types" "^7.20.7"
  
  "@types/d3-array@*", "@types/d3-array@^3.0.3":
    version "3.2.2"
    resolved "https://registry.yarnpkg.com/@types/d3-array/-/d3-array-3.2.2.tgz#e02151464d02d4a1b44646d0fcdb93faf88fde8c"
    integrity sha512-hOLWVbm7uRza0BYXpIIW5pxfrKe0W+D5lrFiAEYR+pb6w3N2SwSMaJbXdUfSEv+dT4MfHBLtn5js0LAWaO6otw==
  
  "@types/d3-axis@*":
    version "3.0.6"
    resolved "https://registry.yarnpkg.com/@types/d3-axis/-/d3-axis-3.0.6.tgz#e760e5765b8188b1defa32bc8bb6062f81e4c795"
    integrity sha512-pYeijfZuBd87T0hGn0FO1vQ/cgLk6E1ALJjfkC0oJ8cbwkZl3TpgS8bVBLZN+2jjGgg38epgxb2zmoGtSfvgMw==
    dependencies:
      "@types/d3-selection" "*"
  
  "@types/d3-brush@*":
    version "3.0.6"
    resolved "https://registry.yarnpkg.com/@types/d3-brush/-/d3-brush-3.0.6.tgz#c2f4362b045d472e1b186cdbec329ba52bdaee6c"
    integrity sha512-nH60IZNNxEcrh6L1ZSMNA28rj27ut/2ZmI3r96Zd+1jrZD++zD3LsMIjWlvg4AYrHn/Pqz4CF3veCxGjtbqt7A==
    dependencies:
      "@types/d3-selection" "*"
  
  "@types/d3-chord@*":
    version "3.0.6"
    resolved "https://registry.yarnpkg.com/@types/d3-chord/-/d3-chord-3.0.6.tgz#1706ca40cf7ea59a0add8f4456efff8f8775793d"
    integrity sha512-LFYWWd8nwfwEmTZG9PfQxd17HbNPksHBiJHaKuY1XeqscXacsS2tyoo6OdRsjf+NQYeB6XrNL3a25E3gH69lcg==
  
  "@types/d3-color@*":
    version "3.1.3"
    resolved "https://registry.yarnpkg.com/@types/d3-color/-/d3-color-3.1.3.tgz#368c961a18de721da8200e80bf3943fb53136af2"
    integrity sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==
  
  "@types/d3-contour@*":
    version "3.0.6"
    resolved "https://registry.yarnpkg.com/@types/d3-contour/-/d3-contour-3.0.6.tgz#9ada3fa9c4d00e3a5093fed0356c7ab929604231"
    integrity sha512-BjzLgXGnCWjUSYGfH1cpdo41/hgdWETu4YxpezoztawmqsvCeep+8QGfiY6YbDvfgHz/DkjeIkkZVJavB4a3rg==
    dependencies:
      "@types/d3-array" "*"
      "@types/geojson" "*"
  
  "@types/d3-delaunay@*":
    version "6.0.4"
    resolved "https://registry.yarnpkg.com/@types/d3-delaunay/-/d3-delaunay-6.0.4.tgz#185c1a80cc807fdda2a3fe960f7c11c4a27952e1"
    integrity sha512-ZMaSKu4THYCU6sV64Lhg6qjf1orxBthaC161plr5KuPHo3CNm8DTHiLw/5Eq2b6TsNP0W0iJrUOFscY6Q450Hw==
  
  "@types/d3-dispatch@*":
    version "3.0.7"
    resolved "https://registry.yarnpkg.com/@types/d3-dispatch/-/d3-dispatch-3.0.7.tgz#ef004d8a128046cfce434d17182f834e44ef95b2"
    integrity sha512-5o9OIAdKkhN1QItV2oqaE5KMIiXAvDWBDPrD85e58Qlz1c1kI/J0NcqbEG88CoTwJrYe7ntUCVfeUl2UJKbWgA==
  
  "@types/d3-drag@*", "@types/d3-drag@^3.0.1":
    version "3.0.7"
    resolved "https://registry.yarnpkg.com/@types/d3-drag/-/d3-drag-3.0.7.tgz#b13aba8b2442b4068c9a9e6d1d82f8bcea77fc02"
    integrity sha512-HE3jVKlzU9AaMazNufooRJ5ZpWmLIoc90A37WU2JMmeq28w1FQqCZswHZ3xR+SuxYftzHq6WU6KJHvqxKzTxxQ==
    dependencies:
      "@types/d3-selection" "*"
  
  "@types/d3-dsv@*":
    version "3.0.7"
    resolved "https://registry.yarnpkg.com/@types/d3-dsv/-/d3-dsv-3.0.7.tgz#0a351f996dc99b37f4fa58b492c2d1c04e3dac17"
    integrity sha512-n6QBF9/+XASqcKK6waudgL0pf/S5XHPPI8APyMLLUHd8NqouBGLsU8MgtO7NINGtPBtk9Kko/W4ea0oAspwh9g==
  
  "@types/d3-ease@*", "@types/d3-ease@^3.0.0":
    version "3.0.2"
    resolved "https://registry.yarnpkg.com/@types/d3-ease/-/d3-ease-3.0.2.tgz#e28db1bfbfa617076f7770dd1d9a48eaa3b6c51b"
    integrity sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==
  
  "@types/d3-fetch@*":
    version "3.0.7"
    resolved "https://registry.yarnpkg.com/@types/d3-fetch/-/d3-fetch-3.0.7.tgz#c04a2b4f23181aa376f30af0283dbc7b3b569980"
    integrity sha512-fTAfNmxSb9SOWNB9IoG5c8Hg6R+AzUHDRlsXsDZsNp6sxAEOP0tkP3gKkNSO/qmHPoBFTxNrjDprVHDQDvo5aA==
    dependencies:
      "@types/d3-dsv" "*"
  
  "@types/d3-force@*":
    version "3.0.10"
    resolved "https://registry.yarnpkg.com/@types/d3-force/-/d3-force-3.0.10.tgz#6dc8fc6e1f35704f3b057090beeeb7ac674bff1a"
    integrity sha512-ZYeSaCF3p73RdOKcjj+swRlZfnYpK1EbaDiYICEEp5Q6sUiqFaFQ9qgoshp5CzIyyb/yD09kD9o2zEltCexlgw==
  
  "@types/d3-format@*":
    version "3.0.4"
    resolved "https://registry.yarnpkg.com/@types/d3-format/-/d3-format-3.0.4.tgz#b1e4465644ddb3fdf3a263febb240a6cd616de90"
    integrity sha512-fALi2aI6shfg7vM5KiR1wNJnZ7r6UuggVqtDA+xiEdPZQwy/trcQaHnwShLuLdta2rTymCNpxYTiMZX/e09F4g==
  
  "@types/d3-geo@*":
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/@types/d3-geo/-/d3-geo-3.1.0.tgz#b9e56a079449174f0a2c8684a9a4df3f60522440"
    integrity sha512-856sckF0oP/diXtS4jNsiQw/UuK5fQG8l/a9VVLeSouf1/PPbBE1i1W852zVwKwYCBkFJJB7nCFTbk6UMEXBOQ==
    dependencies:
      "@types/geojson" "*"
  
  "@types/d3-hierarchy@*":
    version "3.1.7"
    resolved "https://registry.yarnpkg.com/@types/d3-hierarchy/-/d3-hierarchy-3.1.7.tgz#6023fb3b2d463229f2d680f9ac4b47466f71f17b"
    integrity sha512-tJFtNoYBtRtkNysX1Xq4sxtjK8YgoWUNpIiUee0/jHGRwqvzYxkq0hGVbbOGSz+JgFxxRu4K8nb3YpG3CMARtg==
  
  "@types/d3-interpolate@*", "@types/d3-interpolate@^3.0.1":
    version "3.0.4"
    resolved "https://registry.yarnpkg.com/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz#412b90e84870285f2ff8a846c6eb60344f12a41c"
    integrity sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==
    dependencies:
      "@types/d3-color" "*"
  
  "@types/d3-path@*":
    version "3.1.1"
    resolved "https://registry.yarnpkg.com/@types/d3-path/-/d3-path-3.1.1.tgz#f632b380c3aca1dba8e34aa049bcd6a4af23df8a"
    integrity sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==
  
  "@types/d3-polygon@*":
    version "3.0.2"
    resolved "https://registry.yarnpkg.com/@types/d3-polygon/-/d3-polygon-3.0.2.tgz#dfae54a6d35d19e76ac9565bcb32a8e54693189c"
    integrity sha512-ZuWOtMaHCkN9xoeEMr1ubW2nGWsp4nIql+OPQRstu4ypeZ+zk3YKqQT0CXVe/PYqrKpZAi+J9mTs05TKwjXSRA==
  
  "@types/d3-quadtree@*":
    version "3.0.6"
    resolved "https://registry.yarnpkg.com/@types/d3-quadtree/-/d3-quadtree-3.0.6.tgz#d4740b0fe35b1c58b66e1488f4e7ed02952f570f"
    integrity sha512-oUzyO1/Zm6rsxKRHA1vH0NEDG58HrT5icx/azi9MF1TWdtttWl0UIUsjEQBBh+SIkrpd21ZjEv7ptxWys1ncsg==
  
  "@types/d3-random@*":
    version "3.0.3"
    resolved "https://registry.yarnpkg.com/@types/d3-random/-/d3-random-3.0.3.tgz#ed995c71ecb15e0cd31e22d9d5d23942e3300cfb"
    integrity sha512-Imagg1vJ3y76Y2ea0871wpabqp613+8/r0mCLEBfdtqC7xMSfj9idOnmBYyMoULfHePJyxMAw3nWhJxzc+LFwQ==
  
  "@types/d3-scale-chromatic@*":
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/@types/d3-scale-chromatic/-/d3-scale-chromatic-3.1.0.tgz#dc6d4f9a98376f18ea50bad6c39537f1b5463c39"
    integrity sha512-iWMJgwkK7yTRmWqRB5plb1kadXyQ5Sj8V/zYlFGMUBbIPKQScw+Dku9cAAMgJG+z5GYDoMjWGLVOvjghDEFnKQ==
  
  "@types/d3-scale@*", "@types/d3-scale@^4.0.2":
    version "4.0.9"
    resolved "https://registry.yarnpkg.com/@types/d3-scale/-/d3-scale-4.0.9.tgz#57a2f707242e6fe1de81ad7bfcccaaf606179afb"
    integrity sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==
    dependencies:
      "@types/d3-time" "*"
  
  "@types/d3-selection@*", "@types/d3-selection@^3.0.3":
    version "3.0.11"
    resolved "https://registry.yarnpkg.com/@types/d3-selection/-/d3-selection-3.0.11.tgz#bd7a45fc0a8c3167a631675e61bc2ca2b058d4a3"
    integrity sha512-bhAXu23DJWsrI45xafYpkQ4NtcKMwWnAC/vKrd2l+nxMFuvOT3XMYTIj2opv8vq8AO5Yh7Qac/nSeP/3zjTK0w==
  
  "@types/d3-shape@*", "@types/d3-shape@^3.1.0":
    version "3.1.7"
    resolved "https://registry.yarnpkg.com/@types/d3-shape/-/d3-shape-3.1.7.tgz#2b7b423dc2dfe69c8c93596e673e37443348c555"
    integrity sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==
    dependencies:
      "@types/d3-path" "*"
  
  "@types/d3-time-format@*":
    version "4.0.3"
    resolved "https://registry.yarnpkg.com/@types/d3-time-format/-/d3-time-format-4.0.3.tgz#d6bc1e6b6a7db69cccfbbdd4c34b70632d9e9db2"
    integrity sha512-5xg9rC+wWL8kdDj153qZcsJ0FWiFt0J5RB6LYUNZjwSnesfblqrI/bJ1wBdJ8OQfncgbJG5+2F+qfqnqyzYxyg==
  
  "@types/d3-time@*", "@types/d3-time@^3.0.0":
    version "3.0.4"
    resolved "https://registry.yarnpkg.com/@types/d3-time/-/d3-time-3.0.4.tgz#8472feecd639691450dd8000eb33edd444e1323f"
    integrity sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==
  
  "@types/d3-timer@*", "@types/d3-timer@^3.0.0":
    version "3.0.2"
    resolved "https://registry.yarnpkg.com/@types/d3-timer/-/d3-timer-3.0.2.tgz#70bbda77dc23aa727413e22e214afa3f0e852f70"
    integrity sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==
  
  "@types/d3-transition@*":
    version "3.0.9"
    resolved "https://registry.yarnpkg.com/@types/d3-transition/-/d3-transition-3.0.9.tgz#1136bc57e9ddb3c390dccc9b5ff3b7d2b8d94706"
    integrity sha512-uZS5shfxzO3rGlu0cC3bjmMFKsXv+SmZZcgp0KD22ts4uGXp5EVYGzu/0YdwZeKmddhcAccYtREJKkPfXkZuCg==
    dependencies:
      "@types/d3-selection" "*"
  
  "@types/d3-zoom@*", "@types/d3-zoom@^3.0.1":
    version "3.0.8"
    resolved "https://registry.yarnpkg.com/@types/d3-zoom/-/d3-zoom-3.0.8.tgz#dccb32d1c56b1e1c6e0f1180d994896f038bc40b"
    integrity sha512-iqMC4/YlFCSlO8+2Ii1GGGliCAY4XdeG748w5vQUbevlbDu0zSjH/+jojorQVBK/se0j6DUFNPBGSqD3YWYnDw==
    dependencies:
      "@types/d3-interpolate" "*"
      "@types/d3-selection" "*"
  
  "@types/d3@^7.4.0":
    version "7.4.3"
    resolved "https://registry.yarnpkg.com/@types/d3/-/d3-7.4.3.tgz#d4550a85d08f4978faf0a4c36b848c61eaac07e2"
    integrity sha512-lZXZ9ckh5R8uiFVt8ogUNf+pIrK4EsWrx2Np75WvF/eTpJ0FMHNhjXk8CKEx/+gpHbNQyJWehbFaTvqmHWB3ww==
    dependencies:
      "@types/d3-array" "*"
      "@types/d3-axis" "*"
      "@types/d3-brush" "*"
      "@types/d3-chord" "*"
      "@types/d3-color" "*"
      "@types/d3-contour" "*"
      "@types/d3-delaunay" "*"
      "@types/d3-dispatch" "*"
      "@types/d3-drag" "*"
      "@types/d3-dsv" "*"
      "@types/d3-ease" "*"
      "@types/d3-fetch" "*"
      "@types/d3-force" "*"
      "@types/d3-format" "*"
      "@types/d3-geo" "*"
      "@types/d3-hierarchy" "*"
      "@types/d3-interpolate" "*"
      "@types/d3-path" "*"
      "@types/d3-polygon" "*"
      "@types/d3-quadtree" "*"
      "@types/d3-random" "*"
      "@types/d3-scale" "*"
      "@types/d3-scale-chromatic" "*"
      "@types/d3-selection" "*"
      "@types/d3-shape" "*"
      "@types/d3-time" "*"
      "@types/d3-time-format" "*"
      "@types/d3-timer" "*"
      "@types/d3-transition" "*"
      "@types/d3-zoom" "*"
  
  "@types/estree@1.0.8", "@types/estree@^1.0.6":
    version "1.0.8"
    resolved "https://registry.yarnpkg.com/@types/estree/-/estree-1.0.8.tgz#958b91c991b1867ced318bedea0e215ee050726e"
    integrity sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==
  
  "@types/geojson@*":
    version "7946.0.16"
    resolved "https://registry.yarnpkg.com/@types/geojson/-/geojson-7946.0.16.tgz#8ebe53d69efada7044454e3305c19017d97ced2a"
    integrity sha512-6C8nqWur3j98U6+lXDfTUWIfgvZU+EumvpHKcYjujKH7woYyLj2sUmff0tRhrqM7BohUw7Pz3ZB1jj2gW9Fvmg==
  
  "@types/json-schema@^7.0.15":
    version "7.0.15"
    resolved "https://registry.yarnpkg.com/@types/json-schema/-/json-schema-7.0.15.tgz#596a1747233694d50f6ad8a7869fcb6f56cf5841"
    integrity sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==
  
  "@types/prop-types@*":
    version "15.7.15"
    resolved "https://registry.yarnpkg.com/@types/prop-types/-/prop-types-15.7.15.tgz#e6e5a86d602beaca71ce5163fadf5f95d70931c7"
    integrity sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==
  
  "@types/react-dom@^18.3.0":
    version "18.3.7"
    resolved "https://registry.yarnpkg.com/@types/react-dom/-/react-dom-18.3.7.tgz#b89ddf2cd83b4feafcc4e2ea41afdfb95a0d194f"
    integrity sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==
  
  "@types/react@^18.3.3":
    version "18.3.24"
    resolved "https://registry.yarnpkg.com/@types/react/-/react-18.3.24.tgz#f6a5a4c613242dfe3af0dcee2b4ec47b92d9b6bd"
    integrity sha512-0dLEBsA1kI3OezMBF8nSsb7Nk19ZnsyE1LLhB8r27KbgU5H4pvuqZLdtE+aUkJVoXgTVuA+iLIwmZ0TuK4tx6A==
    dependencies:
      "@types/prop-types" "*"
      csstype "^3.0.2"
  
  "@typescript-eslint/eslint-plugin@7.18.0":
    version "7.18.0"
    resolved "https://registry.yarnpkg.com/@typescript-eslint/eslint-plugin/-/eslint-plugin-7.18.0.tgz#b16d3cf3ee76bf572fdf511e79c248bdec619ea3"
    integrity sha512-94EQTWZ40mzBc42ATNIBimBEDltSJ9RQHCC8vc/PDbxi4k8dVwUAv4o98dk50M1zB+JGFxp43FP7f8+FP8R6Sw==
    dependencies:
      "@eslint-community/regexpp" "^4.10.0"
      "@typescript-eslint/scope-manager" "7.18.0"
      "@typescript-eslint/type-utils" "7.18.0"
      "@typescript-eslint/utils" "7.18.0"
      "@typescript-eslint/visitor-keys" "7.18.0"
      graphemer "^1.4.0"
      ignore "^5.3.1"
      natural-compare "^1.4.0"
      ts-api-utils "^1.3.0"
  
  "@typescript-eslint/parser@7.18.0":
    version "7.18.0"
    resolved "https://registry.yarnpkg.com/@typescript-eslint/parser/-/parser-7.18.0.tgz#83928d0f1b7f4afa974098c64b5ce6f9051f96a0"
    integrity sha512-4Z+L8I2OqhZV8qA132M4wNL30ypZGYOQVBfMgxDH/K5UX0PNqTu1c6za9ST5r9+tavvHiTWmBnKzpCJ/GlVFtg==
    dependencies:
      "@typescript-eslint/scope-manager" "7.18.0"
      "@typescript-eslint/types" "7.18.0"
      "@typescript-eslint/typescript-estree" "7.18.0"
      "@typescript-eslint/visitor-keys" "7.18.0"
      debug "^4.3.4"
  
  "@typescript-eslint/scope-manager@7.18.0":
    version "7.18.0"
    resolved "https://registry.yarnpkg.com/@typescript-eslint/scope-manager/-/scope-manager-7.18.0.tgz#c928e7a9fc2c0b3ed92ab3112c614d6bd9951c83"
    integrity sha512-jjhdIE/FPF2B7Z1uzc6i3oWKbGcHb87Qw7AWj6jmEqNOfDFbJWtjt/XfwCpvNkpGWlcJaog5vTR+VV8+w9JflA==
    dependencies:
      "@typescript-eslint/types" "7.18.0"
      "@typescript-eslint/visitor-keys" "7.18.0"
  
  "@typescript-eslint/type-utils@7.18.0":
    version "7.18.0"
    resolved "https://registry.yarnpkg.com/@typescript-eslint/type-utils/-/type-utils-7.18.0.tgz#2165ffaee00b1fbbdd2d40aa85232dab6998f53b"
    integrity sha512-XL0FJXuCLaDuX2sYqZUUSOJ2sG5/i1AAze+axqmLnSkNEVMVYLF+cbwlB2w8D1tinFuSikHmFta+P+HOofrLeA==
    dependencies:
      "@typescript-eslint/typescript-estree" "7.18.0"
      "@typescript-eslint/utils" "7.18.0"
      debug "^4.3.4"
      ts-api-utils "^1.3.0"
  
  "@typescript-eslint/types@7.18.0":
    version "7.18.0"
    resolved "https://registry.yarnpkg.com/@typescript-eslint/types/-/types-7.18.0.tgz#b90a57ccdea71797ffffa0321e744f379ec838c9"
    integrity sha512-iZqi+Ds1y4EDYUtlOOC+aUmxnE9xS/yCigkjA7XpTKV6nCBd3Hp/PRGGmdwnfkV2ThMyYldP1wRpm/id99spTQ==
  
  "@typescript-eslint/typescript-estree@7.18.0":
    version "7.18.0"
    resolved "https://registry.yarnpkg.com/@typescript-eslint/typescript-estree/-/typescript-estree-7.18.0.tgz#b5868d486c51ce8f312309ba79bdb9f331b37931"
    integrity sha512-aP1v/BSPnnyhMHts8cf1qQ6Q1IFwwRvAQGRvBFkWlo3/lH29OXA3Pts+c10nxRxIBrDnoMqzhgdwVe5f2D6OzA==
    dependencies:
      "@typescript-eslint/types" "7.18.0"
      "@typescript-eslint/visitor-keys" "7.18.0"
      debug "^4.3.4"
      globby "^11.1.0"
      is-glob "^4.0.3"
      minimatch "^9.0.4"
      semver "^7.6.0"
      ts-api-utils "^1.3.0"
  
  "@typescript-eslint/utils@7.18.0":
    version "7.18.0"
    resolved "https://registry.yarnpkg.com/@typescript-eslint/utils/-/utils-7.18.0.tgz#bca01cde77f95fc6a8d5b0dbcbfb3d6ca4be451f"
    integrity sha512-kK0/rNa2j74XuHVcoCZxdFBMF+aq/vH83CXAOHieC+2Gis4mF8jJXT5eAfyD3K0sAxtPuwxaIOIOvhwzVDt/kw==
    dependencies:
      "@eslint-community/eslint-utils" "^4.4.0"
      "@typescript-eslint/scope-manager" "7.18.0"
      "@typescript-eslint/types" "7.18.0"
      "@typescript-eslint/typescript-estree" "7.18.0"
  
  "@typescript-eslint/visitor-keys@7.18.0":
    version "7.18.0"
    resolved "https://registry.yarnpkg.com/@typescript-eslint/visitor-keys/-/visitor-keys-7.18.0.tgz#0564629b6124d67607378d0f0332a0495b25e7d7"
    integrity sha512-cDF0/Gf81QpY3xYyJKDV14Zwdmid5+uuENhjH2EqFaF0ni+yAyq/LzMaIJdhNJXZI7uLzwIlA+V7oWoyn6Curg==
    dependencies:
      "@typescript-eslint/types" "7.18.0"
      eslint-visitor-keys "^3.4.3"
  
  "@vitejs/plugin-react@^4.3.1":
    version "4.7.0"
    resolved "https://registry.yarnpkg.com/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz#647af4e7bb75ad3add578e762ad984b90f4a24b9"
    integrity sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==
    dependencies:
      "@babel/core" "^7.28.0"
      "@babel/plugin-transform-react-jsx-self" "^7.27.1"
      "@babel/plugin-transform-react-jsx-source" "^7.27.1"
      "@rolldown/pluginutils" "1.0.0-beta.27"
      "@types/babel__core" "^7.20.5"
      react-refresh "^0.17.0"
  
  acorn-jsx@^5.3.2:
    version "5.3.2"
    resolved "https://registry.yarnpkg.com/acorn-jsx/-/acorn-jsx-5.3.2.tgz#7ed5bb55908b3b2f1bc55c6af1653bada7f07937"
    integrity sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==
  
  acorn@^8.15.0:
    version "8.15.0"
    resolved "https://registry.yarnpkg.com/acorn/-/acorn-8.15.0.tgz#a360898bc415edaac46c8241f6383975b930b816"
    integrity sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==
  
  ajv@^6.12.4:
    version "6.12.6"
    resolved "https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4"
    integrity sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==
    dependencies:
      fast-deep-equal "^3.1.1"
      fast-json-stable-stringify "^2.0.0"
      json-schema-traverse "^0.4.1"
      uri-js "^4.2.2"
  
  ansi-regex@^5.0.1:
    version "5.0.1"
    resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.1.tgz#082cb2c89c9fe8659a311a53bd6a4dc5301db304"
    integrity sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==
  
  ansi-regex@^6.0.1:
    version "6.1.0"
    resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-6.1.0.tgz#95ec409c69619d6cb1b8b34f14b660ef28ebd654"
    integrity sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==
  
  ansi-styles@^4.0.0, ansi-styles@^4.1.0:
    version "4.3.0"
    resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-4.3.0.tgz#edd803628ae71c04c85ae7a0906edad34b648937"
    integrity sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==
    dependencies:
      color-convert "^2.0.1"
  
  ansi-styles@^6.1.0:
    version "6.2.1"
    resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-6.2.1.tgz#0e62320cf99c21afff3b3012192546aacbfb05c5"
    integrity sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==
  
  any-promise@^1.0.0:
    version "1.3.0"
    resolved "https://registry.yarnpkg.com/any-promise/-/any-promise-1.3.0.tgz#abc6afeedcea52e809cdc0376aed3ce39635d17f"
    integrity sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==
  
  anymatch@~3.1.2:
    version "3.1.3"
    resolved "https://registry.yarnpkg.com/anymatch/-/anymatch-3.1.3.tgz#790c58b19ba1720a84205b57c618d5ad8524973e"
    integrity sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==
    dependencies:
      normalize-path "^3.0.0"
      picomatch "^2.0.4"
  
  arg@^5.0.2:
    version "5.0.2"
    resolved "https://registry.yarnpkg.com/arg/-/arg-5.0.2.tgz#c81433cc427c92c4dcf4865142dbca6f15acd59c"
    integrity sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==
  
  argparse@^2.0.1:
    version "2.0.1"
    resolved "https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38"
    integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==
  
  array-union@^2.1.0:
    version "2.1.0"
    resolved "https://registry.yarnpkg.com/array-union/-/array-union-2.1.0.tgz#b798420adbeb1de828d84acd8a2e23d3efe85e8d"
    integrity sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==
  
  asynckit@^0.4.0:
    version "0.4.0"
    resolved "https://registry.yarnpkg.com/asynckit/-/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79"
    integrity sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==
  
  autoprefixer@^10.4.19:
    version "10.4.21"
    resolved "https://registry.yarnpkg.com/autoprefixer/-/autoprefixer-10.4.21.tgz#77189468e7a8ad1d9a37fbc08efc9f480cf0a95d"
    integrity sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==
    dependencies:
      browserslist "^4.24.4"
      caniuse-lite "^1.0.30001702"
      fraction.js "^4.3.7"
      normalize-range "^0.1.2"
      picocolors "^1.1.1"
      postcss-value-parser "^4.2.0"
  
  axios@^1.7.2:
    version "1.12.2"
    resolved "https://registry.yarnpkg.com/axios/-/axios-1.12.2.tgz#6c307390136cf7a2278d09cec63b136dfc6e6da7"
    integrity sha512-vMJzPewAlRyOgxV2dU0Cuz2O8zzzx9VYtbJOaBgXFeLc4IV/Eg50n4LowmehOOR61S8ZMpc2K5Sa7g6A4jfkUw==
    dependencies:
      follow-redirects "^1.15.6"
      form-data "^4.0.4"
      proxy-from-env "^1.1.0"
  
  balanced-match@^1.0.0:
    version "1.0.2"
    resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.2.tgz#e83e3a7e3f300b34cb9d87f615fa0cbf357690ee"
    integrity sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==
  
  binary-extensions@^2.0.0:
    version "2.3.0"
    resolved "https://registry.yarnpkg.com/binary-extensions/-/binary-extensions-2.3.0.tgz#f6e14a97858d327252200242d4ccfe522c445522"
    integrity sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==
  
  brace-expansion@^1.1.7:
    version "1.1.12"
    resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.12.tgz#ab9b454466e5a8cc3a187beaad580412a9c5b843"
    integrity sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==
    dependencies:
      balanced-match "^1.0.0"
      concat-map "0.0.1"
  
  brace-expansion@^2.0.1:
    version "2.0.2"
    resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-2.0.2.tgz#54fc53237a613d854c7bd37463aad17df87214e7"
    integrity sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==
    dependencies:
      balanced-match "^1.0.0"
  
  braces@^3.0.3, braces@~3.0.2:
    version "3.0.3"
    resolved "https://registry.yarnpkg.com/braces/-/braces-3.0.3.tgz#490332f40919452272d55a8480adc0c441358789"
    integrity sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==
    dependencies:
      fill-range "^7.1.1"
  
  browserslist@^4.24.0, browserslist@^4.24.4:
    version "4.25.0"
    resolved "https://registry.yarnpkg.com/browserslist/-/browserslist-4.25.0.tgz#986aa9c6d87916885da2b50d8eb577ac8d133b2c"
    integrity sha512-PJ8gYKeS5e/whHBh8xrwYK+dAvEj7JXtz6uTucnMRB8OiGTsKccFekoRrjajPBHV8oOY+2tI4uxeceSimKwMFA==
    dependencies:
      caniuse-lite "^1.0.30001718"
      electron-to-chromium "^1.5.160"
      node-releases "^2.0.19"
      update-browserslist-db "^1.1.3"
  
  call-bind-apply-helpers@^1.0.1, call-bind-apply-helpers@^1.0.2:
    version "1.0.2"
    resolved "https://registry.yarnpkg.com/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz#4b5428c222be985d79c3d82657479dbe0b59b2d6"
    integrity sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==
    dependencies:
      es-errors "^1.3.0"
      function-bind "^1.1.2"
  
  callsites@^3.0.0:
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/callsites/-/callsites-3.1.0.tgz#b3630abd8943432f54b3f0519238e33cd7df2f73"
    integrity sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==
  
  camelcase-css@^2.0.1:
    version "2.0.1"
    resolved "https://registry.yarnpkg.com/camelcase-css/-/camelcase-css-2.0.1.tgz#ee978f6947914cc30c6b44741b6ed1df7f043fd5"
    integrity sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==
  
  caniuse-lite@^1.0.30001702, caniuse-lite@^1.0.30001718:
    version "1.0.30001723"
    resolved "https://registry.yarnpkg.com/caniuse-lite/-/caniuse-lite-1.0.30001723.tgz#c4f3174f02089720736e1887eab345e09bb10944"
    integrity sha512-1R/elMjtehrFejxwmexeXAtae5UO9iSyFn6G/I806CYC/BLyyBk1EPhrKBkWhy6wM6Xnm47dSJQec+tLJ39WHw==
  
  chalk@^4.0.0:
    version "4.1.2"
    resolved "https://registry.yarnpkg.com/chalk/-/chalk-4.1.2.tgz#aac4e2b7734a740867aeb16bf02aad556a1e7a01"
    integrity sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==
    dependencies:
      ansi-styles "^4.1.0"
      supports-color "^7.1.0"
  
  chokidar@^3.6.0:
    version "3.6.0"
    resolved "https://registry.yarnpkg.com/chokidar/-/chokidar-3.6.0.tgz#197c6cc669ef2a8dc5e7b4d97ee4e092c3eb0d5b"
    integrity sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==
    dependencies:
      anymatch "~3.1.2"
      braces "~3.0.2"
      glob-parent "~5.1.2"
      is-binary-path "~2.1.0"
      is-glob "~4.0.1"
      normalize-path "~3.0.0"
      readdirp "~3.6.0"
    optionalDependencies:
      fsevents "~2.3.2"
  
  classcat@^5.0.3, classcat@^5.0.4:
    version "5.0.5"
    resolved "https://registry.yarnpkg.com/classcat/-/classcat-5.0.5.tgz#8c209f359a93ac302404a10161b501eba9c09c77"
    integrity sha512-JhZUT7JFcQy/EzW605k/ktHtncoo9vnyW/2GspNYwFlN1C/WmjuV/xtS04e9SOkL2sTdw0VAZ2UGCcQ9lR6p6w==
  
  clsx@^2.0.0, clsx@^2.1.1:
    version "2.1.1"
    resolved "https://registry.yarnpkg.com/clsx/-/clsx-2.1.1.tgz#eed397c9fd8bd882bfb18deab7102049a2f32999"
    integrity sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==
  
  color-convert@^2.0.1:
    version "2.0.1"
    resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-2.0.1.tgz#72d3a68d598c9bdb3af2ad1e84f21d896abd4de3"
    integrity sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==
    dependencies:
      color-name "~1.1.4"
  
  color-name@~1.1.4:
    version "1.1.4"
    resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.4.tgz#c2a09a87acbde69543de6f63fa3995c826c536a2"
    integrity sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==
  
  combined-stream@^1.0.8:
    version "1.0.8"
    resolved "https://registry.yarnpkg.com/combined-stream/-/combined-stream-1.0.8.tgz#c3d45a8b34fd730631a110a8a2520682b31d5a7f"
    integrity sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==
    dependencies:
      delayed-stream "~1.0.0"
  
  commander@^4.0.0:
    version "4.1.1"
    resolved "https://registry.yarnpkg.com/commander/-/commander-4.1.1.tgz#9fd602bd936294e9e9ef46a3f4d6964044b18068"
    integrity sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==
  
  concat-map@0.0.1:
    version "0.0.1"
    resolved "https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b"
    integrity sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==
  
  convert-source-map@^2.0.0:
    version "2.0.0"
    resolved "https://registry.yarnpkg.com/convert-source-map/-/convert-source-map-2.0.0.tgz#4b560f649fc4e918dd0ab75cf4961e8bc882d82a"
    integrity sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==
  
  cross-spawn@^7.0.6:
    version "7.0.6"
    resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-7.0.6.tgz#8a58fe78f00dcd70c370451759dfbfaf03e8ee9f"
    integrity sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==
    dependencies:
      path-key "^3.1.0"
      shebang-command "^2.0.0"
      which "^2.0.1"
  
  cssesc@^3.0.0:
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/cssesc/-/cssesc-3.0.0.tgz#37741919903b868565e1c09ea747445cd18983ee"
    integrity sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==
  
  csstype@^3.0.2:
    version "3.1.3"
    resolved "https://registry.yarnpkg.com/csstype/-/csstype-3.1.3.tgz#d80ff294d114fb0e6ac500fbf85b60137d7eff81"
    integrity sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==
  
  "d3-array@2 - 3", "d3-array@2.10.0 - 3", d3-array@^3.1.6:
    version "3.2.4"
    resolved "https://registry.yarnpkg.com/d3-array/-/d3-array-3.2.4.tgz#15fec33b237f97ac5d7c986dc77da273a8ed0bb5"
    integrity sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==
    dependencies:
      internmap "1 - 2"
  
  "d3-color@1 - 3":
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/d3-color/-/d3-color-3.1.0.tgz#395b2833dfac71507f12ac2f7af23bf819de24e2"
    integrity sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==
  
  "d3-dispatch@1 - 3":
    version "3.0.1"
    resolved "https://registry.yarnpkg.com/d3-dispatch/-/d3-dispatch-3.0.1.tgz#5fc75284e9c2375c36c839411a0cf550cbfc4d5e"
    integrity sha512-rzUyPU/S7rwUflMyLc1ETDeBj0NRuHKKAcvukozwhshr6g6c5d8zh4c2gQjY2bZ0dXeGLWc1PF174P2tVvKhfg==
  
  "d3-drag@2 - 3", d3-drag@^3.0.0:
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/d3-drag/-/d3-drag-3.0.0.tgz#994aae9cd23c719f53b5e10e3a0a6108c69607ba"
    integrity sha512-pWbUJLdETVA8lQNJecMxoXfH6x+mO2UQo8rSmZ+QqxcbyA3hfeprFgIT//HW2nlHChWeIIMwS2Fq+gEARkhTkg==
    dependencies:
      d3-dispatch "1 - 3"
      d3-selection "3"
  
  "d3-ease@1 - 3", d3-ease@^3.0.1:
    version "3.0.1"
    resolved "https://registry.yarnpkg.com/d3-ease/-/d3-ease-3.0.1.tgz#9658ac38a2140d59d346160f1f6c30fda0bd12f4"
    integrity sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==
  
  "d3-format@1 - 3":
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/d3-format/-/d3-format-3.1.0.tgz#9260e23a28ea5cb109e93b21a06e24e2ebd55641"
    integrity sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==
  
  "d3-interpolate@1 - 3", "d3-interpolate@1.2.0 - 3", d3-interpolate@^3.0.1:
    version "3.0.1"
    resolved "https://registry.yarnpkg.com/d3-interpolate/-/d3-interpolate-3.0.1.tgz#3c47aa5b32c5b3dfb56ef3fd4342078a632b400d"
    integrity sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==
    dependencies:
      d3-color "1 - 3"
  
  d3-path@^3.1.0:
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/d3-path/-/d3-path-3.1.0.tgz#22df939032fb5a71ae8b1800d61ddb7851c42526"
    integrity sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==
  
  d3-scale@^4.0.2:
    version "4.0.2"
    resolved "https://registry.yarnpkg.com/d3-scale/-/d3-scale-4.0.2.tgz#82b38e8e8ff7080764f8dcec77bd4be393689396"
    integrity sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==
    dependencies:
      d3-array "2.10.0 - 3"
      d3-format "1 - 3"
      d3-interpolate "1.2.0 - 3"
      d3-time "2.1.1 - 3"
      d3-time-format "2 - 4"
  
  "d3-selection@2 - 3", d3-selection@3, d3-selection@^3.0.0:
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/d3-selection/-/d3-selection-3.0.0.tgz#c25338207efa72cc5b9bd1458a1a41901f1e1b31"
    integrity sha512-fmTRWbNMmsmWq6xJV8D19U/gw/bwrHfNXxrIN+HfZgnzqTHp9jOmKMhsTUjXOJnZOdZY9Q28y4yebKzqDKlxlQ==
  
  d3-shape@^3.1.0:
    version "3.2.0"
    resolved "https://registry.yarnpkg.com/d3-shape/-/d3-shape-3.2.0.tgz#a1a839cbd9ba45f28674c69d7f855bcf91dfc6a5"
    integrity sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==
    dependencies:
      d3-path "^3.1.0"
  
  "d3-time-format@2 - 4":
    version "4.1.0"
    resolved "https://registry.yarnpkg.com/d3-time-format/-/d3-time-format-4.1.0.tgz#7ab5257a5041d11ecb4fe70a5c7d16a195bb408a"
    integrity sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==
    dependencies:
      d3-time "1 - 3"
  
  "d3-time@1 - 3", "d3-time@2.1.1 - 3", d3-time@^3.0.0:
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/d3-time/-/d3-time-3.1.0.tgz#9310db56e992e3c0175e1ef385e545e48a9bb5c7"
    integrity sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==
    dependencies:
      d3-array "2 - 3"
  
  "d3-timer@1 - 3", d3-timer@^3.0.1:
    version "3.0.1"
    resolved "https://registry.yarnpkg.com/d3-timer/-/d3-timer-3.0.1.tgz#6284d2a2708285b1abb7e201eda4380af35e63b0"
    integrity sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==
  
  "d3-transition@2 - 3":
    version "3.0.1"
    resolved "https://registry.yarnpkg.com/d3-transition/-/d3-transition-3.0.1.tgz#6869fdde1448868077fdd5989200cb61b2a1645f"
    integrity sha512-ApKvfjsSR6tg06xrL434C0WydLr7JewBB3V+/39RMHsaXTOG0zmt/OAXeng5M5LBm0ojmxJrpomQVZ1aPvBL4w==
    dependencies:
      d3-color "1 - 3"
      d3-dispatch "1 - 3"
      d3-ease "1 - 3"
      d3-interpolate "1 - 3"
      d3-timer "1 - 3"
  
  d3-zoom@^3.0.0:
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/d3-zoom/-/d3-zoom-3.0.0.tgz#d13f4165c73217ffeaa54295cd6969b3e7aee8f3"
    integrity sha512-b8AmV3kfQaqWAuacbPuNbL6vahnOJflOhexLzMMNLga62+/nh0JzvJ0aO/5a5MVgUFGS7Hu1P9P03o3fJkDCyw==
    dependencies:
      d3-dispatch "1 - 3"
      d3-drag "2 - 3"
      d3-interpolate "1 - 3"
      d3-selection "2 - 3"
      d3-transition "2 - 3"
  
  date-fns@^3.6.0:
    version "3.6.0"
    resolved "https://registry.yarnpkg.com/date-fns/-/date-fns-3.6.0.tgz#f20ca4fe94f8b754951b24240676e8618c0206bf"
    integrity sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==
  
  debug@^4.1.0, debug@^4.3.1, debug@^4.3.2, debug@^4.3.4:
    version "4.4.1"
    resolved "https://registry.yarnpkg.com/debug/-/debug-4.4.1.tgz#e5a8bc6cbc4c6cd3e64308b0693a3d4fa550189b"
    integrity sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==
    dependencies:
      ms "^2.1.3"
  
  decimal.js-light@^2.4.1:
    version "2.5.1"
    resolved "https://registry.yarnpkg.com/decimal.js-light/-/decimal.js-light-2.5.1.tgz#134fd32508f19e208f4fb2f8dac0d2626a867934"
    integrity sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==
  
  deep-is@^0.1.3:
    version "0.1.4"
    resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.4.tgz#a6f2dce612fadd2ef1f519b73551f17e85199831"
    integrity sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==
  
  delayed-stream@~1.0.0:
    version "1.0.0"
    resolved "https://registry.yarnpkg.com/delayed-stream/-/delayed-stream-1.0.0.tgz#df3ae199acadfb7d440aaae0b29e2272b24ec619"
    integrity sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==
  
  didyoumean@^1.2.2:
    version "1.2.2"
    resolved "https://registry.yarnpkg.com/didyoumean/-/didyoumean-1.2.2.tgz#989346ffe9e839b4555ecf5666edea0d3e8ad037"
    integrity sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==
  
  dir-glob@^3.0.1:
    version "3.0.1"
    resolved "https://registry.yarnpkg.com/dir-glob/-/dir-glob-3.0.1.tgz#56dbf73d992a4a93ba1584f4534063fd2e41717f"
    integrity sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==
    dependencies:
      path-type "^4.0.0"
  
  dlv@^1.1.3:
    version "1.1.3"
    resolved "https://registry.yarnpkg.com/dlv/-/dlv-1.1.3.tgz#5c198a8a11453596e751494d49874bc7732f2e79"
    integrity sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==
  
  dom-helpers@^5.0.1:
    version "5.2.1"
    resolved "https://registry.yarnpkg.com/dom-helpers/-/dom-helpers-5.2.1.tgz#d9400536b2bf8225ad98fe052e029451ac40e902"
    integrity sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==
    dependencies:
      "@babel/runtime" "^7.8.7"
      csstype "^3.0.2"
  
  dunder-proto@^1.0.1:
    version "1.0.1"
    resolved "https://registry.yarnpkg.com/dunder-proto/-/dunder-proto-1.0.1.tgz#d7ae667e1dc83482f8b70fd0f6eefc50da30f58a"
    integrity sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==
    dependencies:
      call-bind-apply-helpers "^1.0.1"
      es-errors "^1.3.0"
      gopd "^1.2.0"
  
  eastasianwidth@^0.2.0:
    version "0.2.0"
    resolved "https://registry.yarnpkg.com/eastasianwidth/-/eastasianwidth-0.2.0.tgz#696ce2ec0aa0e6ea93a397ffcf24aa7840c827cb"
    integrity sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==
  
  electron-to-chromium@^1.5.160:
    version "1.5.170"
    resolved "https://registry.yarnpkg.com/electron-to-chromium/-/electron-to-chromium-1.5.170.tgz#9f6697de4339e24da8b234e4492a9ecb91f5989c"
    integrity sha512-GP+M7aeluQo9uAyiTCxgIj/j+PrWhMlY7LFVj8prlsPljd0Fdg9AprlfUi+OCSFWy9Y5/2D/Jrj9HS8Z4rpKWA==
  
  emoji-regex@^8.0.0:
    version "8.0.0"
    resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37"
    integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==
  
  emoji-regex@^9.2.2:
    version "9.2.2"
    resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-9.2.2.tgz#840c8803b0d8047f4ff0cf963176b32d4ef3ed72"
    integrity sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==
  
  es-define-property@^1.0.1:
    version "1.0.1"
    resolved "https://registry.yarnpkg.com/es-define-property/-/es-define-property-1.0.1.tgz#983eb2f9a6724e9303f61addf011c72e09e0b0fa"
    integrity sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==
  
  es-errors@^1.3.0:
    version "1.3.0"
    resolved "https://registry.yarnpkg.com/es-errors/-/es-errors-1.3.0.tgz#05f75a25dab98e4fb1dcd5e1472c0546d5057c8f"
    integrity sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==
  
  es-object-atoms@^1.0.0, es-object-atoms@^1.1.1:
    version "1.1.1"
    resolved "https://registry.yarnpkg.com/es-object-atoms/-/es-object-atoms-1.1.1.tgz#1c4f2c4837327597ce69d2ca190a7fdd172338c1"
    integrity sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==
    dependencies:
      es-errors "^1.3.0"
  
  es-set-tostringtag@^2.1.0:
    version "2.1.0"
    resolved "https://registry.yarnpkg.com/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz#f31dbbe0c183b00a6d26eb6325c810c0fd18bd4d"
    integrity sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==
    dependencies:
      es-errors "^1.3.0"
      get-intrinsic "^1.2.6"
      has-tostringtag "^1.0.2"
      hasown "^2.0.2"
  
  esbuild@^0.21.3:
    version "0.21.5"
    resolved "https://registry.yarnpkg.com/esbuild/-/esbuild-0.21.5.tgz#9ca301b120922959b766360d8ac830da0d02997d"
    integrity sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==
  
  escalade@^3.2.0:
    version "3.2.0"
    resolved "https://registry.yarnpkg.com/escalade/-/escalade-3.2.0.tgz#011a3f69856ba189dffa7dc8fcce99d2a87903e5"
    integrity sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==
  
  escape-string-regexp@^4.0.0:
    version "4.0.0"
    resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz#14ba83a5d373e3d311e5afca29cf5bfad965bf34"
    integrity sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==
  
  eslint-plugin-react-hooks@^4.6.2:
    version "4.6.2"
    resolved "https://registry.yarnpkg.com/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.6.2.tgz#c829eb06c0e6f484b3fbb85a97e57784f328c596"
    integrity sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==
  
  eslint-plugin-react-refresh@^0.4.7:
    version "0.4.21"
    resolved "https://registry.yarnpkg.com/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.21.tgz#37ec51d9ad261f12edd5758b17cc6a7e0fb6a893"
    integrity sha512-MWDWTtNC4voTcWDxXbdmBNe8b/TxfxRFUL6hXgKWJjN9c1AagYEmpiFWBWzDw+5H3SulWUe1pJKTnoSdmk88UA==
  
  eslint-scope@^8.4.0:
    version "8.4.0"
    resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-8.4.0.tgz#88e646a207fad61436ffa39eb505147200655c82"
    integrity sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==
    dependencies:
      esrecurse "^4.3.0"
      estraverse "^5.2.0"
  
  eslint-visitor-keys@^3.4.3:
    version "3.4.3"
    resolved "https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz#0cd72fe8550e3c2eae156a96a4dddcd1c8ac5800"
    integrity sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==
  
  eslint-visitor-keys@^4.2.1:
    version "4.2.1"
    resolved "https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz#4cfea60fe7dd0ad8e816e1ed026c1d5251b512c1"
    integrity sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==
  
  eslint@^9.5.0:
    version "9.36.0"
    resolved "https://registry.yarnpkg.com/eslint/-/eslint-9.36.0.tgz#9cc5cbbfb9c01070425d9bfed81b4e79a1c09088"
    integrity sha512-hB4FIzXovouYzwzECDcUkJ4OcfOEkXTv2zRY6B9bkwjx/cprAq0uvm1nl7zvQ0/TsUk0zQiN4uPfJpB9m+rPMQ==
    dependencies:
      "@eslint-community/eslint-utils" "^4.8.0"
      "@eslint-community/regexpp" "^4.12.1"
      "@eslint/config-array" "^0.21.0"
      "@eslint/config-helpers" "^0.3.1"
      "@eslint/core" "^0.15.2"
      "@eslint/eslintrc" "^3.3.1"
      "@eslint/js" "9.36.0"
      "@eslint/plugin-kit" "^0.3.5"
      "@humanfs/node" "^0.16.6"
      "@humanwhocodes/module-importer" "^1.0.1"
      "@humanwhocodes/retry" "^0.4.2"
      "@types/estree" "^1.0.6"
      "@types/json-schema" "^7.0.15"
      ajv "^6.12.4"
      chalk "^4.0.0"
      cross-spawn "^7.0.6"
      debug "^4.3.2"
      escape-string-regexp "^4.0.0"
      eslint-scope "^8.4.0"
      eslint-visitor-keys "^4.2.1"
      espree "^10.4.0"
      esquery "^1.5.0"
      esutils "^2.0.2"
      fast-deep-equal "^3.1.3"
      file-entry-cache "^8.0.0"
      find-up "^5.0.0"
      glob-parent "^6.0.2"
      ignore "^5.2.0"
      imurmurhash "^0.1.4"
      is-glob "^4.0.0"
      json-stable-stringify-without-jsonify "^1.0.1"
      lodash.merge "^4.6.2"
      minimatch "^3.1.2"
      natural-compare "^1.4.0"
      optionator "^0.9.3"
  
  espree@^10.0.1, espree@^10.4.0:
    version "10.4.0"
    resolved "https://registry.yarnpkg.com/espree/-/espree-10.4.0.tgz#d54f4949d4629005a1fa168d937c3ff1f7e2a837"
    integrity sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==
    dependencies:
      acorn "^8.15.0"
      acorn-jsx "^5.3.2"
      eslint-visitor-keys "^4.2.1"
  
  esquery@^1.5.0:
    version "1.6.0"
    resolved "https://registry.yarnpkg.com/esquery/-/esquery-1.6.0.tgz#91419234f804d852a82dceec3e16cdc22cf9dae7"
    integrity sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==
    dependencies:
      estraverse "^5.1.0"
  
  esrecurse@^4.3.0:
    version "4.3.0"
    resolved "https://registry.yarnpkg.com/esrecurse/-/esrecurse-4.3.0.tgz#7ad7964d679abb28bee72cec63758b1c5d2c9921"
    integrity sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==
    dependencies:
      estraverse "^5.2.0"
  
  estraverse@^5.1.0, estraverse@^5.2.0:
    version "5.3.0"
    resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-5.3.0.tgz#2eea5290702f26ab8fe5370370ff86c965d21123"
    integrity sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==
  
  esutils@^2.0.2:
    version "2.0.3"
    resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.3.tgz#74d2eb4de0b8da1293711910d50775b9b710ef64"
    integrity sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==
  
  eventemitter3@^4.0.1:
    version "4.0.7"
    resolved "https://registry.yarnpkg.com/eventemitter3/-/eventemitter3-4.0.7.tgz#2de9b68f6528d5644ef5c59526a1b4a07306169f"
    integrity sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==
  
  fast-deep-equal@^3.1.1, fast-deep-equal@^3.1.3:
    version "3.1.3"
    resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz#3a7d56b559d6cbc3eb512325244e619a65c6c525"
    integrity sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==
  
  fast-equals@^5.0.1:
    version "5.3.0"
    resolved "https://registry.yarnpkg.com/fast-equals/-/fast-equals-5.3.0.tgz#5c92fb92053a498908a527d9586aa24b393513cb"
    integrity sha512-xwP+dG/in/nJelMOUEQBiIYeOoHKihWPB2sNZ8ZeDbZFoGb1OwTGMggGRgg6CRitNx7kmHgtIz2dOHDQ8Ap7Bw==
  
  fast-glob@^3.2.9, fast-glob@^3.3.2:
    version "3.3.3"
    resolved "https://registry.yarnpkg.com/fast-glob/-/fast-glob-3.3.3.tgz#d06d585ce8dba90a16b0505c543c3ccfb3aeb818"
    integrity sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==
    dependencies:
      "@nodelib/fs.stat" "^2.0.2"
      "@nodelib/fs.walk" "^1.2.3"
      glob-parent "^5.1.2"
      merge2 "^1.3.0"
      micromatch "^4.0.8"
  
  fast-json-stable-stringify@^2.0.0:
    version "2.1.0"
    resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633"
    integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==
  
  fast-levenshtein@^2.0.6:
    version "2.0.6"
    resolved "https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917"
    integrity sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==
  
  fastq@^1.6.0:
    version "1.19.1"
    resolved "https://registry.yarnpkg.com/fastq/-/fastq-1.19.1.tgz#d50eaba803c8846a883c16492821ebcd2cda55f5"
    integrity sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==
    dependencies:
      reusify "^1.0.4"
  
  file-entry-cache@^8.0.0:
    version "8.0.0"
    resolved "https://registry.yarnpkg.com/file-entry-cache/-/file-entry-cache-8.0.0.tgz#7787bddcf1131bffb92636c69457bbc0edd6d81f"
    integrity sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==
    dependencies:
      flat-cache "^4.0.0"
  
  fill-range@^7.1.1:
    version "7.1.1"
    resolved "https://registry.yarnpkg.com/fill-range/-/fill-range-7.1.1.tgz#44265d3cac07e3ea7dc247516380643754a05292"
    integrity sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==
    dependencies:
      to-regex-range "^5.0.1"
  
  find-up@^5.0.0:
    version "5.0.0"
    resolved "https://registry.yarnpkg.com/find-up/-/find-up-5.0.0.tgz#4c92819ecb7083561e4f4a240a86be5198f536fc"
    integrity sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==
    dependencies:
      locate-path "^6.0.0"
      path-exists "^4.0.0"
  
  flat-cache@^4.0.0:
    version "4.0.1"
    resolved "https://registry.yarnpkg.com/flat-cache/-/flat-cache-4.0.1.tgz#0ece39fcb14ee012f4b0410bd33dd9c1f011127c"
    integrity sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==
    dependencies:
      flatted "^3.2.9"
      keyv "^4.5.4"
  
  flatted@^3.2.9:
    version "3.3.3"
    resolved "https://registry.yarnpkg.com/flatted/-/flatted-3.3.3.tgz#67c8fad95454a7c7abebf74bb78ee74a44023358"
    integrity sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==
  
  follow-redirects@^1.15.6:
    version "1.15.9"
    resolved "https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.9.tgz#a604fa10e443bf98ca94228d9eebcc2e8a2c8ee1"
    integrity sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==
  
  foreground-child@^3.1.0:
    version "3.3.1"
    resolved "https://registry.yarnpkg.com/foreground-child/-/foreground-child-3.3.1.tgz#32e8e9ed1b68a3497befb9ac2b6adf92a638576f"
    integrity sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==
    dependencies:
      cross-spawn "^7.0.6"
      signal-exit "^4.0.1"
  
  form-data@^4.0.4:
    version "4.0.4"
    resolved "https://registry.yarnpkg.com/form-data/-/form-data-4.0.4.tgz#784cdcce0669a9d68e94d11ac4eea98088edd2c4"
    integrity sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==
    dependencies:
      asynckit "^0.4.0"
      combined-stream "^1.0.8"
      es-set-tostringtag "^2.1.0"
      hasown "^2.0.2"
      mime-types "^2.1.12"
  
  fraction.js@^4.3.7:
    version "4.3.7"
    resolved "https://registry.yarnpkg.com/fraction.js/-/fraction.js-4.3.7.tgz#06ca0085157e42fda7f9e726e79fefc4068840f7"
    integrity sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==
  
  framer-motion@^11.2.12:
    version "11.18.2"
    resolved "https://registry.yarnpkg.com/framer-motion/-/framer-motion-11.18.2.tgz#0c6bd05677f4cfd3b3bdead4eb5ecdd5ed245718"
    integrity sha512-5F5Och7wrvtLVElIpclDT0CBzMVg3dL22B64aZwHtsIY8RB4mXICLrkajK4G9R+ieSAGcgrLeae2SeUTg2pr6w==
    dependencies:
      motion-dom "^11.18.1"
      motion-utils "^11.18.1"
      tslib "^2.4.0"
  
  fsevents@~2.3.2, fsevents@~2.3.3:
    version "2.3.3"
    resolved "https://registry.yarnpkg.com/fsevents/-/fsevents-2.3.3.tgz#cac6407785d03675a2a5e1a5305c697b347d90d6"
    integrity sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==
  
  function-bind@^1.1.2:
    version "1.1.2"
    resolved "https://registry.yarnpkg.com/function-bind/-/function-bind-1.1.2.tgz#2c02d864d97f3ea6c8830c464cbd11ab6eab7a1c"
    integrity sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==
  
  gensync@^1.0.0-beta.2:
    version "1.0.0-beta.2"
    resolved "https://registry.yarnpkg.com/gensync/-/gensync-1.0.0-beta.2.tgz#32a6ee76c3d7f52d46b2b1ae5d93fea8580a25e0"
    integrity sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==
  
  get-intrinsic@^1.2.6:
    version "1.3.0"
    resolved "https://registry.yarnpkg.com/get-intrinsic/-/get-intrinsic-1.3.0.tgz#743f0e3b6964a93a5491ed1bffaae054d7f98d01"
    integrity sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==
    dependencies:
      call-bind-apply-helpers "^1.0.2"
      es-define-property "^1.0.1"
      es-errors "^1.3.0"
      es-object-atoms "^1.1.1"
      function-bind "^1.1.2"
      get-proto "^1.0.1"
      gopd "^1.2.0"
      has-symbols "^1.1.0"
      hasown "^2.0.2"
      math-intrinsics "^1.1.0"
  
  get-proto@^1.0.1:
    version "1.0.1"
    resolved "https://registry.yarnpkg.com/get-proto/-/get-proto-1.0.1.tgz#150b3f2743869ef3e851ec0c49d15b1d14d00ee1"
    integrity sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==
    dependencies:
      dunder-proto "^1.0.1"
      es-object-atoms "^1.0.0"
  
  glob-parent@^5.1.2, glob-parent@~5.1.2:
    version "5.1.2"
    resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-5.1.2.tgz#869832c58034fe68a4093c17dc15e8340d8401c4"
    integrity sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==
    dependencies:
      is-glob "^4.0.1"
  
  glob-parent@^6.0.2:
    version "6.0.2"
    resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-6.0.2.tgz#6d237d99083950c79290f24c7642a3de9a28f9e3"
    integrity sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==
    dependencies:
      is-glob "^4.0.3"
  
  glob@^10.3.10:
    version "10.4.5"
    resolved "https://registry.yarnpkg.com/glob/-/glob-10.4.5.tgz#f4d9f0b90ffdbab09c9d77f5f29b4262517b0956"
    integrity sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==
    dependencies:
      foreground-child "^3.1.0"
      jackspeak "^3.1.2"
      minimatch "^9.0.4"
      minipass "^7.1.2"
      package-json-from-dist "^1.0.0"
      path-scurry "^1.11.1"
  
  globals@^11.1.0:
    version "11.12.0"
    resolved "https://registry.yarnpkg.com/globals/-/globals-11.12.0.tgz#ab8795338868a0babd8525758018c2a7eb95c42e"
    integrity sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==
  
  globals@^14.0.0:
    version "14.0.0"
    resolved "https://registry.yarnpkg.com/globals/-/globals-14.0.0.tgz#898d7413c29babcf6bafe56fcadded858ada724e"
    integrity sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==
  
  globals@^15.6.0:
    version "15.15.0"
    resolved "https://registry.yarnpkg.com/globals/-/globals-15.15.0.tgz#7c4761299d41c32b075715a4ce1ede7897ff72a8"
    integrity sha512-7ACyT3wmyp3I61S4fG682L0VA2RGD9otkqGJIwNUMF1SWUombIIk+af1unuDYgMm082aHYwD+mzJvv9Iu8dsgg==
  
  globby@^11.1.0:
    version "11.1.0"
    resolved "https://registry.yarnpkg.com/globby/-/globby-11.1.0.tgz#bd4be98bb042f83d796f7e3811991fbe82a0d34b"
    integrity sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==
    dependencies:
      array-union "^2.1.0"
      dir-glob "^3.0.1"
      fast-glob "^3.2.9"
      ignore "^5.2.0"
      merge2 "^1.4.1"
      slash "^3.0.0"
  
  gopd@^1.2.0:
    version "1.2.0"
    resolved "https://registry.yarnpkg.com/gopd/-/gopd-1.2.0.tgz#89f56b8217bdbc8802bd299df6d7f1081d7e51a1"
    integrity sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==
  
  graphemer@^1.4.0:
    version "1.4.0"
    resolved "https://registry.yarnpkg.com/graphemer/-/graphemer-1.4.0.tgz#fb2f1d55e0e3a1849aeffc90c4fa0dd53a0e66c6"
    integrity sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==
  
  has-flag@^4.0.0:
    version "4.0.0"
    resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-4.0.0.tgz#944771fd9c81c81265c4d6941860da06bb59479b"
    integrity sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==
  
  has-symbols@^1.0.3, has-symbols@^1.1.0:
    version "1.1.0"
    resolved "https://registry.yarnpkg.com/has-symbols/-/has-symbols-1.1.0.tgz#fc9c6a783a084951d0b971fe1018de813707a338"
    integrity sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==
  
  has-tostringtag@^1.0.2:
    version "1.0.2"
    resolved "https://registry.yarnpkg.com/has-tostringtag/-/has-tostringtag-1.0.2.tgz#2cdc42d40bef2e5b4eeab7c01a73c54ce7ab5abc"
    integrity sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==
    dependencies:
      has-symbols "^1.0.3"
  
  hasown@^2.0.2:
    version "2.0.2"
    resolved "https://registry.yarnpkg.com/hasown/-/hasown-2.0.2.tgz#003eaf91be7adc372e84ec59dc37252cedb80003"
    integrity sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==
    dependencies:
      function-bind "^1.1.2"
  
  html-parse-stringify@^3.0.1:
    version "3.0.1"
    resolved "https://registry.yarnpkg.com/html-parse-stringify/-/html-parse-stringify-3.0.1.tgz#dfc1017347ce9f77c8141a507f233040c59c55d2"
    integrity sha512-KknJ50kTInJ7qIScF3jeaFRpMpE8/lfiTdzf/twXyPBLAGrLRTmkz3AdTnKeh40X8k9L2fdYwEp/42WGXIRGcg==
    dependencies:
      void-elements "3.1.0"
  
  i18next-browser-languagedetector@^8.2.0:
    version "8.2.0"
    resolved "https://registry.yarnpkg.com/i18next-browser-languagedetector/-/i18next-browser-languagedetector-8.2.0.tgz#c3ca311e249d2f7d8bb9b3b13ac9af380a3b15b0"
    integrity sha512-P+3zEKLnOF0qmiesW383vsLdtQVyKtCNA9cjSoKCppTKPQVfKd2W8hbVo5ZhNJKDqeM7BOcvNoKJOjpHh4Js9g==
    dependencies:
      "@babel/runtime" "^7.23.2"
  
  i18next@^25.5.2:
    version "25.5.2"
    resolved "https://registry.yarnpkg.com/i18next/-/i18next-25.5.2.tgz#16efa309e154d46dac7583e6a315ccb47e3e3a10"
    integrity sha512-lW8Zeh37i/o0zVr+NoCHfNnfvVw+M6FQbRp36ZZ/NyHDJ3NJVpp2HhAUyU9WafL5AssymNoOjMRB48mmx2P6Hw==
    dependencies:
      "@babel/runtime" "^7.27.6"
  
  ignore@^5.2.0, ignore@^5.3.1:
    version "5.3.2"
    resolved "https://registry.yarnpkg.com/ignore/-/ignore-5.3.2.tgz#3cd40e729f3643fd87cb04e50bf0eb722bc596f5"
    integrity sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==
  
  import-fresh@^3.2.1:
    version "3.3.1"
    resolved "https://registry.yarnpkg.com/import-fresh/-/import-fresh-3.3.1.tgz#9cecb56503c0ada1f2741dbbd6546e4b13b57ccf"
    integrity sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==
    dependencies:
      parent-module "^1.0.0"
      resolve-from "^4.0.0"
  
  imurmurhash@^0.1.4:
    version "0.1.4"
    resolved "https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea"
    integrity sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==
  
  "internmap@1 - 2":
    version "2.0.3"
    resolved "https://registry.yarnpkg.com/internmap/-/internmap-2.0.3.tgz#6685f23755e43c524e251d29cbc97248e3061009"
    integrity sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==
  
  is-binary-path@~2.1.0:
    version "2.1.0"
    resolved "https://registry.yarnpkg.com/is-binary-path/-/is-binary-path-2.1.0.tgz#ea1f7f3b80f064236e83470f86c09c254fb45b09"
    integrity sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==
    dependencies:
      binary-extensions "^2.0.0"
  
  is-core-module@^2.16.0:
    version "2.16.1"
    resolved "https://registry.yarnpkg.com/is-core-module/-/is-core-module-2.16.1.tgz#2a98801a849f43e2add644fbb6bc6229b19a4ef4"
    integrity sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==
    dependencies:
      hasown "^2.0.2"
  
  is-extglob@^2.1.1:
    version "2.1.1"
    resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2"
    integrity sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==
  
  is-fullwidth-code-point@^3.0.0:
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz#f116f8064fe90b3f7844a38997c0b75051269f1d"
    integrity sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==
  
  is-glob@^4.0.0, is-glob@^4.0.1, is-glob@^4.0.3, is-glob@~4.0.1:
    version "4.0.3"
    resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-4.0.3.tgz#64f61e42cbbb2eec2071a9dac0b28ba1e65d5084"
    integrity sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==
    dependencies:
      is-extglob "^2.1.1"
  
  is-number@^7.0.0:
    version "7.0.0"
    resolved "https://registry.yarnpkg.com/is-number/-/is-number-7.0.0.tgz#7535345b896734d5f80c4d06c50955527a14f12b"
    integrity sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==
  
  isexe@^2.0.0:
    version "2.0.0"
    resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"
    integrity sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==
  
  jackspeak@^3.1.2:
    version "3.4.3"
    resolved "https://registry.yarnpkg.com/jackspeak/-/jackspeak-3.4.3.tgz#8833a9d89ab4acde6188942bd1c53b6390ed5a8a"
    integrity sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==
    dependencies:
      "@isaacs/cliui" "^8.0.2"
    optionalDependencies:
      "@pkgjs/parseargs" "^0.11.0"
  
  jiti@^1.21.6:
    version "1.21.7"
    resolved "https://registry.yarnpkg.com/jiti/-/jiti-1.21.7.tgz#9dd81043424a3d28458b193d965f0d18a2300ba9"
    integrity sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==
  
  "js-tokens@^3.0.0 || ^4.0.0", js-tokens@^4.0.0:
    version "4.0.0"
    resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
    integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
  
  js-yaml@^4.1.0:
    version "4.1.0"
    resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-4.1.0.tgz#c1fb65f8f5017901cdd2c951864ba18458a10602"
    integrity sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==
    dependencies:
      argparse "^2.0.1"
  
  jsesc@^3.0.2:
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/jsesc/-/jsesc-3.1.0.tgz#74d335a234f67ed19907fdadfac7ccf9d409825d"
    integrity sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==
  
  json-buffer@3.0.1:
    version "3.0.1"
    resolved "https://registry.yarnpkg.com/json-buffer/-/json-buffer-3.0.1.tgz#9338802a30d3b6605fbe0613e094008ca8c05a13"
    integrity sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==
  
  json-schema-traverse@^0.4.1:
    version "0.4.1"
    resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz#69f6a87d9513ab8bb8fe63bdb0979c448e684660"
    integrity sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==
  
  json-stable-stringify-without-jsonify@^1.0.1:
    version "1.0.1"
    resolved "https://registry.yarnpkg.com/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz#9db7b59496ad3f3cfef30a75142d2d930ad72651"
    integrity sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==
  
  json5@^2.2.3:
    version "2.2.3"
    resolved "https://registry.yarnpkg.com/json5/-/json5-2.2.3.tgz#78cd6f1a19bdc12b73db5ad0c61efd66c1e29283"
    integrity sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==
  
  keyv@^4.5.4:
    version "4.5.4"
    resolved "https://registry.yarnpkg.com/keyv/-/keyv-4.5.4.tgz#a879a99e29452f942439f2a405e3af8b31d4de93"
    integrity sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==
    dependencies:
      json-buffer "3.0.1"
  
  levn@^0.4.1:
    version "0.4.1"
    resolved "https://registry.yarnpkg.com/levn/-/levn-0.4.1.tgz#ae4562c007473b932a6200d403268dd2fffc6ade"
    integrity sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==
    dependencies:
      prelude-ls "^1.2.1"
      type-check "~0.4.0"
  
  lilconfig@^3.0.0, lilconfig@^3.1.3:
    version "3.1.3"
    resolved "https://registry.yarnpkg.com/lilconfig/-/lilconfig-3.1.3.tgz#a1bcfd6257f9585bf5ae14ceeebb7b559025e4c4"
    integrity sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==
  
  lines-and-columns@^1.1.6:
    version "1.2.4"
    resolved "https://registry.yarnpkg.com/lines-and-columns/-/lines-and-columns-1.2.4.tgz#eca284f75d2965079309dc0ad9255abb2ebc1632"
    integrity sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==
  
  locate-path@^6.0.0:
    version "6.0.0"
    resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-6.0.0.tgz#55321eb309febbc59c4801d931a72452a681d286"
    integrity sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==
    dependencies:
      p-locate "^5.0.0"
  
  lodash.merge@^4.6.2:
    version "4.6.2"
    resolved "https://registry.yarnpkg.com/lodash.merge/-/lodash.merge-4.6.2.tgz#558aa53b43b661e1925a0afdfa36a9a1085fe57a"
    integrity sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==
  
  lodash@^4.17.21:
    version "4.17.21"
    resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c"
    integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==
  
  loose-envify@^1.1.0, loose-envify@^1.4.0:
    version "1.4.0"
    resolved "https://registry.yarnpkg.com/loose-envify/-/loose-envify-1.4.0.tgz#71ee51fa7be4caec1a63839f7e682d8132d30caf"
    integrity sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==
    dependencies:
      js-tokens "^3.0.0 || ^4.0.0"
  
  lru-cache@^10.2.0:
    version "10.4.3"
    resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-10.4.3.tgz#410fc8a17b70e598013df257c2446b7f3383f119"
    integrity sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==
  
  lru-cache@^5.1.1:
    version "5.1.1"
    resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-5.1.1.tgz#1da27e6710271947695daf6848e847f01d84b920"
    integrity sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==
    dependencies:
      yallist "^3.0.2"
  
  lucide-react@^0.395.0:
    version "0.395.0"
    resolved "https://registry.yarnpkg.com/lucide-react/-/lucide-react-0.395.0.tgz#f538cbabc9719c2258c03355524ffdea36301a5f"
    integrity sha512-6hzdNH5723A4FLaYZWpK50iyZH8iS2Jq5zuPRRotOFkhu6kxxJiebVdJ72tCR5XkiIeYFOU5NUawFZOac+VeYw==
  
  math-intrinsics@^1.1.0:
    version "1.1.0"
    resolved "https://registry.yarnpkg.com/math-intrinsics/-/math-intrinsics-1.1.0.tgz#a0dd74be81e2aa5c2f27e65ce283605ee4e2b7f9"
    integrity sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==
  
  merge2@^1.3.0, merge2@^1.4.1:
    version "1.4.1"
    resolved "https://registry.yarnpkg.com/merge2/-/merge2-1.4.1.tgz#4368892f885e907455a6fd7dc55c0c9d404990ae"
    integrity sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==
  
  micromatch@^4.0.8:
    version "4.0.8"
    resolved "https://registry.yarnpkg.com/micromatch/-/micromatch-4.0.8.tgz#d66fa18f3a47076789320b9b1af32bd86d9fa202"
    integrity sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==
    dependencies:
      braces "^3.0.3"
      picomatch "^2.3.1"
  
  mime-db@1.52.0:
    version "1.52.0"
    resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.52.0.tgz#bbabcdc02859f4987301c856e3387ce5ec43bf70"
    integrity sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==
  
  mime-types@^2.1.12:
    version "2.1.35"
    resolved "https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.35.tgz#381a871b62a734450660ae3deee44813f70d959a"
    integrity sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==
    dependencies:
      mime-db "1.52.0"
  
  minimatch@^3.1.2:
    version "3.1.2"
    resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.1.2.tgz#19cd194bfd3e428f049a70817c038d89ab4be35b"
    integrity sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==
    dependencies:
      brace-expansion "^1.1.7"
  
  minimatch@^9.0.4:
    version "9.0.5"
    resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-9.0.5.tgz#d74f9dd6b57d83d8e98cfb82133b03978bc929e5"
    integrity sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==
    dependencies:
      brace-expansion "^2.0.1"
  
  "minipass@^5.0.0 || ^6.0.2 || ^7.0.0", minipass@^7.1.2:
    version "7.1.2"
    resolved "https://registry.yarnpkg.com/minipass/-/minipass-7.1.2.tgz#93a9626ce5e5e66bd4db86849e7515e92340a707"
    integrity sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==
  
  motion-dom@^11.18.1:
    version "11.18.1"
    resolved "https://registry.yarnpkg.com/motion-dom/-/motion-dom-11.18.1.tgz#e7fed7b7dc6ae1223ef1cce29ee54bec826dc3f2"
    integrity sha512-g76KvA001z+atjfxczdRtw/RXOM3OMSdd1f4DL77qCTF/+avrRJiawSG4yDibEQ215sr9kpinSlX2pCTJ9zbhw==
    dependencies:
      motion-utils "^11.18.1"
  
  motion-utils@^11.18.1:
    version "11.18.1"
    resolved "https://registry.yarnpkg.com/motion-utils/-/motion-utils-11.18.1.tgz#671227669833e991c55813cf337899f41327db5b"
    integrity sha512-49Kt+HKjtbJKLtgO/LKj9Ld+6vw9BjH5d9sc40R/kVyH8GLAXgT42M2NnuPcJNuA3s9ZfZBUcwIgpmZWGEE+hA==
  
  ms@^2.1.3:
    version "2.1.3"
    resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.3.tgz#574c8138ce1d2b5861f0b44579dbadd60c6615b2"
    integrity sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==
  
  mz@^2.7.0:
    version "2.7.0"
    resolved "https://registry.yarnpkg.com/mz/-/mz-2.7.0.tgz#95008057a56cafadc2bc63dde7f9ff6955948e32"
    integrity sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==
    dependencies:
      any-promise "^1.0.0"
      object-assign "^4.0.1"
      thenify-all "^1.0.0"
  
  nanoid@^3.3.11:
    version "3.3.11"
    resolved "https://registry.yarnpkg.com/nanoid/-/nanoid-3.3.11.tgz#4f4f112cefbe303202f2199838128936266d185b"
    integrity sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==
  
  natural-compare@^1.4.0:
    version "1.4.0"
    resolved "https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7"
    integrity sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==
  
  node-releases@^2.0.19:
    version "2.0.19"
    resolved "https://registry.yarnpkg.com/node-releases/-/node-releases-2.0.19.tgz#9e445a52950951ec4d177d843af370b411caf314"
    integrity sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==
  
  normalize-path@^3.0.0, normalize-path@~3.0.0:
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/normalize-path/-/normalize-path-3.0.0.tgz#0dcd69ff23a1c9b11fd0978316644a0388216a65"
    integrity sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==
  
  normalize-range@^0.1.2:
    version "0.1.2"
    resolved "https://registry.yarnpkg.com/normalize-range/-/normalize-range-0.1.2.tgz#2d10c06bdfd312ea9777695a4d28439456b75942"
    integrity sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==
  
  object-assign@^4.0.1, object-assign@^4.1.1:
    version "4.1.1"
    resolved "https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.1.tgz#2109adc7965887cfc05cbbd442cac8bfbb360863"
    integrity sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==
  
  object-hash@^3.0.0:
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/object-hash/-/object-hash-3.0.0.tgz#73f97f753e7baffc0e2cc9d6e079079744ac82e9"
    integrity sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==
  
  optionator@^0.9.3:
    version "0.9.4"
    resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.9.4.tgz#7ea1c1a5d91d764fb282139c88fe11e182a3a734"
    integrity sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==
    dependencies:
      deep-is "^0.1.3"
      fast-levenshtein "^2.0.6"
      levn "^0.4.1"
      prelude-ls "^1.2.1"
      type-check "^0.4.0"
      word-wrap "^1.2.5"
  
  p-limit@^3.0.2:
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-3.1.0.tgz#e1daccbe78d0d1388ca18c64fea38e3e57e3706b"
    integrity sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==
    dependencies:
      yocto-queue "^0.1.0"
  
  p-locate@^5.0.0:
    version "5.0.0"
    resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-5.0.0.tgz#83c8315c6785005e3bd021839411c9e110e6d834"
    integrity sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==
    dependencies:
      p-limit "^3.0.2"
  
  package-json-from-dist@^1.0.0:
    version "1.0.1"
    resolved "https://registry.yarnpkg.com/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz#4f1471a010827a86f94cfd9b0727e36d267de505"
    integrity sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==
  
  parent-module@^1.0.0:
    version "1.0.1"
    resolved "https://registry.yarnpkg.com/parent-module/-/parent-module-1.0.1.tgz#691d2709e78c79fae3a156622452d00762caaaa2"
    integrity sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==
    dependencies:
      callsites "^3.0.0"
  
  path-exists@^4.0.0:
    version "4.0.0"
    resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-4.0.0.tgz#513bdbe2d3b95d7762e8c1137efa195c6c61b5b3"
    integrity sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==
  
  path-key@^3.1.0:
    version "3.1.1"
    resolved "https://registry.yarnpkg.com/path-key/-/path-key-3.1.1.tgz#581f6ade658cbba65a0d3380de7753295054f375"
    integrity sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==
  
  path-parse@^1.0.7:
    version "1.0.7"
    resolved "https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.7.tgz#fbc114b60ca42b30d9daf5858e4bd68bbedb6735"
    integrity sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==
  
  path-scurry@^1.11.1:
    version "1.11.1"
    resolved "https://registry.yarnpkg.com/path-scurry/-/path-scurry-1.11.1.tgz#7960a668888594a0720b12a911d1a742ab9f11d2"
    integrity sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==
    dependencies:
      lru-cache "^10.2.0"
      minipass "^5.0.0 || ^6.0.2 || ^7.0.0"
  
  path-type@^4.0.0:
    version "4.0.0"
    resolved "https://registry.yarnpkg.com/path-type/-/path-type-4.0.0.tgz#84ed01c0a7ba380afe09d90a8c180dcd9d03043b"
    integrity sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==
  
  picocolors@^1.1.1:
    version "1.1.1"
    resolved "https://registry.yarnpkg.com/picocolors/-/picocolors-1.1.1.tgz#3d321af3eab939b083c8f929a1d12cda81c26b6b"
    integrity sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==
  
  picomatch@^2.0.4, picomatch@^2.2.1, picomatch@^2.3.1:
    version "2.3.1"
    resolved "https://registry.yarnpkg.com/picomatch/-/picomatch-2.3.1.tgz#3ba3833733646d9d3e4995946c1365a67fb07a42"
    integrity sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==
  
  pify@^2.3.0:
    version "2.3.0"
    resolved "https://registry.yarnpkg.com/pify/-/pify-2.3.0.tgz#ed141a6ac043a849ea588498e7dca8b15330e90c"
    integrity sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==
  
  pirates@^4.0.1:
    version "4.0.7"
    resolved "https://registry.yarnpkg.com/pirates/-/pirates-4.0.7.tgz#643b4a18c4257c8a65104b73f3049ce9a0a15e22"
    integrity sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==
  
  postcss-import@^15.1.0:
    version "15.1.0"
    resolved "https://registry.yarnpkg.com/postcss-import/-/postcss-import-15.1.0.tgz#41c64ed8cc0e23735a9698b3249ffdbf704adc70"
    integrity sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==
    dependencies:
      postcss-value-parser "^4.0.0"
      read-cache "^1.0.0"
      resolve "^1.1.7"
  
  postcss-js@^4.0.1:
    version "4.0.1"
    resolved "https://registry.yarnpkg.com/postcss-js/-/postcss-js-4.0.1.tgz#61598186f3703bab052f1c4f7d805f3991bee9d2"
    integrity sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==
    dependencies:
      camelcase-css "^2.0.1"
  
  postcss-load-config@^4.0.2:
    version "4.0.2"
    resolved "https://registry.yarnpkg.com/postcss-load-config/-/postcss-load-config-4.0.2.tgz#7159dcf626118d33e299f485d6afe4aff7c4a3e3"
    integrity sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==
    dependencies:
      lilconfig "^3.0.0"
      yaml "^2.3.4"
  
  postcss-nested@^6.2.0:
    version "6.2.0"
    resolved "https://registry.yarnpkg.com/postcss-nested/-/postcss-nested-6.2.0.tgz#4c2d22ab5f20b9cb61e2c5c5915950784d068131"
    integrity sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==
    dependencies:
      postcss-selector-parser "^6.1.1"
  
  postcss-selector-parser@^6.1.1, postcss-selector-parser@^6.1.2:
    version "6.1.2"
    resolved "https://registry.yarnpkg.com/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz#27ecb41fb0e3b6ba7a1ec84fff347f734c7929de"
    integrity sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==
    dependencies:
      cssesc "^3.0.0"
      util-deprecate "^1.0.2"
  
  postcss-value-parser@^4.0.0, postcss-value-parser@^4.2.0:
    version "4.2.0"
    resolved "https://registry.yarnpkg.com/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz#723c09920836ba6d3e5af019f92bc0971c02e514"
    integrity sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==
  
  postcss@^8.4.38, postcss@^8.4.43, postcss@^8.4.47:
    version "8.5.6"
    resolved "https://registry.yarnpkg.com/postcss/-/postcss-8.5.6.tgz#2825006615a619b4f62a9e7426cc120b349a8f3c"
    integrity sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==
    dependencies:
      nanoid "^3.3.11"
      picocolors "^1.1.1"
      source-map-js "^1.2.1"
  
  prelude-ls@^1.2.1:
    version "1.2.1"
    resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.2.1.tgz#debc6489d7a6e6b0e7611888cec880337d316396"
    integrity sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==
  
  prop-types@^15.6.2, prop-types@^15.8.1:
    version "15.8.1"
    resolved "https://registry.yarnpkg.com/prop-types/-/prop-types-15.8.1.tgz#67d87bf1a694f48435cf332c24af10214a3140b5"
    integrity sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==
    dependencies:
      loose-envify "^1.4.0"
      object-assign "^4.1.1"
      react-is "^16.13.1"
  
  proxy-from-env@^1.1.0:
    version "1.1.0"
    resolved "https://registry.yarnpkg.com/proxy-from-env/-/proxy-from-env-1.1.0.tgz#e102f16ca355424865755d2c9e8ea4f24d58c3e2"
    integrity sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==
  
  punycode@^2.1.0:
    version "2.3.1"
    resolved "https://registry.yarnpkg.com/punycode/-/punycode-2.3.1.tgz#027422e2faec0b25e1549c3e1bd8309b9133b6e5"
    integrity sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==
  
  queue-microtask@^1.2.2:
    version "1.2.3"
    resolved "https://registry.yarnpkg.com/queue-microtask/-/queue-microtask-1.2.3.tgz#4929228bbc724dfac43e0efb058caf7b6cfb6243"
    integrity sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==
  
  react-dom@^18.3.1:
    version "18.3.1"
    resolved "https://registry.yarnpkg.com/react-dom/-/react-dom-18.3.1.tgz#c2265d79511b57d479b3dd3fdfa51536494c5cb4"
    integrity sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==
    dependencies:
      loose-envify "^1.1.0"
      scheduler "^0.23.2"
  
  react-i18next@^15.7.3:
    version "15.7.3"
    resolved "https://registry.yarnpkg.com/react-i18next/-/react-i18next-15.7.3.tgz#2eba235247dff0cbf9f0338e2ab85e10e127aa54"
    integrity sha512-AANws4tOE+QSq/IeMF/ncoHlMNZaVLxpa5uUGW1wjike68elVYr0018L9xYoqBr1OFO7G7boDPrbn0HpMCJxTw==
    dependencies:
      "@babel/runtime" "^7.27.6"
      html-parse-stringify "^3.0.1"
  
  react-is@^16.13.1:
    version "16.13.1"
    resolved "https://registry.yarnpkg.com/react-is/-/react-is-16.13.1.tgz#789729a4dc36de2999dc156dd6c1d9c18cea56a4"
    integrity sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==
  
  react-is@^18.3.1:
    version "18.3.1"
    resolved "https://registry.yarnpkg.com/react-is/-/react-is-18.3.1.tgz#e83557dc12eae63a99e003a46388b1dcbb44db7e"
    integrity sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==
  
  react-refresh@^0.17.0:
    version "0.17.0"
    resolved "https://registry.yarnpkg.com/react-refresh/-/react-refresh-0.17.0.tgz#b7e579c3657f23d04eccbe4ad2e58a8ed51e7e53"
    integrity sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==
  
  react-router-dom@^6.23.1:
    version "6.30.1"
    resolved "https://registry.yarnpkg.com/react-router-dom/-/react-router-dom-6.30.1.tgz#da2580c272ddb61325e435478566be9563a4a237"
    integrity sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==
    dependencies:
      "@remix-run/router" "1.23.0"
      react-router "6.30.1"
  
  react-router@6.30.1:
    version "6.30.1"
    resolved "https://registry.yarnpkg.com/react-router/-/react-router-6.30.1.tgz#ecb3b883c9ba6dbf5d319ddbc996747f4ab9f4c3"
    integrity sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==
    dependencies:
      "@remix-run/router" "1.23.0"
  
  react-smooth@^4.0.4:
    version "4.0.4"
    resolved "https://registry.yarnpkg.com/react-smooth/-/react-smooth-4.0.4.tgz#a5875f8bb61963ca61b819cedc569dc2453894b4"
    integrity sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==
    dependencies:
      fast-equals "^5.0.1"
      prop-types "^15.8.1"
      react-transition-group "^4.4.5"
  
  react-transition-group@^4.4.5:
    version "4.4.5"
    resolved "https://registry.yarnpkg.com/react-transition-group/-/react-transition-group-4.4.5.tgz#e53d4e3f3344da8521489fbef8f2581d42becdd1"
    integrity sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==
    dependencies:
      "@babel/runtime" "^7.5.5"
      dom-helpers "^5.0.1"
      loose-envify "^1.4.0"
      prop-types "^15.6.2"
  
  react@^18.3.1:
    version "18.3.1"
    resolved "https://registry.yarnpkg.com/react/-/react-18.3.1.tgz#49ab892009c53933625bd16b2533fc754cab2891"
    integrity sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==
    dependencies:
      loose-envify "^1.1.0"
  
  reactflow@^11.11.4:
    version "11.11.4"
    resolved "https://registry.yarnpkg.com/reactflow/-/reactflow-11.11.4.tgz#e3593e313420542caed81aecbd73fb9bc6576653"
    integrity sha512-70FOtJkUWH3BAOsN+LU9lCrKoKbtOPnz2uq0CV2PLdNSwxTXOhCbsZr50GmZ+Rtw3jx8Uv7/vBFtCGixLfd4Og==
    dependencies:
      "@reactflow/background" "11.3.14"
      "@reactflow/controls" "11.2.14"
      "@reactflow/core" "11.11.4"
      "@reactflow/minimap" "11.7.14"
      "@reactflow/node-resizer" "2.2.14"
      "@reactflow/node-toolbar" "1.3.14"
  
  read-cache@^1.0.0:
    version "1.0.0"
    resolved "https://registry.yarnpkg.com/read-cache/-/read-cache-1.0.0.tgz#e664ef31161166c9751cdbe8dbcf86b5fb58f774"
    integrity sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==
    dependencies:
      pify "^2.3.0"
  
  readdirp@~3.6.0:
    version "3.6.0"
    resolved "https://registry.yarnpkg.com/readdirp/-/readdirp-3.6.0.tgz#74a370bd857116e245b29cc97340cd431a02a6c7"
    integrity sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==
    dependencies:
      picomatch "^2.2.1"
  
  recharts-scale@^0.4.4:
    version "0.4.5"
    resolved "https://registry.yarnpkg.com/recharts-scale/-/recharts-scale-0.4.5.tgz#0969271f14e732e642fcc5bd4ab270d6e87dd1d9"
    integrity sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==
    dependencies:
      decimal.js-light "^2.4.1"
  
  recharts@^2.12.7:
    version "2.15.4"
    resolved "https://registry.yarnpkg.com/recharts/-/recharts-2.15.4.tgz#0ed3e66c0843bcf2d9f9a172caf97b1d05127a5f"
    integrity sha512-UT/q6fwS3c1dHbXv2uFgYJ9BMFHu3fwnd7AYZaEQhXuYQ4hgsxLvsUXzGdKeZrW5xopzDCvuA2N41WJ88I7zIw==
    dependencies:
      clsx "^2.0.0"
      eventemitter3 "^4.0.1"
      lodash "^4.17.21"
      react-is "^18.3.1"
      react-smooth "^4.0.4"
      recharts-scale "^0.4.4"
      tiny-invariant "^1.3.1"
      victory-vendor "^36.6.8"
  
  resolve-from@^4.0.0:
    version "4.0.0"
    resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-4.0.0.tgz#4abcd852ad32dd7baabfe9b40e00a36db5f392e6"
    integrity sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==
  
  resolve@^1.1.7, resolve@^1.22.8:
    version "1.22.10"
    resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.22.10.tgz#b663e83ffb09bbf2386944736baae803029b8b39"
    integrity sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==
    dependencies:
      is-core-module "^2.16.0"
      path-parse "^1.0.7"
      supports-preserve-symlinks-flag "^1.0.0"
  
  reusify@^1.0.4:
    version "1.1.0"
    resolved "https://registry.yarnpkg.com/reusify/-/reusify-1.1.0.tgz#0fe13b9522e1473f51b558ee796e08f11f9b489f"
    integrity sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==
  
  rollup@^4.20.0:
    version "4.52.2"
    resolved "https://registry.yarnpkg.com/rollup/-/rollup-4.52.2.tgz#43dd135805c919285376634c8520074c5eb7a91a"
    integrity sha512-I25/2QgoROE1vYV+NQ1En9T9UFB9Cmfm2CJ83zZOlaDpvz29wGQSZXWKw7MiNXau7wYgB/T9fVIdIuEQ+KbiiA==
    dependencies:
      "@types/estree" "1.0.8"
    optionalDependencies:
      fsevents "~2.3.2"
  
  run-parallel@^1.1.9:
    version "1.2.0"
    resolved "https://registry.yarnpkg.com/run-parallel/-/run-parallel-1.2.0.tgz#66d1368da7bdf921eb9d95bd1a9229e7f21a43ee"
    integrity sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==
    dependencies:
      queue-microtask "^1.2.2"
  
  scheduler@^0.23.2:
    version "0.23.2"
    resolved "https://registry.yarnpkg.com/scheduler/-/scheduler-0.23.2.tgz#414ba64a3b282892e944cf2108ecc078d115cdc3"
    integrity sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==
    dependencies:
      loose-envify "^1.1.0"
  
  semver@^6.3.1:
    version "6.3.1"
    resolved "https://registry.yarnpkg.com/semver/-/semver-6.3.1.tgz#556d2ef8689146e46dcea4bfdd095f3434dffcb4"
    integrity sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==
  
  semver@^7.6.0:
    version "7.7.2"
    resolved "https://registry.yarnpkg.com/semver/-/semver-7.7.2.tgz#67d99fdcd35cec21e6f8b87a7fd515a33f982b58"
    integrity sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==
  
  shebang-command@^2.0.0:
    version "2.0.0"
    resolved "https://registry.yarnpkg.com/shebang-command/-/shebang-command-2.0.0.tgz#ccd0af4f8835fbdc265b82461aaf0c36663f34ea"
    integrity sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==
    dependencies:
      shebang-regex "^3.0.0"
  
  shebang-regex@^3.0.0:
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-3.0.0.tgz#ae16f1644d873ecad843b0307b143362d4c42172"
    integrity sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==
  
  signal-exit@^4.0.1:
    version "4.1.0"
    resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-4.1.0.tgz#952188c1cbd546070e2dd20d0f41c0ae0530cb04"
    integrity sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==
  
  slash@^3.0.0:
    version "3.0.0"
    resolved "https://registry.yarnpkg.com/slash/-/slash-3.0.0.tgz#6539be870c165adbd5240220dbe361f1bc4d4634"
    integrity sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==
  
  source-map-js@^1.2.1:
    version "1.2.1"
    resolved "https://registry.yarnpkg.com/source-map-js/-/source-map-js-1.2.1.tgz#1ce5650fddd87abc099eda37dcff024c2667ae46"
    integrity sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==
  
  "string-width-cjs@npm:string-width@^4.2.0", string-width@^4.1.0:
    name string-width-cjs
    version "4.2.3"
    resolved "https://registry.yarnpkg.com/string-width/-/string-width-4.2.3.tgz#269c7117d27b05ad2e536830a8ec895ef9c6d010"
    integrity sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==
    dependencies:
      emoji-regex "^8.0.0"
      is-fullwidth-code-point "^3.0.0"
      strip-ansi "^6.0.1"
  
  string-width@^5.0.1, string-width@^5.1.2:
    version "5.1.2"
    resolved "https://registry.yarnpkg.com/string-width/-/string-width-5.1.2.tgz#14f8daec6d81e7221d2a357e668cab73bdbca794"
    integrity sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==
    dependencies:
      eastasianwidth "^0.2.0"
      emoji-regex "^9.2.2"
      strip-ansi "^7.0.1"
  
  "strip-ansi-cjs@npm:strip-ansi@^6.0.1", strip-ansi@^6.0.0, strip-ansi@^6.0.1:
    name strip-ansi-cjs
    version "6.0.1"
    resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.1.tgz#9e26c63d30f53443e9489495b2105d37b67a85d9"
    integrity sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==
    dependencies:
      ansi-regex "^5.0.1"
  
  strip-ansi@^7.0.1:
    version "7.1.0"
    resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-7.1.0.tgz#d5b6568ca689d8561370b0707685d22434faff45"
    integrity sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==
    dependencies:
      ansi-regex "^6.0.1"
  
  strip-json-comments@^3.1.1:
    version "3.1.1"
    resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-3.1.1.tgz#31f1281b3832630434831c310c01cccda8cbe006"
    integrity sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==
  
  sucrase@^3.35.0:
    version "3.35.0"
    resolved "https://registry.yarnpkg.com/sucrase/-/sucrase-3.35.0.tgz#57f17a3d7e19b36d8995f06679d121be914ae263"
    integrity sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==
    dependencies:
      "@jridgewell/gen-mapping" "^0.3.2"
      commander "^4.0.0"
      glob "^10.3.10"
      lines-and-columns "^1.1.6"
      mz "^2.7.0"
      pirates "^4.0.1"
      ts-interface-checker "^0.1.9"
  
  supports-color@^7.1.0:
    version "7.2.0"
    resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-7.2.0.tgz#1b7dcdcb32b8138801b3e478ba6a51caa89648da"
    integrity sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==
    dependencies:
      has-flag "^4.0.0"
  
  supports-preserve-symlinks-flag@^1.0.0:
    version "1.0.0"
    resolved "https://registry.yarnpkg.com/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz#6eda4bd344a3c94aea376d4cc31bc77311039e09"
    integrity sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==
  
  tailwindcss@^3.4.4:
    version "3.4.17"
    resolved "https://registry.yarnpkg.com/tailwindcss/-/tailwindcss-3.4.17.tgz#ae8406c0f96696a631c790768ff319d46d5e5a63"
    integrity sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==
    dependencies:
      "@alloc/quick-lru" "^5.2.0"
      arg "^5.0.2"
      chokidar "^3.6.0"
      didyoumean "^1.2.2"
      dlv "^1.1.3"
      fast-glob "^3.3.2"
      glob-parent "^6.0.2"
      is-glob "^4.0.3"
      jiti "^1.21.6"
      lilconfig "^3.1.3"
      micromatch "^4.0.8"
      normalize-path "^3.0.0"
      object-hash "^3.0.0"
      picocolors "^1.1.1"
      postcss "^8.4.47"
      postcss-import "^15.1.0"
      postcss-js "^4.0.1"
      postcss-load-config "^4.0.2"
      postcss-nested "^6.2.0"
      postcss-selector-parser "^6.1.2"
      resolve "^1.22.8"
      sucrase "^3.35.0"
  
  thenify-all@^1.0.0:
    version "1.6.0"
    resolved "https://registry.yarnpkg.com/thenify-all/-/thenify-all-1.6.0.tgz#1a1918d402d8fc3f98fbf234db0bcc8cc10e9726"
    integrity sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==
    dependencies:
      thenify ">= 3.1.0 < 4"
  
  "thenify@>= 3.1.0 < 4":
    version "3.3.1"
    resolved "https://registry.yarnpkg.com/thenify/-/thenify-3.3.1.tgz#8932e686a4066038a016dd9e2ca46add9838a95f"
    integrity sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==
    dependencies:
      any-promise "^1.0.0"
  
  tiny-invariant@^1.3.1:
    version "1.3.3"
    resolved "https://registry.yarnpkg.com/tiny-invariant/-/tiny-invariant-1.3.3.tgz#46680b7a873a0d5d10005995eb90a70d74d60127"
    integrity sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==
  
  to-regex-range@^5.0.1:
    version "5.0.1"
    resolved "https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-5.0.1.tgz#1648c44aae7c8d988a326018ed72f5b4dd0392e4"
    integrity sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==
    dependencies:
      is-number "^7.0.0"
  
  ts-api-utils@^1.3.0:
    version "1.4.3"
    resolved "https://registry.yarnpkg.com/ts-api-utils/-/ts-api-utils-1.4.3.tgz#bfc2215fe6528fecab2b0fba570a2e8a4263b064"
    integrity sha512-i3eMG77UTMD0hZhgRS562pv83RC6ukSAC2GMNWc+9dieh/+jDM5u5YG+NHX6VNDRHQcHwmsTHctP9LhbC3WxVw==
  
  ts-interface-checker@^0.1.9:
    version "0.1.13"
    resolved "https://registry.yarnpkg.com/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz#784fd3d679722bc103b1b4b8030bcddb5db2a699"
    integrity sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==
  
  tslib@^2.4.0:
    version "2.8.1"
    resolved "https://registry.yarnpkg.com/tslib/-/tslib-2.8.1.tgz#612efe4ed235d567e8aba5f2a5fab70280ade83f"
    integrity sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==
  
  type-check@^0.4.0, type-check@~0.4.0:
    version "0.4.0"
    resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.4.0.tgz#07b8203bfa7056c0657050e3ccd2c37730bab8f1"
    integrity sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==
    dependencies:
      prelude-ls "^1.2.1"
  
  typescript-eslint@^7.13.1:
    version "7.18.0"
    resolved "https://registry.yarnpkg.com/typescript-eslint/-/typescript-eslint-7.18.0.tgz#e90d57649b2ad37a7475875fa3e834a6d9f61eb2"
    integrity sha512-PonBkP603E3tt05lDkbOMyaxJjvKqQrXsnow72sVeOFINDE/qNmnnd+f9b4N+U7W6MXnnYyrhtmF2t08QWwUbA==
    dependencies:
      "@typescript-eslint/eslint-plugin" "7.18.0"
      "@typescript-eslint/parser" "7.18.0"
      "@typescript-eslint/utils" "7.18.0"
  
  typescript@^5.4.5:
    version "5.9.2"
    resolved "https://registry.yarnpkg.com/typescript/-/typescript-5.9.2.tgz#d93450cddec5154a2d5cabe3b8102b83316fb2a6"
    integrity sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==
  
  update-browserslist-db@^1.1.3:
    version "1.1.3"
    resolved "https://registry.yarnpkg.com/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz#348377dd245216f9e7060ff50b15a1b740b75420"
    integrity sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==
    dependencies:
      escalade "^3.2.0"
      picocolors "^1.1.1"
  
  uri-js@^4.2.2:
    version "4.4.1"
    resolved "https://registry.yarnpkg.com/uri-js/-/uri-js-4.4.1.tgz#9b1a52595225859e55f669d928f88c6c57f2a77e"
    integrity sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==
    dependencies:
      punycode "^2.1.0"
  
  use-sync-external-store@^1.2.2:
    version "1.5.0"
    resolved "https://registry.yarnpkg.com/use-sync-external-store/-/use-sync-external-store-1.5.0.tgz#55122e2a3edd2a6c106174c27485e0fd59bcfca0"
    integrity sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==
  
  util-deprecate@^1.0.2:
    version "1.0.2"
    resolved "https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf"
    integrity sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==
  
  victory-vendor@^36.6.8:
    version "36.9.2"
    resolved "https://registry.yarnpkg.com/victory-vendor/-/victory-vendor-36.9.2.tgz#668b02a448fa4ea0f788dbf4228b7e64669ff801"
    integrity sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==
    dependencies:
      "@types/d3-array" "^3.0.3"
      "@types/d3-ease" "^3.0.0"
      "@types/d3-interpolate" "^3.0.1"
      "@types/d3-scale" "^4.0.2"
      "@types/d3-shape" "^3.1.0"
      "@types/d3-time" "^3.0.0"
      "@types/d3-timer" "^3.0.0"
      d3-array "^3.1.6"
      d3-ease "^3.0.1"
      d3-interpolate "^3.0.1"
      d3-scale "^4.0.2"
      d3-shape "^3.1.0"
      d3-time "^3.0.0"
      d3-timer "^3.0.1"
  
  vite@^5.3.1:
    version "5.4.20"
    resolved "https://registry.yarnpkg.com/vite/-/vite-5.4.20.tgz#3267a5e03f21212f44edfd72758138e8fcecd76a"
    integrity sha512-j3lYzGC3P+B5Yfy/pfKNgVEg4+UtcIJcVRt2cDjIOmhLourAqPqf8P7acgxeiSgUB7E3p2P8/3gNIgDLpwzs4g==
    dependencies:
      esbuild "^0.21.3"
      postcss "^8.4.43"
      rollup "^4.20.0"
    optionalDependencies:
      fsevents "~2.3.3"
  
  void-elements@3.1.0:
    version "3.1.0"
    resolved "https://registry.yarnpkg.com/void-elements/-/void-elements-3.1.0.tgz#614f7fbf8d801f0bb5f0661f5b2f5785750e4f09"
    integrity sha512-Dhxzh5HZuiHQhbvTW9AMetFfBHDMYpo23Uo9btPXgdYP+3T5S+p+jgNy7spra+veYhBP2dCSgxR/i2Y02h5/6w==
  
  which@^2.0.1:
    version "2.0.2"
    resolved "https://registry.yarnpkg.com/which/-/which-2.0.2.tgz#7c6a8dd0a636a0327e10b59c9286eee93f3f51b1"
    integrity sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==
    dependencies:
      isexe "^2.0.0"
  
  word-wrap@^1.2.5:
    version "1.2.5"
    resolved "https://registry.yarnpkg.com/word-wrap/-/word-wrap-1.2.5.tgz#d2c45c6dd4fbce621a66f136cbe328afd0410b34"
    integrity sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==
  
  "wrap-ansi-cjs@npm:wrap-ansi@^7.0.0":
    version "7.0.0"
    resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-7.0.0.tgz#67e145cff510a6a6984bdf1152911d69d2eb9e43"
    integrity sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==
    dependencies:
      ansi-styles "^4.0.0"
      string-width "^4.1.0"
      strip-ansi "^6.0.0"
  
  wrap-ansi@^8.1.0:
    version "8.1.0"
    resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-8.1.0.tgz#56dc22368ee570face1b49819975d9b9a5ead214"
    integrity sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==
    dependencies:
      ansi-styles "^6.1.0"
      string-width "^5.0.1"
      strip-ansi "^7.0.1"
  
  yallist@^3.0.2:
    version "3.1.1"
    resolved "https://registry.yarnpkg.com/yallist/-/yallist-3.1.1.tgz#dbb7daf9bfd8bac9ab45ebf602b8cbad0d5d08fd"
    integrity sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==
  
  yaml@^2.3.4:
    version "2.8.0"
    resolved "https://registry.yarnpkg.com/yaml/-/yaml-2.8.0.tgz#15f8c9866211bdc2d3781a0890e44d4fa1a5fff6"
    integrity sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==
  
  yocto-queue@^0.1.0:
    version "0.1.0"
    resolved "https://registry.yarnpkg.com/yocto-queue/-/yocto-queue-0.1.0.tgz#0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b"
    integrity sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==
  
  zustand@^4.4.1:
    version "4.5.7"
    resolved "https://registry.yarnpkg.com/zustand/-/zustand-4.5.7.tgz#7d6bb2026a142415dd8be8891d7870e6dbe65f55"
    integrity sha512-CHOUy7mu3lbD6o6LJLfllpjkzhHXSBlX8B9+qPddUsIfeF5S/UZ5q0kmCsnRqT1UHFQZchNFDDzMbQsuesHWlw==
    dependencies:
      use-sync-external-store "^1.2.2"
PK
     H>[%�/�  �     netlify.toml[build]
  command = "npm install && npm run build"
  publish = "dist"
  base = "/"
  ignore = "false"  # Never skip build
  force = "true"    # Force build even if no changes detected

[build.environment]
  NODE_VERSION = "18"
  CI = "true"       # Ensure we're in CI mode
  NETLIFY_BUILD_SKIP = "false"  # Never skip build

[build.processing]
  skip_processing = false  # Ensure processing is not skipped

[dev]
  command = "vite"
  port = 3000
  publish = "dist"PK 
     H>[���      
                 .gitignorePK 
     H>[���@B  B  	             6   README.mdPK 
     H>[�e���  �               �  eslint.config.jsPK 
     H>[��v
  
  
             �  index.htmlPK 
     H>[k�~׽  �                 package.jsonPK 
     H>[��6�b   b                �  postcss.config.jsPK 
     H>[                        �  src/PK 
     H>[���Ƴ  �               �  src/App.tsxPK 
     H>[                        �4  src/components/PK 
     H>[����  �               �4  src/components/ComingSoon.tsxPK 
     H>[                        �:  src/components/Dashboard/PK 
     H>[	��>  >  &             �:  src/components/Dashboard/Dashboard.tsxPK 
     H>[Ba�E�  �  +             ]@  src/components/Dashboard/DashboardStats.tsxPK 
     H>[`�"�  �  +             YM  src/components/Dashboard/ProgressCharts.tsxPK 
     H>[ ��\  \  )             .f  src/components/Dashboard/QuickActions.tsxPK 
     H>[�L���  �  +             �s  src/components/Dashboard/RecentActivity.tsxPK 
     H>[                        ��  src/components/Layout/PK 
     H>[-5v  v                ��  src/components/Layout/Header.tsxPK 
     H>[���
  
  *             ��  src/components/Layout/LanguageSwitcher.tsxPK 
     H>[��ˬ�
  �
  &             ��  src/components/Layout/RoleSwitcher.tsxPK 
     H>[4�ϟ#"  #"  !             ��  src/components/Layout/Sidebar.tsxPK 
     H>[��a��  �               P�  src/components/Login.tsxPK 
     H>[                        x�  src/components/Panels/PK 
     H>[�����  ��  $             ��  src/components/Panels/AdminPanel.tsxPK 
     H>[&��+(
  (
  %             �u src/components/Panels/MentorPanel.tsxPK 
     H>[�o  o  '             � src/components/Panels/SettingsPanel.tsxPK 
     H>[�5L(/  /  +             �� src/components/Panels/SubscriptionPanel.tsxPK 
     H>[�G%�?;  ?;  *             (� src/components/Panels/UserProfilePanel.tsxPK 
     H>[                        �� src/components/Tools/PK 
     H>[W,�n  n  $             �� src/components/Tools/BeliefsTool.tsxPK 
     H>[XBg�.  �.  '             �� src/components/Tools/CommunityForum.tsxPK 
     H>[O�͖<  �<  "             l- src/components/Tools/EightPlan.tsxPK 
     H>[���`�  �  $             Bj src/components/Tools/GoalPyramid.tsxPK 
     H>[�%Q    )             {z src/components/Tools/GratitudeJournal.tsxPK 
     H>[4�~�`  `  %             Ӈ src/components/Tools/HabitTracker.tsxPK 
     H>[Q�ag  g  %             v� src/components/Tools/IkigaiFinder.tsxPK 
     H>[*5i��  �  '              � src/components/Tools/MindMapBuilder.tsxPK 
     H>[�F�>�  �  %             � src/components/Tools/MoneyPlanner.tsxPK 
     H>[�wݿ�  �  %             +� src/components/Tools/SwotAnalysis.tsxPK 
     H>[E����  �  $             i� src/components/Tools/VisionBoard.tsxPK 
     H>[                        A� src/components/common/PK 
     H>[�Yd|
  |
               u� src/components/common/Modal.tsxPK 
     H>[��h�  �  +             .� src/components/common/PaymentSimulation.tsxPK 
     H>[                        : src/contexts/PK 
     H>[���KS  KS               e src/contexts/AuthContext.tsxPK 
     H>[��'��  �               �Y src/contexts/ThemeContext.tsxPK 
     H>[WW��K  K               �^ src/i18n.tsPK 
     H>[���;=   =                5b src/index.cssPK 
     H>[                        �b src/lib/PK 
     H>[T��K  K               �b src/lib/profanityFilter.tsPK 
     H>[                        Fh src/locales/PK 
     H>[                        ph src/locales/ar/PK 
     H>[z*�@B  @B               �h src/locales/ar/translation.jsonPK 
     H>[                        � src/locales/en/PK 
     H>[��D�B5  B5               G� src/locales/en/translation.jsonPK 
     H>[                        �� src/locales/fa/PK 
     H>[��r�D  �D               �� src/locales/fa/translation.jsonPK 
     H>[��͞                 �% src/main.tsxPK 
     H>[�D  D               ' tailwind.config.jsPK 
     H>[�+�i  i               �, tsconfig.app.jsonPK 
     H>[^�(5�   �                +/ tsconfig.jsonPK 
     H>[�+�i  i               �/ tsconfig.node.jsonPK 
     H>[9�Qh�   �                x2 vite.config.tsPK 
     H>[<��   �                n3 .envPK 
     H>[                        ^4 src/config/PK 
     H>[                        �4 src/config/profanity/PK 
     H>[jr��M   M                �4 src/config/profanity/en.jsonPK 
     H>[;L�QR   R                A5 src/config/profanity/fa.jsonPK 
     H>[��ݷZ   Z                �5 src/config/profanity/ar.jsonPK 
     H>[\��o�  �               a6 src/lib/date.tsPK 
     H>[��V�  �               w= yarn-error.logPK 
     H>[%�/�  �               R> netlify.tomlPK    H H   L@   
